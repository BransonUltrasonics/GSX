/*-----------------------------------------------------------------------------
 * AtemRasRemoteProtocol.h
 * Copyright                acontis technologies GmbH, Weingarten, Germany
 * Response                 Paul Bussmann
 * Description              RAS protocol structure and timing values
 *---------------------------------------------------------------------------*/

#ifndef INC_ATEMRASREMOTEPROTOCOL
#define INC_ATEMRASREMOTEPROTOCOL 1

/*-INCLUDES------------------------------------------------------------------*/
#include "AtEthercat.h"
#include "EcSocket.h"

/*-DEFINES-------------------------------------------------------------------*/
#define RAS_CMD_RECV_TIMEOUT        (1000)   /* 1s */
#define RAS_DISCONNECT_ACK_TIMEOUT  (20)     /* 20 msec */

static EC_INLINESTART EC_T_SOCKTYPE ATEMRAS_GET_DEFAULT_SOCKTYPE(EC_T_WORD wPort)
{
    EC_T_SOCKTYPE eSockType = emrassocktype_unknown;
    EC_UNREFPARM(wPort); /* not always needed */

#if (defined EC_SOCKET_MSGQUEUE_RTOSSHM_SUPPORTED)
    eSockType = emrassocktype_rtosshm;
#endif /* EC_SOCKET_MSGQUEUE_RTOSSHM_SUPPORTED */
#if (defined EC_SOCKET_RTOSLIB_SUPPORTED)
    eSockType = emrassocktype_rtoslib;
#endif /* EC_SOCKET_RTOSLIB_SUPPORTED */
#if (defined EC_SOCKET_MSGQUEUE_WIN32_SUPPORTED)
    eSockType = emrassocktype_msg;
#endif /* EC_SOCKET_MSGQUEUE_WIN32_SUPPORTED */
#if (defined EC_SOCKET_IP_SUPPORTED)
    eSockType = emrassocktype_tcp;
#endif /* EC_SOCKET_IP_SUPPORTED */

#if (defined EC_SOCKET_MSGQUEUE_WIN32_SUPPORTED)
    if (0 == wPort)
    {
        eSockType = emrassocktype_msg;
    }
#endif /* EC_SOCKET_MSGQUEUE_WIN32_SUPPORTED */
#if defined(EC_SOCKET_SHM_SUPPORTED)
    if (1 == wPort)
    {
        eSockType = emrassocktype_shm;
    }
#endif /* EC_SOCKET_SHM_SUPPORTED */
#if defined(EC_SOCKET_MSGQUEUE_RTOSSHM_SUPPORTED)
    if (2 == wPort)
    {
        eSockType = emrassocktype_rtosshm;
    }
#endif /* EC_SOCKET_MSGQUEUE_RTOSSHM_SUPPORTED */
#if (defined EC_SOCKET_RTOSLIB_SUPPORTED)
    if (3 == wPort)
    {
        eSockType = emrassocktype_rtoslib;
    }
#endif /* EC_SOCKET_RTOSLIB_SUPPORTED */
    return eSockType;
} EC_INLINESTOP

/* MAX_FILE_NAME_SIZE changed in RAS V1.9.1.12 (0x0109010C) from 32 to 64 */
#define ATEMRAS_MAX_FILE_NAME_SIZE_V1 32
#define ATEMRAS_MAX_FILE_NAME_SIZE    64
#define ATEMRAS_FILE_NAME_SIZE(dwVersion) (((dwVersion)<0x0109010C)?ATEMRAS_MAX_FILE_NAME_SIZE_V1:ATEMRAS_MAX_FILE_NAME_SIZE)

/*-TYPEDEFS------------------------------------------------------------------*/
#include EC_PACKED_INCLUDESTART(1)

typedef union _ATEMRAS_T_PROTOHDR
{
    EC_T_BYTE   byData[16];
    struct _t_sHdr
    {
        EC_T_DWORD  _dwCookie;              /* 0-3 */
        EC_T_BYTE   _byCmd;                 /* 4 */
        EC_T_BYTE   _byStatus;              /* 5: Bit0=Ack, Bit1=Req, Bit2=Wait */
        EC_T_DWORD  _dwLength;              /* 6-9 */
        EC_T_DWORD  _dwSequenceNr;          /* 10-13 */
        EC_T_WORD   _wVersion;              /* 14-15 */
    } EC_PACKED(1) sHdr;
} EC_PACKED(1) ATEMRAS_T_PROTOHDR, *ATEMRAS_PT_PROTOHDR;
#define ATEMRAS_T_PROTOHDR_SIZE     sizeof(ATEMRAS_T_PROTOHDR)
#define ATEMRAS_OFFSET_COOKIE       ((EC_T_BYTE)0)
#define ATEMRAS_OFFSET_CMD          ((EC_T_BYTE)4)
#define ATEMRAS_OFFSET_STATUS       ((EC_T_BYTE)5)
#define ATEMRAS_OFFSET_LENGTH       ((EC_T_BYTE)6)
#define ATEMRAS_OFFSET_SEQUENCENR   ((EC_T_BYTE)10)
#define ATEMRAS_OFFSET_VERSIONNR    ((EC_T_BYTE)14)

#define ATEMRAS_READ_PARTIAL_LENGTH	0x400

static EC_INLINESTART EC_T_DWORD ATEMRAS_PROTOHDR_GET_COOKIE(ATEMRAS_PT_PROTOHDR p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_OFFSET_COOKIE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_PROTOHDR_SET_COOKIE(ATEMRAS_PT_PROTOHDR p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_OFFSET_COOKIE), dwVal);
} EC_INLINESTOP
#define COMMANDDEREF (*(((EC_T_PBYTE)p)+ATEMRAS_OFFSET_CMD))
static EC_INLINESTART EC_T_BYTE ATEMRAS_PROTOHDR_GET_CMD(ATEMRAS_PT_PROTOHDR p)
{
    return (EC_T_BYTE)(COMMANDDEREF&0xff);
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_PROTOHDR_SET_CMD(ATEMRAS_PT_PROTOHDR p, EC_T_BYTE byVal)
{
    COMMANDDEREF = (EC_T_BYTE)(byVal&0xff);
} EC_INLINESTOP
#undef COMMANDDEREF
#define STATUSDEREF (*(((EC_T_PBYTE)p)+ATEMRAS_OFFSET_STATUS))
static EC_INLINESTART EC_T_BYTE ATEMRAS_PROTOHDR_GET_STATUS(ATEMRAS_PT_PROTOHDR p)
{
    return (EC_T_BYTE)(STATUSDEREF&0xff);
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_PROTOHDR_SET_STATUS(ATEMRAS_PT_PROTOHDR p, EC_T_BYTE byVal)
{
    STATUSDEREF = (EC_T_BYTE)(byVal&0xff);
} EC_INLINESTOP
static EC_INLINESTART EC_T_BYTE ATEMRAS_PROTOHDR_GET_STATUS_ACK(ATEMRAS_PT_PROTOHDR p)
{
    return (EC_T_BYTE)((STATUSDEREF>>0)&0x1);
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_PROTOHDR_SET_STATUS_ACK(ATEMRAS_PT_PROTOHDR p, EC_T_BYTE byVal)
{
    STATUSDEREF = (EC_T_BYTE)((STATUSDEREF & (~(0x1<<0)))|((byVal&0x1)<<0));
} EC_INLINESTOP
static EC_INLINESTART EC_T_BYTE ATEMRAS_PROTOHDR_GET_STATUS_REQ(ATEMRAS_PT_PROTOHDR p)
{
    return (EC_T_BYTE)((STATUSDEREF>>1)&0x1);
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_PROTOHDR_SET_STATUS_REQ(ATEMRAS_PT_PROTOHDR p, EC_T_BYTE byVal)
{
    STATUSDEREF = (EC_T_BYTE)((STATUSDEREF & (~(0x1<<1)))|((byVal&0x1)<<1));
} EC_INLINESTOP
static EC_INLINESTART EC_T_BYTE ATEMRAS_PROTOHDR_GET_STATUS_WAIT(ATEMRAS_PT_PROTOHDR p)
{
    return (EC_T_BYTE)((STATUSDEREF>>2)&0x1);
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_PROTOHDR_SET_STATUS_WAIT(ATEMRAS_PT_PROTOHDR p, EC_T_BYTE byVal)
{
    STATUSDEREF = (EC_T_BYTE)((STATUSDEREF & (~(0x1<<2)))|((byVal&0x1)<<2));
}  
#undef STATUSDEREF
static EC_INLINESTART EC_T_DWORD ATEMRAS_PROTOHDR_GET_LENGTH(ATEMRAS_PT_PROTOHDR p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_OFFSET_LENGTH));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_PROTOHDR_SET_LENGTH(ATEMRAS_PT_PROTOHDR p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_OFFSET_LENGTH), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_PROTOHDR_GET_SEQUENCENR(ATEMRAS_PT_PROTOHDR p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_OFFSET_SEQUENCENR));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_PROTOHDR_SET_SEQUENCENR(ATEMRAS_PT_PROTOHDR p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_OFFSET_SEQUENCENR), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_WORD ATEMRAS_PROTOHDR_GET_VERSIONNR(ATEMRAS_PT_PROTOHDR p)
{
    return EC_GET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_OFFSET_VERSIONNR));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_PROTOHDR_SET_VERSIONENR(ATEMRAS_PT_PROTOHDR p, EC_T_WORD wVal)
{
    EC_SET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_OFFSET_VERSIONNR), wVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_PBYTE ATEMRAS_PROTOHDR_DATA(ATEMRAS_PT_PROTOHDR p)
{
    return (EC_T_PBYTE)(((EC_T_PBYTE)p)+ATEMRAS_T_PROTOHDR_SIZE);
} EC_INLINESTOP

typedef enum _ATEMRAS_T_CMDTYPE
{
    /* connection control */
    emrascmd_nop                =   0x00,
    emrascmd_idle               =   0x01,
    emrascmd_connect            =   0x02,
    emrascmd_disconnect         =   0x03,
    emrascmd_connect_oem        =   0x04,
    emrascmd_getconnectioninfo  =   0x05,
    emrascmd_setconnectionparms =   0x06,

    /* regular commands */
    emrascmd_emapicommand       =   0x10,
    emrascmd_emapinotification  =   0x20,

    /* Borland C++ datatype alignment correction */
    emrascmd_BCppDummy          = 0xFFFFFFFF
} ATEMRAS_T_CMDTYPE, *ATEMRAS_PT_CMDTYPE;
const EC_T_CHAR* ATEMRAS_T_CMDTYPE_TEXT(ATEMRAS_T_CMDTYPE eVal);
#ifdef __cplusplus
static EC_INLINESTART const EC_T_CHAR* ATEMRAS_T_CMDTYPE_TEXT(EC_T_BYTE byVal) { return ATEMRAS_T_CMDTYPE_TEXT((ATEMRAS_T_CMDTYPE)byVal); } EC_INLINESTOP
#endif

#define ATEMRAS_MIN_PROTOCOL_VERSION 0x01090000

/* --- emrascmd_connect_oem --- */
typedef struct _ATEMRAS_T_CONNECT_OEM_TRANSFER
{
    EC_T_DWORD  dwVersion;      /*< [in] Client Version */
    EC_T_DWORD  dwInstanceID;   /*< [in] OEM Master Instance */
    EC_T_UINT64 qwOemKey;       /*< [in] OEM Key */
} EC_PACKED(1) ATEMRAS_T_CONNECT_OEM_TRANSFER;
#define ATEMRAS_T_CONNECT_OEM_TRANSFER_SIZE sizeof(ATEMRAS_T_CONNECT_OEM_TRANSFER)
#define ATEMRAS_CONNECT_OEM_OFFS_VERSION    ((EC_T_DWORD)0x00)
#define ATEMRAS_CONNECT_OEM_OFFS_INSTANCE   ((EC_T_DWORD)0x04)
#define ATEMRAS_CONNECT_OEM_OFFS_OEM_KEY    ((EC_T_DWORD)0x08)

static EC_INLINESTART EC_T_DWORD ATEMRAS_CONNECT_OEM_GET_VERSION(ATEMRAS_T_CONNECT_OEM_TRANSFER* p)
{
    return EC_GET_FRM_DWORD(((EC_T_PBYTE)p) + ATEMRAS_CONNECT_OEM_OFFS_VERSION);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_CONNECT_OEM_GET_INSTANCE(ATEMRAS_T_CONNECT_OEM_TRANSFER* p)
{
    return EC_GET_FRM_DWORD(((EC_T_PBYTE)p) + ATEMRAS_CONNECT_OEM_OFFS_INSTANCE);
} EC_INLINESTOP
static EC_INLINESTART EC_T_UINT64 ATEMRAS_CONNECT_OEM_GET_OEM_KEY(ATEMRAS_T_CONNECT_OEM_TRANSFER* p)
{
    return EC_GET_FRM_QWORD(((EC_T_PBYTE)p) + ATEMRAS_CONNECT_OEM_OFFS_OEM_KEY);
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_CONNECT_OEM_SET_VERSION(ATEMRAS_T_CONNECT_OEM_TRANSFER* p, EC_T_DWORD dwVersion)
{
    EC_SET_FRM_DWORD(((EC_T_PBYTE)p) + ATEMRAS_CONNECT_OEM_OFFS_VERSION, dwVersion);
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_CONNECT_OEM_SET_INSTANCE(ATEMRAS_T_CONNECT_OEM_TRANSFER* p, EC_T_DWORD dwInstanceID)
{
    EC_SET_FRM_DWORD(((EC_T_PBYTE)p) + ATEMRAS_CONNECT_OEM_OFFS_INSTANCE, dwInstanceID);
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_CONNECT_OEM_SET_OEM_KEY(ATEMRAS_T_CONNECT_OEM_TRANSFER* p, EC_T_UINT64 qwOemKey)
{
    EC_SET_FRM_QWORD(((EC_T_PBYTE)p) + ATEMRAS_CONNECT_OEM_OFFS_OEM_KEY, qwOemKey);
} EC_INLINESTOP

/* --- emrascmd_emapicommand --- */
typedef enum _ATEMRAS_T_APICMDTYPE
{
    emrasapicmd_nop                         =   0x0000,

    emrasapicmd_emStart                     =   0x0003,
    emrasapicmd_emStop                      =   0x0004,
    emrasapicmd_emiocontrol                 =   0x0006,
    emrasapicmd_emGetSlaveId                =   0x0008,
    emrasapicmd_emGetSlaveIdAtPosition      =   0x0009,
    emrasapicmd_emGetSlaveProp              =   0x000A,
    emrasapicmd_emGetSlaveState             =   0x000B,
    emrasapicmd_emSetSlaveState             =   0x000C,
    emrasapicmd_emTferSingleRawCmd          =   0x000D,
    emrasapicmd_emQueueRawCmd               =   0x000E,
    emrasapicmd_emGetNumConfiguredSlaves    =   0x000F,
    
    emrasapicmd_emMbxTferCreate             =   0x0010,
    emrasapicmd_emMbxTferDelete             =   0x0011,
    emrasapicmd_emCoeSdoDownloadReq         =   0x0012,
    emrasapicmd_emCoeSdoUploadReq           =   0x0013,
    emrasapicmd_emCoeGetODList              =   0x0014,
    emrasapicmd_emCoeGetObjectDesc          =   0x0015,
    emrasapicmd_emCoeGetEntryDesc           =   0x0016,
    
    emrasapicmd_emConfigureMaster           =   0x0018,
    emrasapicmd_emSetMasterState            =   0x0019,
    
    emrasapicmd_emGetProcessData            =   0x0020,
    emrasapicmd_emSetProcessData            =   0x0021,
    emrasapicmd_emGetMasterState            =   0x0022,

    emrasapicmd_emFoeDownloadReq            =   0x0023,
    emrasapicmd_emFoeUploadReq              =   0x0024,

    emrasapicmd_emFoeDownload               =   0x0025,
    emrasapicmd_emFoeUpload                 =   0x0026,

    emrasapicmd_emCoeSdoDownload            =   0x0027,
    emrasapicmd_emCoeSdoUpload              =   0x0028,

    emrasapicmd_emGetNumConnectedSlaves     =   0x0029,
    emrasapicmd_emResetSlavecontroller      =   0x002A,

    emrasapicmd_emGetSlaveInfo              =   0x002B,
    emrasapicmd_emIsSlavePresent            =   0x002C,
    
    emrasapicmd_emGetSlaveInpVarInfoNumOf   =   0x002D,
    emrasapicmd_emGetSlaveOutpVarInfoNumOf  =   0x002E,

    emrasapicmd_emGetSlaveInpVarInfo        =   0x002F, 
    emrasapicmd_emGetFixedAddr              =   0x0030,
    emrasapicmd_emGetSlaveOutpVarInfo       =   0x0031, 
    emrasapicmd_emFindOutpVarByName         =   0x0032,
    emrasapicmd_emFindInpVarByName          =   0x0033,
    emrasapicmd_emGetProcessDataBits        =   0x0034,
    emrasapicmd_emSetProcessDataBits        =   0x0035,

    emrasapicmd_emReadSlaveEEPRom           =   0x0036,
    emrasapicmd_emWriteSlaveEEPRom          =   0x0037,
    emrasapicmd_emAssignSlaveEEPRom         =   0x0038,
    emrasapicmd_emReloadSlaveEEPRom         =   0x0039,
    emrasapicmd_emSoeRead                   =   0x0040,   
    emrasapicmd_emSoeWrite                  =   0x0041,   
    emrasapicmd_emSoeAbortProcCmd           =   0x0042,

    emrasapicmd_emAoeWrite                  =   0x0043,
    emrasapicmd_emAoeWriteReq               =   0x0044,
    emrasapicmd_emAoeRead                   =   0x0045,
    emrasapicmd_emAoeReadReq                =   0x0046,
    emrasapicmd_emAoeGetSlaveNetId          =   0x0047,

    emrasapicmd_emGetNumConnectedSlavesMain =   0x0048,
    emrasapicmd_emGetNumConnectedSlavesRed  =   0x0049,
    emrasapicmd_emNotifyApp                 =   0x0050,

    emrasapicmd_emAoeReadWriteReq           =   0x0051,
    emrasapicmd_emAoeReadWrite              =   0x0052,

    emrasapicmd_emGetSlaveInpVarInfoEx      =   0x0053, 
    emrasapicmd_emGetSlaveOutpVarInfoEx     =   0x0054, 
    emrasapicmd_emFindOutpVarByNameEx       =   0x0055,
    emrasapicmd_emFindInpVarByNameEx        =   0x0056,

    emrasapicmd_emGetCfgSlaveInfo           =   0x0057,
    emrasapicmd_emGetBusSlaveInfo           =   0x0058,

    emrasapicmd_emGetVersion                =   0x0059,
    emrasapicmd_emGetSrcMacAddress          =   0x005A,

    emrasapicmd_emEoeRegisterEp             =   0x005B,
    emrasapicmd_emEoeUnregisterEp           =   0x005C,
    emrasapicmd_emLinkOpen                  =   0x005D,
    emrasapicmd_emLinkClose                 =   0x005E,
    emrasapicmd_emLinkSendAndFreeFrame      =   0x005F,
    emrasapicmd_emLinkRecvFrame             =   0x0060,

	emrasapicmd_emForceProcessDataBits		=	0x0061,
	emrasapicmd_emReleaseProcessDataBits	=	0x0062,
	emrasapicmd_emReleaseAllProcessDataBits	=	0x0063,
    emrasapicmd_emReadSlaveIdentification   =   0x0064,
    emrasapicmd_emSetSlaveDisabled          =   0x0065,
    emrasapicmd_emSetSlaveDisconnected      =   0x0066,
    emrasapicmd_emRescueScan                =   0x0067,
    emrasapicmd_emGetMasterInfo             =   0x0068,
    emrasapicmd_emConfigExtend              =   0x0069,
/*
    emrasapicmd_emSetSlavesDisabled         =   0x006A,
    emrasapicmd_emSetSlavesDisconnected     =   0x006B,
*/
    emrasapicmd_emSetMbxProtocolsSerialize  =   0x006C,

    emrasapicmd_emAoeWriteControl           =   0x0070,

    /* See also EC-Master API and other branches! */

    /* Borland C++ datatype alignment correction */
    emrasapicmd_BCppDummy                   = 0xFFFFFFFF
} ATEMRAS_T_APICMDTYPE, *ATEMRAS_PT_APICMDTYPE;
const EC_T_CHAR* ATEMRAS_T_APICMDTYPE_TEXT( ATEMRAS_T_APICMDTYPE eVal );

/* --- emrasapicmd_emiocontrol --- */
typedef struct _ATEMRAS_T_IOCTLTRANSFER
{
    EC_T_DWORD   dwCommandCode;     /* Command Code */              /* 0x00 */
    EC_T_DWORD   dwInstanceID;      /* Master Instance */           /* 0x04 */
    EC_T_DWORD   dwCode;            /* IOCTL Code */                /* 0x08 */
    EC_T_DWORD   dwInBufOffset;     /* Offset of In Data Buffer */  /* 0x0C */
    EC_T_DWORD   dwInBufSize;       /* Size of In Buffer */         /* 0x10 */
    EC_T_DWORD   dwOutBufOffset;    /* Offset of Out Data Buffer */ /* 0x14 */
    EC_T_DWORD   dwOutBufSize;      /* Size of Out Buffer */        /* 0x18 */
    EC_T_DWORD   dwNumOutData;      /* used out data size */        /* 0x1C */
    EC_T_DWORD   dwSrvResult;       /* Result code from server */   /* 0x20 */
} EC_PACKED(1) ATEMRAS_T_IOCTLTRANSFER, *ATEMRAS_PT_IOCTLTRANSFER;

#define ATEMRAS_T_IOCTLTRANSFER_SIZE    sizeof(ATEMRAS_T_IOCTLTRANSFER)

#define ATEMRAS_IOCTL_OFFS_COMMANDCODE      ((EC_T_DWORD)0x00)
#define ATEMRAS_IOCTL_OFFS_INSTANCEID       ((EC_T_DWORD)0x04)
#define ATEMRAS_IOCTL_OFFS_IOCTLCODE        ((EC_T_DWORD)0x08)

#define ATEMRAS_IOCTL_OFFS_INBUFOFFSET      ((EC_T_DWORD)0x0C)
#define ATEMRAS_IOCTL_OFFS_INBUFSIZE        ((EC_T_DWORD)0x10)
#define ATEMRAS_IOCTL_OFFS_OUTBUFOFFSET     ((EC_T_DWORD)0x14)
#define ATEMRAS_IOCTL_OFFS_OUTBUFSIZE       ((EC_T_DWORD)0x18)
#define ATEMRAS_IOCTL_OFFS_NUMOUTDATA       ((EC_T_DWORD)0x1C)
#define ATEMRAS_IOCTL_OFFS_SRVRESULT        ((EC_T_DWORD)0x20)

#define ATEMRAS_IOCTL_OFFS_DATA             ((EC_T_DWORD)0x24)

static EC_INLINESTART EC_T_DWORD ATEMRAS_IOCTL_GET_COMMANDCODE(ATEMRAS_PT_IOCTLTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_IOCTL_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_IOCTL_SET_COMMANDCODE(ATEMRAS_PT_IOCTLTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_IOCTL_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_IOCTL_GET_INSTANCEID(ATEMRAS_PT_IOCTLTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_IOCTL_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_IOCTL_SET_INSTANCEID(ATEMRAS_PT_IOCTLTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_IOCTL_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_IOCTL_GET_IOCTLCODE(ATEMRAS_PT_IOCTLTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_IOCTL_OFFS_IOCTLCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_IOCTL_SET_IOCTLCODE(ATEMRAS_PT_IOCTLTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_IOCTL_OFFS_IOCTLCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_IOCTL_GET_INBUFOFFSET(ATEMRAS_PT_IOCTLTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_IOCTL_OFFS_INBUFOFFSET));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_IOCTL_SET_INBUFOFFSET(ATEMRAS_PT_IOCTLTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_IOCTL_OFFS_INBUFOFFSET), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_IOCTL_GET_INBUFSIZE(ATEMRAS_PT_IOCTLTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_IOCTL_OFFS_INBUFSIZE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_IOCTL_SET_INBUFSIZE(ATEMRAS_PT_IOCTLTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_IOCTL_OFFS_INBUFSIZE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_IOCTL_GET_OUTBUFOFFSET(ATEMRAS_PT_IOCTLTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_IOCTL_OFFS_OUTBUFOFFSET));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_IOCTL_SET_OUTBUFOFFSET(ATEMRAS_PT_IOCTLTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_IOCTL_OFFS_OUTBUFOFFSET), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_IOCTL_GET_OUTBUFSIZE(ATEMRAS_PT_IOCTLTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_IOCTL_OFFS_OUTBUFSIZE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_IOCTL_SET_OUTBUFSIZE(ATEMRAS_PT_IOCTLTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_IOCTL_OFFS_OUTBUFSIZE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_IOCTL_GET_NUMOUTDATA(ATEMRAS_PT_IOCTLTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_IOCTL_OFFS_NUMOUTDATA));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_IOCTL_SET_NUMOUTDATA(ATEMRAS_PT_IOCTLTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_IOCTL_OFFS_NUMOUTDATA), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_IOCTL_GET_SRVRESULT(ATEMRAS_PT_IOCTLTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_IOCTL_OFFS_SRVRESULT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_IOCTL_SET_SRVRESULT(ATEMRAS_PT_IOCTLTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_IOCTL_OFFS_SRVRESULT), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_PBYTE ATEMRAS_IOCTL_DATA(ATEMRAS_PT_IOCTLTRANSFER p)
{
    return ((EC_T_PBYTE)(((EC_T_PBYTE)p)+ATEMRAS_IOCTL_OFFS_DATA));
} EC_INLINESTOP

typedef struct _ATEMRAS_T_REGISTERRESULTSTRANSFER
{
    EC_T_DWORD      dwClntId;                       /*< [out] Client ID */
    EC_T_DWORD      dwPDInRes;                      /*< [out] Reserved (Place holder for pointer to process data input memory) */
    EC_T_DWORD      dwPDInSize;                     /*< [out] Size of process data input memory (in bits) */
    EC_T_DWORD      dwPDOutRes;                     /*< [out] Reserved (Place holder for pointer to process data output memory) */
    EC_T_DWORD      dwPDOutSize;                    /*< [out] Size of process data output memory (in bits) */
} EC_PACKED(1) ATEMRAS_T_REGISTERRESULTSTRANSFER;

typedef struct _ATEMRAS_T_EMCONFIGUREMASTERTRANSFER
{
    EC_T_DWORD   dwCommandCode;     /* Command Code */              /* 0x00 */
    EC_T_DWORD   dwInstanceID;      /* Master Instance */           /* 0x04 */
    
    EC_T_DWORD   dwConfigType;      /* Configuration Type */        /* 0x08 */
    EC_T_DWORD   dwCnfDataOffset;   /* Configuration Data offset */ /* 0x0C */
    EC_T_DWORD   dwCnfDataLen;      /* Configuration Data Length */ /* 0x10 */

    EC_T_DWORD   dwSrvResult;       /* Result code from server */   /* 0x14 */
} EC_PACKED(1) ATEMRAS_T_EMCONFIGUREMASTERTRANSFER, *ATEMRAS_PT_EMCONFIGUREMASTERTRANSFER;

#define ATEMRAS_T_EMCONFIGUREMASTERTRANSFER_SIZE    sizeof(ATEMRAS_T_EMCONFIGUREMASTERTRANSFER)

#define ATEMRAS_EMCONFIGUREMASTER_OFFS_COMMANDCODE      ((EC_T_DWORD)0x00)
#define ATEMRAS_EMCONFIGUREMASTER_OFFS_INSTANCEID       ((EC_T_DWORD)0x04)
#define ATEMRAS_EMCONFIGUREMASTER_OFFS_CNFTYPE          ((EC_T_DWORD)0x08)
#define ATEMRAS_EMCONFIGUREMASTER_OFFS_CNFDATAOFFS      ((EC_T_DWORD)0x0C)
#define ATEMRAS_EMCONFIGUREMASTER_OFFS_CNFDATASIZE      ((EC_T_DWORD)0x10)
#define ATEMRAS_EMCONFIGUREMASTER_OFFS_SRVRESULT        ((EC_T_DWORD)0x14)
#define ATEMRAS_EMCONFIGUREMASTER_OFFS_DATA             ((EC_T_DWORD)0x18)

static EC_INLINESTART EC_T_DWORD ATEMRAS_EMCONFIGUREMASTER_GET_COMMANDCODE(ATEMRAS_PT_EMCONFIGUREMASTERTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMCONFIGUREMASTER_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMCONFIGUREMASTER_SET_COMMANDCODE(ATEMRAS_PT_EMCONFIGUREMASTERTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMCONFIGUREMASTER_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_EMCONFIGUREMASTER_GET_INSTANCEID(ATEMRAS_PT_EMCONFIGUREMASTERTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMCONFIGUREMASTER_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMCONFIGUREMASTER_SET_INSTANCEID(ATEMRAS_PT_EMCONFIGUREMASTERTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMCONFIGUREMASTER_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_EMCONFIGUREMASTER_GET_CONFIGTYPE(ATEMRAS_PT_EMCONFIGUREMASTERTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMCONFIGUREMASTER_OFFS_CNFTYPE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMCONFIGUREMASTER_SET_CONFIGTYPE(ATEMRAS_PT_EMCONFIGUREMASTERTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMCONFIGUREMASTER_OFFS_CNFTYPE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_EMCONFIGUREMASTER_GET_CNFDATAOFFSET(ATEMRAS_PT_EMCONFIGUREMASTERTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMCONFIGUREMASTER_OFFS_CNFDATAOFFS));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMCONFIGUREMASTER_SET_CNFDATAOFFSET(ATEMRAS_PT_EMCONFIGUREMASTERTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMCONFIGUREMASTER_OFFS_CNFDATAOFFS), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_EMCONFIGUREMASTER_GET_CNFDATASIZE(ATEMRAS_PT_EMCONFIGUREMASTERTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMCONFIGUREMASTER_OFFS_CNFDATASIZE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMCONFIGUREMASTER_SET_CNFDATASIZE(ATEMRAS_PT_EMCONFIGUREMASTERTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMCONFIGUREMASTER_OFFS_CNFDATASIZE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_EMCONFIGUREMASTER_GET_SRVRESULT(ATEMRAS_PT_EMCONFIGUREMASTERTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMCONFIGUREMASTER_OFFS_SRVRESULT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMCONFIGUREMASTER_SET_SRVRESULT(ATEMRAS_PT_EMCONFIGUREMASTERTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMCONFIGUREMASTER_OFFS_SRVRESULT), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_PBYTE ATEMRAS_EMCONFIGUREMASTER_DATA(ATEMRAS_PT_EMCONFIGUREMASTERTRANSFER p)
{
    return ((EC_T_PBYTE)(((EC_T_PBYTE)p)+ATEMRAS_EMCONFIGUREMASTER_OFFS_DATA));
} EC_INLINESTOP

typedef struct _ATEMRAS_T_EMSTARTTRANSFER
{
    EC_T_DWORD   dwCommandCode;     /* Command Code */              /* 0x00 */
    EC_T_DWORD   dwInstanceID;      /* Master Instance */           /* 0x04 */
    
    EC_T_DWORD   dwTimeout;         /* Startup Timeout */           /* 0x08 */
    
    EC_T_DWORD   dwSrvResult;       /* Result code from server */   /* 0x0C */
} EC_PACKED(1) ATEMRAS_T_EMSTARTTRANSFER, *ATEMRAS_PT_EMSTARTTRANSFER;

#define ATEMRAS_T_EMSTARTTRANSFER_SIZE    sizeof(ATEMRAS_T_EMSTARTTRANSFER)

#define ATEMRAS_EMSTARTTRANSFER_OFFS_COMMANDCODE        ((EC_T_DWORD)0x00)
#define ATEMRAS_EMSTARTTRANSFER_OFFS_INSTANCEID         ((EC_T_DWORD)0x04)
#define ATEMRAS_EMSTARTTRANSFER_OFFS_TIMEOUT            ((EC_T_DWORD)0x08)
#define ATEMRAS_EMSTARTTRANSFER_OFFS_SRVRESULT          ((EC_T_DWORD)0x0C)

static EC_INLINESTART EC_T_DWORD ATEMRAS_EMSTARTTRANSFER_GET_COMMANDCODE(ATEMRAS_PT_EMSTARTTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMSTARTTRANSFER_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMSTARTTRANSFER_SET_COMMANDCODE(ATEMRAS_PT_EMSTARTTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMSTARTTRANSFER_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_EMSTARTTRANSFER_GET_INSTANCEID(ATEMRAS_PT_EMSTARTTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMSTARTTRANSFER_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMSTARTTRANSFER_SET_INSTANCEID(ATEMRAS_PT_EMSTARTTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMSTARTTRANSFER_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_EMSTARTTRANSFER_GET_TIMEOUT(ATEMRAS_PT_EMSTARTTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMSTARTTRANSFER_OFFS_TIMEOUT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMSTARTTRANSFER_SET_TIMEOUT(ATEMRAS_PT_EMSTARTTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMSTARTTRANSFER_OFFS_TIMEOUT), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_EMSTARTTRANSFER_GET_SRVRESULT(ATEMRAS_PT_EMSTARTTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMSTARTTRANSFER_OFFS_SRVRESULT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMSTARTTRANSFER_SET_SRVRESULT(ATEMRAS_PT_EMSTARTTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMSTARTTRANSFER_OFFS_SRVRESULT), dwVal);
} EC_INLINESTOP

typedef struct _ATEMRAS_T_EMSETMASTERSTATETRANSFER
{
    EC_T_DWORD   dwCommandCode;     /* Command Code */              /* 0x00 */
    EC_T_DWORD   dwInstanceID;      /* Master Instance */           /* 0x04 */
    
    EC_T_DWORD   dwTimeout;         /* Startup Timeout */           /* 0x08 */
    EC_T_DWORD   dwReqState;        /* Requested State */           /* 0x0C */
    
    EC_T_DWORD   dwSrvResult;       /* Result code from server */   /* 0x10 */
} EC_PACKED(1) ATEMRAS_T_EMSETMASTERSTATETRANSFER, *ATEMRAS_PT_EMSETMASTERSTATETRANSFER;

#define ATEMRAS_T_EMSETMASTERSTATETRANSFER_SIZE    sizeof(ATEMRAS_T_EMSETMASTERSTATETRANSFER)

#define ATEMRAS_EMSETMASTERSTATETRANSFER_OFFS_COMMANDCODE        ((EC_T_DWORD)0x00)
#define ATEMRAS_EMSETMASTERSTATETRANSFER_OFFS_INSTANCEID         ((EC_T_DWORD)0x04)
#define ATEMRAS_EMSETMASTERSTATETRANSFER_OFFS_TIMEOUT            ((EC_T_DWORD)0x08)
#define ATEMRAS_EMSETMASTERSTATETRANSFER_OFFS_REQSTATE           ((EC_T_DWORD)0x0C)
#define ATEMRAS_EMSETMASTERSTATETRANSFER_OFFS_SRVRESULT          ((EC_T_DWORD)0x10)

static EC_INLINESTART EC_T_DWORD ATEMRAS_EMSETMASTERSTATETRANSFER_GET_COMMANDCODE(ATEMRAS_PT_EMSETMASTERSTATETRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMSETMASTERSTATETRANSFER_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMSETMASTERSTATETRANSFER_SET_COMMANDCODE(ATEMRAS_PT_EMSETMASTERSTATETRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMSETMASTERSTATETRANSFER_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_EMSETMASTERSTATETRANSFER_GET_INSTANCEID(ATEMRAS_PT_EMSETMASTERSTATETRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMSETMASTERSTATETRANSFER_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMSETMASTERSTATETRANSFER_SET_INSTANCEID(ATEMRAS_PT_EMSETMASTERSTATETRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMSETMASTERSTATETRANSFER_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_EMSETMASTERSTATETRANSFER_GET_TIMEOUT(ATEMRAS_PT_EMSETMASTERSTATETRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMSETMASTERSTATETRANSFER_OFFS_TIMEOUT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMSETMASTERSTATETRANSFER_SET_TIMEOUT(ATEMRAS_PT_EMSETMASTERSTATETRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMSETMASTERSTATETRANSFER_OFFS_TIMEOUT), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_EMSETMASTERSTATETRANSFER_GET_REQSTATE(ATEMRAS_PT_EMSETMASTERSTATETRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMSETMASTERSTATETRANSFER_OFFS_REQSTATE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMSETMASTERSTATETRANSFER_SET_REQSTATE(ATEMRAS_PT_EMSETMASTERSTATETRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMSETMASTERSTATETRANSFER_OFFS_REQSTATE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_EMSETMASTERSTATETRANSFER_GET_SRVRESULT(ATEMRAS_PT_EMSETMASTERSTATETRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMSETMASTERSTATETRANSFER_OFFS_SRVRESULT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMSETMASTERSTATETRANSFER_SET_SRVRESULT(ATEMRAS_PT_EMSETMASTERSTATETRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMSETMASTERSTATETRANSFER_OFFS_SRVRESULT), dwVal);
} EC_INLINESTOP

typedef struct _ATEMRAS_T_EMGETMASTERSTATETRANSFER
{
    EC_T_DWORD   dwCommandCode;     /* Command Code */              /* 0x00 */
    EC_T_DWORD   dwInstanceID;      /* Master Instance */           /* 0x04 */
    
    EC_T_WORD    wCurState;         /* Current Master State */      /* 0x08 */
} EC_PACKED(1) ATEMRAS_T_EMGETMASTERSTATETRANSFER, *ATEMRAS_PT_EMGETMASTERSTATETRANSFER;

#define ATEMRAS_T_EMGETMASTERSTATETRANSFER_SIZE    sizeof(ATEMRAS_T_EMGETMASTERSTATETRANSFER)

#define ATEMRAS_EMGETMASTERSTATETRANSFER_OFFS_COMMANDCODE        ((EC_T_DWORD)0x00)
#define ATEMRAS_EMGETMASTERSTATETRANSFER_OFFS_INSTANCEID         ((EC_T_DWORD)0x04)
#define ATEMRAS_EMGETMASTERSTATETRANSFER_OFFS_STATE              ((EC_T_DWORD)0x08)

static EC_INLINESTART EC_T_DWORD ATEMRAS_EMGETMASTERSTATETRANSFER_GET_COMMANDCODE(ATEMRAS_PT_EMGETMASTERSTATETRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETMASTERSTATETRANSFER_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMGETMASTERSTATETRANSFER_SET_COMMANDCODE(ATEMRAS_PT_EMGETMASTERSTATETRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETMASTERSTATETRANSFER_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_EMGETMASTERSTATETRANSFER_GET_INSTANCEID(ATEMRAS_PT_EMGETMASTERSTATETRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETMASTERSTATETRANSFER_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMGETMASTERSTATETRANSFER_SET_INSTANCEID(ATEMRAS_PT_EMGETMASTERSTATETRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETMASTERSTATETRANSFER_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_WORD ATEMRAS_EMGETMASTERSTATETRANSFER_GET_STATE(ATEMRAS_PT_EMGETMASTERSTATETRANSFER p)
{
    return EC_GET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETMASTERSTATETRANSFER_OFFS_STATE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMGETMASTERSTATETRANSFER_SET_STATE(ATEMRAS_PT_EMGETMASTERSTATETRANSFER p, EC_T_WORD wVal)
{
    EC_SET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETMASTERSTATETRANSFER_OFFS_STATE), wVal);
} EC_INLINESTOP

typedef struct _ATEMRAS_T_EMSTOPTRANSFER
{
    EC_T_DWORD   dwCommandCode;     /* Command Code */              /* 0x00 */
    EC_T_DWORD   dwInstanceID;      /* Master Instance */           /* 0x04 */
    
    EC_T_DWORD   dwTimeout;         /* Stop Timeout */              /* 0x08 */
    
    EC_T_DWORD   dwSrvResult;       /* Result code from server */   /* 0x0C */
} EC_PACKED(1) ATEMRAS_T_EMSTOPTRANSFER, *ATEMRAS_PT_EMSTOPTRANSFER;

#define ATEMRAS_T_EMSTOPTRANSFER_SIZE   sizeof(ATEMRAS_T_EMSTOPTRANSFER)

#define ATEMRAS_EMSTOPTRANSFER_OFFS_COMMANDCODE         ((EC_T_DWORD)0x00)
#define ATEMRAS_EMSTOPTRANSFER_OFFS_INSTANCEID          ((EC_T_DWORD)0x04)
#define ATEMRAS_EMSTOPTRANSFER_OFFS_TIMEOUT             ((EC_T_DWORD)0x08)
#define ATEMRAS_EMSTOPTRANSFER_OFFS_SRVRESULT           ((EC_T_DWORD)0x0C)

static EC_INLINESTART EC_T_DWORD ATEMRAS_EMSTOPTRANSFER_GET_COMMANDCODE(ATEMRAS_PT_EMSTOPTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMSTOPTRANSFER_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMSTOPTRANSFER_SET_COMMANDCODE(ATEMRAS_PT_EMSTOPTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMSTOPTRANSFER_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_EMSTOPTRANSFER_GET_INSTANCEID(ATEMRAS_PT_EMSTOPTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMSTOPTRANSFER_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMSTOPTRANSFER_SET_INSTANCEID(ATEMRAS_PT_EMSTOPTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMSTOPTRANSFER_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_EMSTOPTRANSFER_GET_TIMEOUT(ATEMRAS_PT_EMSTOPTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMSTOPTRANSFER_OFFS_TIMEOUT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMSTOPTRANSFER_SET_TIMEOUT(ATEMRAS_PT_EMSTOPTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMSTOPTRANSFER_OFFS_TIMEOUT), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_EMSTOPTRANSFER_GET_SRVRESULT(ATEMRAS_PT_EMSTOPTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMSTOPTRANSFER_OFFS_SRVRESULT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMSTOPTRANSFER_SET_SRVRESULT(ATEMRAS_PT_EMSTOPTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMSTOPTRANSFER_OFFS_SRVRESULT), dwVal);
} EC_INLINESTOP

typedef struct _ATEMRAS_T_EMGETNUMCNFGSLVTRANSFER
{
    EC_T_DWORD   dwCommandCode;     /* Command Code */              /* 0x00 */
    EC_T_DWORD   dwInstanceID;      /* Master Instance */           /* 0x04 */
    
    EC_T_DWORD   dwNumSlaves;       /* Amount of configured slaves*//* 0x08 */
} EC_PACKED(1) ATEMRAS_T_EMGETNUMCNFGSLVTRANSFER, *ATEMRAS_PT_EMGETNUMCNFGSLVTRANSFER;

#define ATEMRAS_T_EMGETNUMCNFGSLVTRANSFER_SIZE  sizeof(ATEMRAS_T_EMGETNUMCNFGSLVTRANSFER)

#define ATEMRAS_EMGETNUMCNFGSLVTRANSFER_OFFS_COMMANDCODE        ((EC_T_DWORD)0x00)
#define ATEMRAS_EMGETNUMCNFGSLVTRANSFER_OFFS_INSTANCEID         ((EC_T_DWORD)0x04)
#define ATEMRAS_EMGETNUMCNFGSLVTRANSFER_OFFS_NUMSLAVES          ((EC_T_DWORD)0x08)

static EC_INLINESTART EC_T_DWORD ATEMRAS_EMGETNUMCNFGSLVTRANSFER_GET_COMMANDCODE(ATEMRAS_PT_EMGETNUMCNFGSLVTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETNUMCNFGSLVTRANSFER_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMGETNUMCNFGSLVTRANSFER_SET_COMMANDCODE(ATEMRAS_PT_EMGETNUMCNFGSLVTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETNUMCNFGSLVTRANSFER_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_EMGETNUMCNFGSLVTRANSFER_GET_INSTANCEID(ATEMRAS_PT_EMGETNUMCNFGSLVTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETNUMCNFGSLVTRANSFER_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMGETNUMCNFGSLVTRANSFER_SET_INSTANCEID(ATEMRAS_PT_EMGETNUMCNFGSLVTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETNUMCNFGSLVTRANSFER_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_EMGETNUMCNFGSLVTRANSFER_GET_NUMSLV(ATEMRAS_PT_EMGETNUMCNFGSLVTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETNUMCNFGSLVTRANSFER_OFFS_NUMSLAVES));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMGETNUMCNFGSLVTRANSFER_SET_NUMSLV(ATEMRAS_PT_EMGETNUMCNFGSLVTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETNUMCNFGSLVTRANSFER_OFFS_NUMSLAVES), dwVal);
} EC_INLINESTOP

typedef struct _ATEMRAS_T_SLVIDATPTRANSFER
{
    EC_T_DWORD   dwCommandCode;     /* Command Code */              /* 0x00 */
    EC_T_DWORD   dwInstanceID;      /* Master Instance */           /* 0x04 */
    
    EC_T_DWORD   dwAutoIncAddr;     /* Auto Increment Addr (16bit)*//* 0x08 */
    
    EC_T_DWORD   dwSlaveId;         /* Slave Id from server */      /* 0x0C */
} EC_PACKED(1) ATEMRAS_T_SLVIDATPTRANSFER, *ATEMRAS_PT_SLVIDATPTRANSFER;

#define ATEMRAS_T_SLVIDATPTRANSFER_SIZE   sizeof(ATEMRAS_T_SLVIDATPTRANSFER)

#define ATEMRAS_SLVIDATPTRANSFER_OFFS_COMMANDCODE       ((EC_T_DWORD)0x00)
#define ATEMRAS_SLVIDATPTRANSFER_OFFS_INSTANCEID        ((EC_T_DWORD)0x04)
#define ATEMRAS_SLVIDATPTRANSFER_OFFS_AINCADDR          ((EC_T_DWORD)0x08)
#define ATEMRAS_SLVIDATPTRANSFER_OFFS_SLVID             ((EC_T_DWORD)0x0C)

static EC_INLINESTART EC_T_DWORD ATEMRAS_SLVIDATPTRANSFER_GET_COMMANDCODE(ATEMRAS_PT_SLVIDATPTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLVIDATPTRANSFER_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SLVIDATPTRANSFER_SET_COMMANDCODE(ATEMRAS_PT_SLVIDATPTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLVIDATPTRANSFER_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_SLVIDATPTRANSFER_GET_INSTANCEID(ATEMRAS_PT_SLVIDATPTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLVIDATPTRANSFER_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SLVIDATPTRANSFER_SET_INSTANCEID(ATEMRAS_PT_SLVIDATPTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLVIDATPTRANSFER_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_SLVIDATPTRANSFER_GET_AINCADDR(ATEMRAS_PT_SLVIDATPTRANSFER p)
{
    return (EC_T_DWORD)(EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLVIDATPTRANSFER_OFFS_AINCADDR))& 0xFFFF);
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SLVIDATPTRANSFER_SET_AINCADDR(ATEMRAS_PT_SLVIDATPTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLVIDATPTRANSFER_OFFS_AINCADDR), (dwVal&0xffff));
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_SLVIDATPTRANSFER_GET_SLVID(ATEMRAS_PT_SLVIDATPTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLVIDATPTRANSFER_OFFS_SLVID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SLVIDATPTRANSFER_SET_SLVID(ATEMRAS_PT_SLVIDATPTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLVIDATPTRANSFER_OFFS_SLVID), dwVal);
} EC_INLINESTOP

typedef struct _ATEMRAS_T_SLVIDTRANSFER
{
    EC_T_DWORD   dwCommandCode;     /* Command Code */              /* 0x00 */
    EC_T_DWORD   dwInstanceID;      /* Master Instance */           /* 0x04 */
    
    EC_T_DWORD   dwStationAddr;     /* Station Addr (16bit)*/       /* 0x08 */
    
    EC_T_DWORD   dwSlaveId;         /* Slave Id from server */      /* 0x0C */
} EC_PACKED(1) ATEMRAS_T_SLVIDTRANSFER, *ATEMRAS_PT_SLVIDTRANSFER;

#define ATEMRAS_T_SLVIDTRANSFER_SIZE    sizeof(ATEMRAS_T_SLVIDTRANSFER)

#define ATEMRAS_SLVIDTRANSFER_OFFS_COMMANDCODE          ((EC_T_DWORD)0x00)
#define ATEMRAS_SLVIDTRANSFER_OFFS_INSTANCEID           ((EC_T_DWORD)0x04)
#define ATEMRAS_SLVIDTRANSFER_OFFS_STATADDR             ((EC_T_DWORD)0x08)
#define ATEMRAS_SLVIDTRANSFER_OFFS_SLVID                ((EC_T_DWORD)0x0C)

static EC_INLINESTART EC_T_DWORD ATEMRAS_SLVIDTRANSFER_GET_COMMANDCODE(ATEMRAS_PT_SLVIDTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLVIDTRANSFER_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SLVIDTRANSFER_SET_COMMANDCODE(ATEMRAS_PT_SLVIDTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLVIDTRANSFER_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_SLVIDTRANSFER_GET_INSTANCEID(ATEMRAS_PT_SLVIDTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLVIDTRANSFER_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SLVIDTRANSFER_SET_INSTANCEID(ATEMRAS_PT_SLVIDTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLVIDTRANSFER_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_SLVIDTRANSFER_GET_STATADDR(ATEMRAS_PT_SLVIDTRANSFER p)
{
    return (EC_T_DWORD)(EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLVIDTRANSFER_OFFS_STATADDR))& 0xffff);
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SLVIDTRANSFER_SET_STATADDR(ATEMRAS_PT_SLVIDTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLVIDTRANSFER_OFFS_STATADDR), (dwVal&0xffff));
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_SLVIDTRANSFER_GET_SLVID(ATEMRAS_PT_SLVIDTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLVIDTRANSFER_OFFS_SLVID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SLVIDTRANSFER_SET_SLVID(ATEMRAS_PT_SLVIDTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLVIDTRANSFER_OFFS_SLVID), dwVal);
} EC_INLINESTOP



typedef struct _ATEMRAS_T_SLVFIXEDADDRTRANSFER
{
    EC_T_DWORD   dwCommandCode;     /* Command Code */              /* 0x00 */
    EC_T_DWORD   dwInstanceID;      /* Master Instance */           /* 0x04 */
    EC_T_DWORD   dwSlaveId;         /* Station Addr (16bit)*/       /* 0x08 */
    EC_T_WORD    wFixedAddr;        /* Slave fixed addr     */      /* 0x0C */
    EC_T_WORD    wRsvd;             /* Reserved     */              /* 0x0E */
    EC_T_DWORD   dwRetVal;          /* Return value     */          /* 0x10 */
} EC_PACKED(1) ATEMRAS_T_SLVFIXEDADDRTRANSFER, *ATEMRAS_PT_SLVFIXEDADDRTRANSFER;

#define ATEMRAS_T_SLVFIXEDADDR_SIZE    sizeof(ATEMRAS_T_SLVFIXEDADDRTRANSFER)

#define ATEMRAS_SLVFIXEDADDRTRANSFER_OFFS_COMMANDCODE          ((EC_T_DWORD)0x00)
#define ATEMRAS_SLVFIXEDADDRTRANSFER_OFFS_INSTANCEID           ((EC_T_DWORD)0x04)
#define ATEMRAS_SLVFIXEDADDRTRANSFER_OFFS_SLVID                ((EC_T_DWORD)0x08)
#define ATEMRAS_SLVFIXEDADDRTRANSFER_OFFS_FIXEDADDR            ((EC_T_DWORD)0x0C)
#define ATEMRAS_SLVFIXEDADDRTRANSFER_OFFS_RESULTCODE           ((EC_T_DWORD)0x10)

static EC_INLINESTART EC_T_DWORD ATEMRAS_SLVFIXEDADDRTRANSFER_GET_COMMANDCODE(ATEMRAS_PT_SLVFIXEDADDRTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLVFIXEDADDRTRANSFER_OFFS_COMMANDCODE));
} EC_INLINESTOP

static EC_INLINESTART EC_T_VOID ATEMRAS_SLVFIXEDADDRTRANSFER_SET_COMMANDCODE(ATEMRAS_PT_SLVFIXEDADDRTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLVFIXEDADDRTRANSFER_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_DWORD ATEMRAS_SLVFIXEDADDRTRANSFER_GET_INSTANCEID(ATEMRAS_PT_SLVFIXEDADDRTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLVFIXEDADDRTRANSFER_OFFS_INSTANCEID));
} EC_INLINESTOP

static EC_INLINESTART EC_T_VOID ATEMRAS_SLVFIXEDADDRTRANSFER_SET_INSTANCEID(ATEMRAS_PT_SLVFIXEDADDRTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLVFIXEDADDRTRANSFER_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_DWORD ATEMRAS_SLVFIXEDADDRTRANSFER_GET_SLVID(ATEMRAS_PT_SLVFIXEDADDRTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLVFIXEDADDRTRANSFER_OFFS_SLVID));
} EC_INLINESTOP

static EC_INLINESTART EC_T_VOID ATEMRAS_SLVFIXEDADDRTRANSFER_SET_SLVID(ATEMRAS_PT_SLVFIXEDADDRTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLVFIXEDADDRTRANSFER_OFFS_SLVID), dwVal);
} EC_INLINESTOP


static EC_INLINESTART EC_T_WORD ATEMRAS_SLVFIXEDADDRTRANSFER_GET_FIXEDADDR(ATEMRAS_PT_SLVFIXEDADDRTRANSFER p)
{
    return EC_GET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_SLVFIXEDADDRTRANSFER_OFFS_FIXEDADDR));
} EC_INLINESTOP

static EC_INLINESTART EC_T_VOID ATEMRAS_SLVFIXEDADDRTRANSFER_SET_FIXEDADDR(ATEMRAS_PT_SLVFIXEDADDRTRANSFER p, EC_T_WORD dwVal)
{
    EC_SET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_SLVFIXEDADDRTRANSFER_OFFS_FIXEDADDR), dwVal);
} EC_INLINESTOP


static EC_INLINESTART EC_T_DWORD ATEMRAS_SLVFIXEDADDRTRANSFER_GET_RESULTCODE(ATEMRAS_PT_SLVFIXEDADDRTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLVFIXEDADDRTRANSFER_OFFS_RESULTCODE));
} EC_INLINESTOP

static EC_INLINESTART EC_T_VOID ATEMRAS_SLVFIXEDADDRTRANSFER_SET_RESULTCODE(ATEMRAS_PT_SLVFIXEDADDRTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLVFIXEDADDRTRANSFER_OFFS_RESULTCODE), dwVal);
} EC_INLINESTOP










typedef struct _ATEMRAS_T_SLVPROPTRANSFER
{
    EC_T_DWORD          dwCommandCode;              /* Command Code */              /* 0x00 */
    EC_T_DWORD          dwInstanceID;               /* Master Instance */           /* 0x04 */
                                                    
    EC_T_DWORD          dwSlaveId;                  /* Slave Id*/                   /* 0x08 */
                                                    
    union _t_uAddr                                  
    {                                               
        EC_T_DWORD      dwAddr;                     /* Address */                   /* 0x0C */
        struct _t_sAddr                             
        {                                           
            EC_T_WORD   wStationAddr;               /* Stat. Addr. */               /* 0x0C */
            EC_T_WORD   wAutoIncAddr;               /* AInc. Addr. */               /* 0x0E */
        } EC_PACKED(1)     sAddr;
    } EC_PACKED(1)         uAddr;
    EC_T_DWORD          dwResultCode;               /* Result code from server */   /* 0x10 */
    EC_T_CHAR           achName[MAX_STD_STRLEN];    /* Device Name */               /* 0x14 */
} EC_PACKED(1) ATEMRAS_T_SLVPROPTRANSFER, *ATEMRAS_PT_SLVPROPTRANSFER;

#define ATEMRAS_T_SLVPROPTRANSFER_SIZE      sizeof(ATEMRAS_T_SLVPROPTRANSFER)

#define ATEMRAS_SLVPROPTRANSFER_OFFS_COMMANDCODE          ((EC_T_DWORD)0x00)
#define ATEMRAS_SLVPROPTRANSFER_OFFS_INSTANCEID           ((EC_T_DWORD)0x04)
#define ATEMRAS_SLVPROPTRANSFER_OFFS_SLAVEID              ((EC_T_DWORD)0x08)
#define ATEMRAS_SLVPROPTRANSFER_OFFS_ADDR                 ((EC_T_DWORD)0x0C)
#define ATEMRAS_SLVPROPTRANSFER_OFFS_STATADDR             ((EC_T_DWORD)0x0C)
#define ATEMRAS_SLVPROPTRANSFER_OFFS_AINCADDR             ((EC_T_DWORD)0x0E)
#define ATEMRAS_SLVPROPTRANSFER_OFFS_SRVRESULT            ((EC_T_DWORD)0x10)
#define ATEMRAS_SLVPROPTRANSFER_OFFS_NAMEOFFSET           ((EC_T_DWORD)0x14)

static EC_INLINESTART EC_T_DWORD ATEMRAS_SLVPROPTRANSFER_GET_COMMANDCODE(ATEMRAS_PT_SLVPROPTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLVPROPTRANSFER_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SLVPROPTRANSFER_SET_COMMANDCODE(ATEMRAS_PT_SLVPROPTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLVPROPTRANSFER_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_SLVPROPTRANSFER_GET_INSTANCEID(ATEMRAS_PT_SLVPROPTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLVPROPTRANSFER_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SLVPROPTRANSFER_SET_INSTANCEID(ATEMRAS_PT_SLVPROPTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLVPROPTRANSFER_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_SLVPROPTRANSFER_GET_SLAVEID(ATEMRAS_PT_SLVPROPTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLVPROPTRANSFER_OFFS_SLAVEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SLVPROPTRANSFER_SET_SLAVEID(ATEMRAS_PT_SLVPROPTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLVPROPTRANSFER_OFFS_SLAVEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_SLVPROPTRANSFER_GET_ADDR(ATEMRAS_PT_SLVPROPTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLVPROPTRANSFER_OFFS_ADDR));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SLVPROPTRANSFER_SET_ADDR(ATEMRAS_PT_SLVPROPTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLVPROPTRANSFER_OFFS_ADDR), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_WORD ATEMRAS_SLVPROPTRANSFER_GET_STATADDR(ATEMRAS_PT_SLVPROPTRANSFER p)
{
    return EC_GET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_SLVPROPTRANSFER_OFFS_STATADDR));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SLVPROPTRANSFER_SET_STATADDR(ATEMRAS_PT_SLVPROPTRANSFER p, EC_T_WORD wVal)
{
    EC_SET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_SLVPROPTRANSFER_OFFS_STATADDR), wVal );
} EC_INLINESTOP
static EC_INLINESTART EC_T_WORD ATEMRAS_SLVPROPTRANSFER_GET_AINCADDR(ATEMRAS_PT_SLVPROPTRANSFER p)
{
    return EC_GET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_SLVPROPTRANSFER_OFFS_AINCADDR));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SLVPROPTRANSFER_SET_AINCADDR(ATEMRAS_PT_SLVPROPTRANSFER p, EC_T_WORD wVal)
{
    EC_SET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_SLVPROPTRANSFER_OFFS_AINCADDR), wVal );
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_SLVPROPTRANSFER_GET_SRVRESULT(ATEMRAS_PT_SLVPROPTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLVPROPTRANSFER_OFFS_SRVRESULT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SLVPROPTRANSFER_SET_SRVRESULT(ATEMRAS_PT_SLVPROPTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLVPROPTRANSFER_OFFS_SRVRESULT), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_CHAR* ATEMRAS_SLVPROPTRANSFER_NAME(ATEMRAS_PT_SLVPROPTRANSFER p)
{
    return ((EC_T_CHAR*)(((EC_T_PBYTE)p)+ATEMRAS_SLVPROPTRANSFER_OFFS_NAMEOFFSET));
} EC_INLINESTOP

typedef struct _ATEMRAS_T_GETSLVSTATETRANSFER
{
    EC_T_DWORD          dwCommandCode;      /* Command Code */              /* 0x00 */
    EC_T_DWORD          dwInstanceID;       /* Master Instance */           /* 0x04 */
    
    EC_T_DWORD          dwSlaveId;          /* Slave Id */                  /* 0x08 */
    
    union _t_uDevState
    {
        EC_T_DWORD      dwDevState;         /* Device State */              /* 0x0C */
        struct _t_sDevState
        {
            EC_T_WORD   wCurrDevState;      /* Current Dev. State */        /* 0x0C */
            EC_T_WORD   wReqDevState;       /* Requested Dev. State */      /* 0x0E */
        } EC_PACKED(1)     sDevState;
    } EC_PACKED(1)         uDevState;
    EC_T_DWORD          dwTimeout;          /* Timeout ? */                 /* 0x10 */
    EC_T_DWORD          dwSrvResult;        /* Result code from server */   /* 0x14 */
} EC_PACKED(1) ATEMRAS_T_GETSLVSTATETRANSFER, *ATEMRAS_PT_GETSLVSTATETRANSFER;

#define ATEMRAS_T_GETSLVSTATETRANSFER_SIZE      sizeof(ATEMRAS_T_GETSLVSTATETRANSFER)

#define ATEMRAS_GETSLVSTATETRANSFER_OFFS_COMMANDCODE            ((EC_T_DWORD)0x00)
#define ATEMRAS_GETSLVSTATETRANSFER_OFFS_INSTANCEID             ((EC_T_DWORD)0x04)
#define ATEMRAS_GETSLVSTATETRANSFER_OFFS_SLAVEID                ((EC_T_DWORD)0x08)
#define ATEMRAS_GETSLVSTATETRANSFER_OFFS_DEVICESTATE            ((EC_T_DWORD)0x0C)
#define ATEMRAS_GETSLVSTATETRANSFER_OFFS_DEVICESTATECURR        ((EC_T_DWORD)0x0C)
#define ATEMRAS_GETSLVSTATETRANSFER_OFFS_DEVICESTATEREQ         ((EC_T_DWORD)0x0E)
#define ATEMRAS_GETSLVSTATETRANSFER_OFFS_TIMEOUT                ((EC_T_DWORD)0x10)
#define ATEMRAS_GETSLVSTATETRANSFER_OFFS_SRVRESULT              ((EC_T_DWORD)0x14)

static EC_INLINESTART EC_T_DWORD ATEMRAS_GETSLVSTATETRANSFER_GET_COMMANDCODE(ATEMRAS_PT_GETSLVSTATETRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_GETSLVSTATETRANSFER_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_GETSLVSTATETRANSFER_SET_COMMANDCODE(ATEMRAS_PT_GETSLVSTATETRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_GETSLVSTATETRANSFER_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_GETSLVSTATETRANSFER_GET_INSTANCEID(ATEMRAS_PT_GETSLVSTATETRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_GETSLVSTATETRANSFER_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_GETSLVSTATETRANSFER_SET_INSTANCEID(ATEMRAS_PT_GETSLVSTATETRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_GETSLVSTATETRANSFER_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_GETSLVSTATETRANSFER_GET_SLAVEID(ATEMRAS_PT_GETSLVSTATETRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_GETSLVSTATETRANSFER_OFFS_SLAVEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_GETSLVSTATETRANSFER_SET_SLAVEID(ATEMRAS_PT_GETSLVSTATETRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_GETSLVSTATETRANSFER_OFFS_SLAVEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_GETSLVSTATETRANSFER_GET_DEVICESTATE(ATEMRAS_PT_GETSLVSTATETRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_GETSLVSTATETRANSFER_OFFS_DEVICESTATE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_GETSLVSTATETRANSFER_SET_DEVICESTATE(ATEMRAS_PT_GETSLVSTATETRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_GETSLVSTATETRANSFER_OFFS_DEVICESTATE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_WORD ATEMRAS_GETSLVSTATETRANSFER_GET_DEVICESTATECURR(ATEMRAS_PT_GETSLVSTATETRANSFER p)
{
    return EC_GET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_GETSLVSTATETRANSFER_OFFS_DEVICESTATECURR));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_GETSLVSTATETRANSFER_SET_DEVICESTATECURR(ATEMRAS_PT_GETSLVSTATETRANSFER p, EC_T_WORD wVal)
{
    EC_SET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_GETSLVSTATETRANSFER_OFFS_DEVICESTATECURR), wVal );
} EC_INLINESTOP
static EC_INLINESTART EC_T_WORD ATEMRAS_GETSLVSTATETRANSFER_GET_DEVICESTATEREQ(ATEMRAS_PT_GETSLVSTATETRANSFER p)
{
    return EC_GET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_GETSLVSTATETRANSFER_OFFS_DEVICESTATEREQ));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_GETSLVSTATETRANSFER_SET_DEVICESTATEREQ(ATEMRAS_PT_GETSLVSTATETRANSFER p, EC_T_WORD wVal)
{
    EC_SET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_GETSLVSTATETRANSFER_OFFS_DEVICESTATEREQ), wVal );
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_GETSLVSTATETRANSFER_GET_TIMEOUT(ATEMRAS_PT_GETSLVSTATETRANSFER p) /* backward compatibility V2.6*/
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_GETSLVSTATETRANSFER_OFFS_TIMEOUT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_GETSLVSTATETRANSFER_SET_TIMEOUT(ATEMRAS_PT_GETSLVSTATETRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_GETSLVSTATETRANSFER_OFFS_TIMEOUT), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_GETSLVSTATETRANSFER_GET_SRVRESULT(ATEMRAS_PT_GETSLVSTATETRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_GETSLVSTATETRANSFER_OFFS_SRVRESULT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_GETSLVSTATETRANSFER_SET_SRVRESULT(ATEMRAS_PT_GETSLVSTATETRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_GETSLVSTATETRANSFER_OFFS_SRVRESULT), dwVal);
} EC_INLINESTOP

typedef struct _ATEMRAS_T_SETSLVSTATETRANSFER
{
    EC_T_DWORD          dwCommandCode;      /* Command Code */              /* 0x00 */
    EC_T_DWORD          dwInstanceID;       /* Master Instance */           /* 0x04 */
    
    EC_T_DWORD          dwSlaveId;          /* Slave Id */                  /* 0x08 */
    
    EC_T_DWORD          dwNewReqDevState;   /* New Requested Dev. State */  /* 0x0C */

    EC_T_DWORD          dwTimeout;          /* Timeout  */                  /* 0x10 */
    EC_T_DWORD          dwSrvResult;        /* Result code from server */   /* 0x14 */
} EC_PACKED(1) ATEMRAS_T_SETSLVSTATETRANSFER, *ATEMRAS_PT_SETSLVSTATETRANSFER;

#define ATEMRAS_T_SETSLVSTATETRANSFER_SIZE      sizeof(ATEMRAS_T_SETSLVSTATETRANSFER)

#define ATEMRAS_SETSLVSTATETRANSFER_OFFS_COMMANDCODE            ((EC_T_DWORD)0x00)
#define ATEMRAS_SETSLVSTATETRANSFER_OFFS_INSTANCEID             ((EC_T_DWORD)0x04)
#define ATEMRAS_SETSLVSTATETRANSFER_OFFS_SLAVEID                ((EC_T_DWORD)0x08)
#define ATEMRAS_SETSLVSTATETRANSFER_OFFS_NEWREQDEVICESTATE      ((EC_T_DWORD)0x0C)
#define ATEMRAS_SETSLVSTATETRANSFER_OFFS_TIMEOUT                ((EC_T_DWORD)0x10)
#define ATEMRAS_SETSLVSTATETRANSFER_OFFS_SRVRESULT              ((EC_T_DWORD)0x14)

static EC_INLINESTART EC_T_DWORD ATEMRAS_SETSLVSTATETRANSFER_GET_COMMANDCODE(ATEMRAS_PT_SETSLVSTATETRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SETSLVSTATETRANSFER_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SETSLVSTATETRANSFER_SET_COMMANDCODE(ATEMRAS_PT_SETSLVSTATETRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SETSLVSTATETRANSFER_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_SETSLVSTATETRANSFER_GET_INSTANCEID(ATEMRAS_PT_SETSLVSTATETRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SETSLVSTATETRANSFER_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SETSLVSTATETRANSFER_SET_INSTANCEID(ATEMRAS_PT_SETSLVSTATETRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SETSLVSTATETRANSFER_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_SETSLVSTATETRANSFER_GET_SLAVEID(ATEMRAS_PT_SETSLVSTATETRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SETSLVSTATETRANSFER_OFFS_SLAVEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SETSLVSTATETRANSFER_SET_SLAVEID(ATEMRAS_PT_SETSLVSTATETRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SETSLVSTATETRANSFER_OFFS_SLAVEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_SETSLVSTATETRANSFER_GET_NEWREQDEVICESTATE(ATEMRAS_PT_SETSLVSTATETRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SETSLVSTATETRANSFER_OFFS_NEWREQDEVICESTATE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SETSLVSTATETRANSFER_SET_NEWREQDEVICESTATE(ATEMRAS_PT_SETSLVSTATETRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SETSLVSTATETRANSFER_OFFS_NEWREQDEVICESTATE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_SETSLVSTATETRANSFER_GET_TIMEOUT(ATEMRAS_PT_SETSLVSTATETRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SETSLVSTATETRANSFER_OFFS_TIMEOUT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SETSLVSTATETRANSFER_SET_TIMEOUT(ATEMRAS_PT_SETSLVSTATETRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SETSLVSTATETRANSFER_OFFS_TIMEOUT), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_SETSLVSTATETRANSFER_GET_SRVRESULT(ATEMRAS_PT_SETSLVSTATETRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SETSLVSTATETRANSFER_OFFS_SRVRESULT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SETSLVSTATETRANSFER_SET_SRVRESULT(ATEMRAS_PT_SETSLVSTATETRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SETSLVSTATETRANSFER_OFFS_SRVRESULT), dwVal);
} EC_INLINESTOP

typedef struct _ATEMRAS_T_SLAVEEEPROMOP
{
    EC_T_DWORD          dwCommandCode;      /* Command Code */              /* 00 */
    EC_T_DWORD          dwInstanceID;       /* Master Instance */           /* 04 */
   
    EC_T_BOOL           bFixedAddressing;                                   /* 08 */     
    EC_T_WORD           wSlaveAddress;                                      /* 12 */
    EC_T_WORD           wRsvd1;
    EC_T_DWORD          dwReadWriteLen;                                     /* 16 */
    EC_T_WORD           wEEPRomStartOffset;                                 /* 20 */
    EC_T_WORD           wRsvd2;
    EC_T_DWORD          dwTimeout;                                          /* 24 */
    EC_T_DWORD          dwSrvResult;        /* Result code from server */   /* 28 */
    
    /* special read eeprom parameter */
    EC_T_DWORD          dwNumOutData;                                       /* 32 */

    /* spezial AssignSlaveEEPRom */
    EC_T_BOOL           bSlavePDIAccessEnable;                              /* 36 */
    EC_T_BOOL           bForceAssign;                                       /* 40 */
} EC_PACKED(1) ATEMRAS_T_SLAVEEEPROMOP, *ATEMRAS_PT_SLAVEEEPROMOP;

#define ATEMRAS_T_SLAVEEEPROMOP_SIZE     sizeof(ATEMRAS_T_SLAVEEEPROMOP)

#define ATEMRAS_SLAVEEEPROMOP_OFFS_COMMANDCODE           ((EC_T_DWORD)0)
#define ATEMRAS_SLAVEEEPROMOP_OFFS_INSTANCEID            ((EC_T_DWORD)4)
#define ATEMRAS_SLAVEEEPROMOP_OFFS_FIXEDADDRESSING       ((EC_T_DWORD)8)
#define ATEMRAS_SLAVEEEPROMOP_OFFS_SLAVEADDRESS          ((EC_T_DWORD)12)
#define ATEMRAS_SLAVEEEPROMOP_OFFS_READWRITELEN          ((EC_T_DWORD)16)
#define ATEMRAS_SLAVEEEPROMOP_OFFS_EEPROMSTARTOFFSET     ((EC_T_DWORD)20)
#define ATEMRAS_SLAVEEEPROMOP_OFFS_TIMEOUT               ((EC_T_DWORD)24)
#define ATEMRAS_SLAVEEEPROMOP_OFFS_SRVRESULT             ((EC_T_DWORD)28)
#define ATEMRAS_SLAVEEEPROMOP_OFFS_NUMOUTDATA            ((EC_T_DWORD)32)
#define ATEMRAS_SLAVEEEPROMOP_OFFS_SLAVEPDIACCESS        ((EC_T_DWORD)36)
#define ATEMRAS_SLAVEEEPROMOP_OFFS_FORCEASSIGN           ((EC_T_DWORD)40)
#define ATEMRAS_SLAVEEEPROMOP_OFFS_DATA                  ((EC_T_DWORD)44)

static EC_INLINESTART EC_T_DWORD ATEMRAS_SLAVEEEPROMOP_GET_COMMANDCODE(ATEMRAS_PT_SLAVEEEPROMOP p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLAVEEEPROMOP_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SLAVEEEPROMOP_SET_COMMANDCODE(ATEMRAS_PT_SLAVEEEPROMOP p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLAVEEEPROMOP_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_DWORD ATEMRAS_SLAVEEEPROMOP_GET_INSTANCEID(ATEMRAS_PT_SLAVEEEPROMOP p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLAVEEEPROMOP_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SLAVEEEPROMOP_SET_INSTANCEID(ATEMRAS_PT_SLAVEEEPROMOP p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLAVEEEPROMOP_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_BOOL ATEMRAS_SLAVEEEPROMOP_GET_FIXEDADDRESSING(ATEMRAS_PT_SLAVEEEPROMOP p)
{
    return (EC_T_BOOL)EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLAVEEEPROMOP_OFFS_FIXEDADDRESSING));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SLAVEEEPROMOP_SET_FIXEDADDRESSING(ATEMRAS_PT_SLAVEEEPROMOP p, EC_T_BOOL dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLAVEEEPROMOP_OFFS_FIXEDADDRESSING), (EC_T_DWORD) dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_WORD ATEMRAS_SLAVEEEPROMOP_GET_SLAVEADDRESS(ATEMRAS_PT_SLAVEEEPROMOP p)
{
    return EC_GET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_SLAVEEEPROMOP_OFFS_SLAVEADDRESS));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SLAVEEEPROMOP_SET_SLAVEADDRESS(ATEMRAS_PT_SLAVEEEPROMOP p, EC_T_WORD dwVal)
{
    EC_SET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_SLAVEEEPROMOP_OFFS_SLAVEADDRESS), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_DWORD ATEMRAS_SLAVEEEPROMOP_GET_READWRITELEN(ATEMRAS_PT_SLAVEEEPROMOP p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLAVEEEPROMOP_OFFS_READWRITELEN));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SLAVEEEPROMOP_SET_READWRITELEN(ATEMRAS_PT_SLAVEEEPROMOP p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLAVEEEPROMOP_OFFS_READWRITELEN), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_WORD ATEMRAS_SLAVEEEPROMOP_GET_EEPROMSTARTOFFSET(ATEMRAS_PT_SLAVEEEPROMOP p)
{
    return (EC_T_WORD)(EC_GET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_SLAVEEEPROMOP_OFFS_EEPROMSTARTOFFSET))&0xffff);
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SLAVEEEPROMOP_SET_EEPROMSTARTOFFSET(ATEMRAS_PT_SLAVEEEPROMOP p, EC_T_WORD dwVal)
{
    EC_SET_FRM_WORD(((EC_T_PBYTE)p)+ATEMRAS_SLAVEEEPROMOP_OFFS_EEPROMSTARTOFFSET, (EC_T_WORD)(dwVal&0xffff));
} EC_INLINESTOP

static EC_INLINESTART EC_T_DWORD ATEMRAS_SLAVEEEPROMOP_GET_TIMEOUT(ATEMRAS_PT_SLAVEEEPROMOP p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLAVEEEPROMOP_OFFS_TIMEOUT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SLAVEEEPROMOP_SET_TIMEOUT(ATEMRAS_PT_SLAVEEEPROMOP p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLAVEEEPROMOP_OFFS_TIMEOUT), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_DWORD ATEMRAS_SLAVEEEPROMOP_GET_SRVRESULT(ATEMRAS_PT_SLAVEEEPROMOP p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLAVEEEPROMOP_OFFS_SRVRESULT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SLAVEEEPROMOP_SET_SRVRESULT(ATEMRAS_PT_SLAVEEEPROMOP p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLAVEEEPROMOP_OFFS_SRVRESULT), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_DWORD ATEMRAS_SLAVEEEPROMOP_GET_NUMOUTDATA(ATEMRAS_PT_SLAVEEEPROMOP p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLAVEEEPROMOP_OFFS_NUMOUTDATA));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SLAVEEEPROMOP_SET_NUMOUTDATA(ATEMRAS_PT_SLAVEEEPROMOP p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLAVEEEPROMOP_OFFS_NUMOUTDATA), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_DWORD ATEMRAS_SLAVEEEPROMOP_GET_SLAVEPDIACCESS(ATEMRAS_PT_SLAVEEEPROMOP p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLAVEEEPROMOP_OFFS_SLAVEPDIACCESS));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SLAVEEEPROMOP_SET_SLAVEPDIACCESS(ATEMRAS_PT_SLAVEEEPROMOP p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLAVEEEPROMOP_OFFS_SLAVEPDIACCESS), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_BOOL ATEMRAS_SLAVEEEPROMOP_GET_FORCEASSIGN(ATEMRAS_PT_SLAVEEEPROMOP p)
{
    return (EC_T_BOOL)EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLAVEEEPROMOP_OFFS_FORCEASSIGN));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SLAVEEEPROMOP_SET_FORCEASSIGN(ATEMRAS_PT_SLAVEEEPROMOP p, EC_T_BOOL bVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SLAVEEEPROMOP_OFFS_FORCEASSIGN), (EC_T_DWORD) bVal );
} EC_INLINESTOP

static EC_INLINESTART EC_T_PBYTE ATEMRAS_SLAVEEEPROMOP_DATA(ATEMRAS_PT_SLAVEEEPROMOP p)
{
    return ((EC_T_PBYTE)(((EC_T_PBYTE)p)+ATEMRAS_SLAVEEEPROMOP_OFFS_DATA));
} EC_INLINESTOP




typedef struct _ATEMRAS_T_SOE_OP
{
    EC_T_DWORD          dwCommandCode;      /* Command Code */              /* 00 */
    EC_T_DWORD          dwInstanceID;       /* Master Instance */           /* 04 */
   
    EC_T_DWORD          dwSlaveId;                                          /* 08 */     
    EC_T_BYTE           byDriveNo;                                          /* 12 */
    EC_T_BYTE           byElementFlags;                                     /* 13 */
    EC_T_WORD           wRsvd1;
    EC_T_DWORD          dwReadWriteDataLen;                                 /* 16 */
    EC_T_WORD           wIDN;                                               /* 20 */
    EC_T_WORD           wRsvd2;
    EC_T_DWORD          dwTimeout;                                          /* 24 */
    EC_T_DWORD          dwSrvResult;        /* Result code from server */   /* 28 */
    EC_T_DWORD          dwNumOutData;                                       /* 32 */
} EC_PACKED(1) ATEMRAS_T_SOE_OP, *ATEMRAS_PT_SOE_OP;

#define ATEMRAS_T_SOE_OP_SIZE     sizeof(ATEMRAS_T_SOE_OP)

#define ATEMRAS_SOE_OP_OFFS_COMMANDCODE           ((EC_T_DWORD)0)
#define ATEMRAS_SOE_OP_OFFS_INSTANCEID            ((EC_T_DWORD)4)
#define ATEMRAS_SOE_OP_OFFS_SLAVEID               ((EC_T_DWORD)8)
#define ATEMRAS_SOE_OP_OFFS_DRIVENO               ((EC_T_DWORD)12)
#define ATEMRAS_SOE_OP_OFFS_ELEMENTFLAGS          ((EC_T_DWORD)13)
#define ATEMRAS_SOE_OP_OFFS_READWRITEDATALEN      ((EC_T_DWORD)16)
#define ATEMRAS_SOE_OP_OFFS_IDN                   ((EC_T_DWORD)20)
#define ATEMRAS_SOE_OP_OFFS_TIMEOUT               ((EC_T_DWORD)24)
#define ATEMRAS_SOE_OP_OFFS_SRVRESULT             ((EC_T_DWORD)28)
#define ATEMRAS_SOE_OP_OFFS_NUMOUTDATA            ((EC_T_DWORD)32)
#define ATEMRAS_SOE_OP_OFFS_DATA                  ((EC_T_DWORD)36)


static EC_INLINESTART EC_T_DWORD ATEMRAS_SOE_OP_GET_COMMANDCODE(ATEMRAS_PT_SOE_OP p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SOE_OP_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SOE_OP_SET_COMMANDCODE(ATEMRAS_PT_SOE_OP p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SOE_OP_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_DWORD ATEMRAS_SOE_OP_GET_INSTANCEID(ATEMRAS_PT_SOE_OP p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SOE_OP_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SOE_OP_SET_INSTANCEID(ATEMRAS_PT_SOE_OP p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SOE_OP_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_DWORD ATEMRAS_SOE_OP_GET_SLAVEID(ATEMRAS_PT_SOE_OP p)
{
    return (EC_T_DWORD)EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SOE_OP_OFFS_SLAVEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SOE_OP_SET_SLAVEID(ATEMRAS_PT_SOE_OP p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SOE_OP_OFFS_SLAVEID), (EC_T_DWORD) dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_BYTE ATEMRAS_SOE_OP_GET_DRIVENO(ATEMRAS_PT_SOE_OP p)
{
    return (EC_T_BYTE)(*((((EC_T_PBYTE)p)+ATEMRAS_SOE_OP_OFFS_DRIVENO)));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SOE_OP_SET_DRIVENO(ATEMRAS_PT_SOE_OP p, EC_T_BYTE byVal)
{
    (*((((EC_T_PBYTE)p)+ATEMRAS_SOE_OP_OFFS_DRIVENO))) = byVal;
} EC_INLINESTOP

static EC_INLINESTART EC_T_BYTE ATEMRAS_SOE_OP_GET_ELEMENTFLAGS(ATEMRAS_PT_SOE_OP p)
{
    return (EC_T_BYTE)(*((((EC_T_PBYTE)p)+ATEMRAS_SOE_OP_OFFS_ELEMENTFLAGS)));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SOE_OP_SET_ELEMENTFLAGS(ATEMRAS_PT_SOE_OP p, EC_T_BYTE byVal)
{
    (*((((EC_T_PBYTE)p)+ATEMRAS_SOE_OP_OFFS_ELEMENTFLAGS))) = byVal;
} EC_INLINESTOP

static EC_INLINESTART EC_T_DWORD ATEMRAS_SOE_OP_GET_READWRITEDATALEN(ATEMRAS_PT_SOE_OP p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SOE_OP_OFFS_READWRITEDATALEN));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SOE_OP_SET_READWRITEDATALEN(ATEMRAS_PT_SOE_OP p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SOE_OP_OFFS_READWRITEDATALEN), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_WORD ATEMRAS_SOE_OP_GET_IDN(ATEMRAS_PT_SOE_OP p)
{
    return (EC_T_WORD)(EC_GET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_SOE_OP_OFFS_IDN))&0xffff);
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SOE_OP_SET_IDN(ATEMRAS_PT_SOE_OP p, EC_T_WORD dwVal)
{
    EC_SET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_SOE_OP_OFFS_IDN), (EC_T_WORD)(dwVal&0xffff));
} EC_INLINESTOP

static EC_INLINESTART EC_T_DWORD ATEMRAS_SOE_OP_GET_TIMEOUT(ATEMRAS_PT_SOE_OP p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SOE_OP_OFFS_TIMEOUT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SOE_OP_SET_TIMEOUT(ATEMRAS_PT_SOE_OP p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SOE_OP_OFFS_TIMEOUT), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_DWORD ATEMRAS_SOE_OP_GET_SRVRESULT(ATEMRAS_PT_SOE_OP p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SOE_OP_OFFS_SRVRESULT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SOE_OP_SET_SRVRESULT(ATEMRAS_PT_SOE_OP p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SOE_OP_OFFS_SRVRESULT), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_DWORD ATEMRAS_SOE_OP_GET_NUMOUTDATA(ATEMRAS_PT_SOE_OP p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SOE_OP_OFFS_NUMOUTDATA));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SOE_OP_SET_NUMOUTDATA(ATEMRAS_PT_SOE_OP p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_SOE_OP_OFFS_NUMOUTDATA), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_PBYTE ATEMRAS_SOE_OP_DATA(ATEMRAS_PT_SOE_OP p)
{
    return ((EC_T_PBYTE)(((EC_T_PBYTE)p)+ATEMRAS_SOE_OP_OFFS_DATA));
} EC_INLINESTOP






typedef struct _ATEMRAS_T_TFERSIRCTRANSFER
{
    EC_T_DWORD          dwCommandCode;      /* Command Code */              /* 0x00 */
    EC_T_DWORD          dwInstanceID;       /* Master Instance */           /* 0x04 */
    
    EC_T_DWORD          dwSlaveId;          /* Slave Id */                  /* 0x08 */
    
    EC_T_DWORD          dwCommand;          /* EC Command (8B) */           /* 0x0C */
    EC_T_DWORD          dwMemAddr;          /* EC Memory Address */         /* 0x10 */
    EC_T_DWORD          dwDataOffset;       /* Data Offset */               /* 0x14 */
    EC_T_DWORD          dwLen;              /* Length of Data (16B) */      /* 0x18 */
    
    EC_T_DWORD          dwTimeout;          /* Timeout  */                  /* 0x1C */
    EC_T_DWORD          dwSrvResult;        /* Result code from server */   /* 0x20 */
} EC_PACKED(1) ATEMRAS_T_TFERSIRCTRANSFER, *ATEMRAS_PT_TFERSIRCTRANSFER;

#define ATEMRAS_T_TFERSIRCTRANSFER_SIZE     sizeof(ATEMRAS_T_TFERSIRCTRANSFER)

#define ATEMRAS_TFERSIRCTRANSFER_OFFS_COMMANDCODE           ((EC_T_DWORD)0x00)
#define ATEMRAS_TFERSIRCTRANSFER_OFFS_INSTANCEID            ((EC_T_DWORD)0x04)
#define ATEMRAS_TFERSIRCTRANSFER_OFFS_SLAVEID               ((EC_T_DWORD)0x08)
#define ATEMRAS_TFERSIRCTRANSFER_OFFS_COMMAND               ((EC_T_DWORD)0x0C)
#define ATEMRAS_TFERSIRCTRANSFER_OFFS_MEMADDR               ((EC_T_DWORD)0x10)
#define ATEMRAS_TFERSIRCTRANSFER_OFFS_DATAOFFSET            ((EC_T_DWORD)0x14)
#define ATEMRAS_TFERSIRCTRANSFER_OFFS_DATASIZE              ((EC_T_DWORD)0x18)
#define ATEMRAS_TFERSIRCTRANSFER_OFFS_TIMEOUT               ((EC_T_DWORD)0x1C)
#define ATEMRAS_TFERSIRCTRANSFER_OFFS_SRVRESULT             ((EC_T_DWORD)0x20)
#define ATEMRAS_TFERSIRCTRANSFER_OFFS_DATA                  ((EC_T_DWORD)0x24)

static EC_INLINESTART EC_T_DWORD ATEMRAS_TFERSIRCTRANSFER_GET_COMMANDCODE(ATEMRAS_PT_TFERSIRCTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_TFERSIRCTRANSFER_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_TFERSIRCTRANSFER_SET_COMMANDCODE(ATEMRAS_PT_TFERSIRCTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_TFERSIRCTRANSFER_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_TFERSIRCTRANSFER_GET_INSTANCEID(ATEMRAS_PT_TFERSIRCTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_TFERSIRCTRANSFER_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_TFERSIRCTRANSFER_SET_INSTANCEID(ATEMRAS_PT_TFERSIRCTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_TFERSIRCTRANSFER_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_TFERSIRCTRANSFER_GET_SLAVEID(ATEMRAS_PT_TFERSIRCTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_TFERSIRCTRANSFER_OFFS_SLAVEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_TFERSIRCTRANSFER_SET_SLAVEID(ATEMRAS_PT_TFERSIRCTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_TFERSIRCTRANSFER_OFFS_SLAVEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_TFERSIRCTRANSFER_GET_COMMAND(ATEMRAS_PT_TFERSIRCTRANSFER p)
{
    return (EC_T_DWORD)(EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_TFERSIRCTRANSFER_OFFS_COMMAND))&0xff);
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_TFERSIRCTRANSFER_SET_COMMAND(ATEMRAS_PT_TFERSIRCTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_TFERSIRCTRANSFER_OFFS_COMMAND), (dwVal&0xff));
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_TFERSIRCTRANSFER_GET_MEMADDR(ATEMRAS_PT_TFERSIRCTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_TFERSIRCTRANSFER_OFFS_MEMADDR));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_TFERSIRCTRANSFER_SET_MEMADDR(ATEMRAS_PT_TFERSIRCTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_TFERSIRCTRANSFER_OFFS_MEMADDR), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_TFERSIRCTRANSFER_GET_DATAOFFSET(ATEMRAS_PT_TFERSIRCTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_TFERSIRCTRANSFER_OFFS_DATAOFFSET));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_TFERSIRCTRANSFER_SET_DATAOFFSET(ATEMRAS_PT_TFERSIRCTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_TFERSIRCTRANSFER_OFFS_DATAOFFSET), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_TFERSIRCTRANSFER_GET_DATASIZE(ATEMRAS_PT_TFERSIRCTRANSFER p)
{
    return (EC_T_DWORD)(EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_TFERSIRCTRANSFER_OFFS_DATASIZE))&0xffff);
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_TFERSIRCTRANSFER_SET_DATASIZE(ATEMRAS_PT_TFERSIRCTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_TFERSIRCTRANSFER_OFFS_DATASIZE), (dwVal&0xffff));
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_TFERSIRCTRANSFER_GET_TIMEOUT(ATEMRAS_PT_TFERSIRCTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_TFERSIRCTRANSFER_OFFS_TIMEOUT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_TFERSIRCTRANSFER_SET_TIMEOUT(ATEMRAS_PT_TFERSIRCTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_TFERSIRCTRANSFER_OFFS_TIMEOUT), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_TFERSIRCTRANSFER_GET_SRVRESULT(ATEMRAS_PT_TFERSIRCTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_TFERSIRCTRANSFER_OFFS_SRVRESULT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_TFERSIRCTRANSFER_SET_SRVRESULT(ATEMRAS_PT_TFERSIRCTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_TFERSIRCTRANSFER_OFFS_SRVRESULT), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_PBYTE ATEMRAS_TFERSIRCTRANSFER_DATA(ATEMRAS_PT_TFERSIRCTRANSFER p)
{
    return ((EC_T_PBYTE)(((EC_T_PBYTE)p)+ATEMRAS_TFERSIRCTRANSFER_OFFS_DATA));
} EC_INLINESTOP




typedef struct _ATEMRAS_T_TFERQRCTRANSFER
{
    EC_T_DWORD          dwCommandCode;      /* Command Code */              /* 0x00 */
    EC_T_DWORD          dwInstanceID;       /* Master Instance */           /* 0x04 */
    
    EC_T_DWORD          dwSlaveId;          /* Slave Id */                  /* 0x08 */
    EC_T_DWORD          dwInvokeId;         /* Invoke Id (16B) */           /* 0x0C */
    
    EC_T_DWORD          dwCommand;          /* EC Command (8B) */           /* 0x10 */
    EC_T_DWORD          dwMemAddr;          /* EC Memory Address */         /* 0x14 */
    EC_T_DWORD          dwDataOffset;       /* Data Offset */               /* 0x18 */
    EC_T_DWORD          dwLen;              /* Length of Data (16B) */      /* 0x1C */
    
    EC_T_DWORD          dwSrvResult;        /* Result code from server */   /* 0x20 */
} EC_PACKED(1) ATEMRAS_T_TFERQRCTRANSFER, *ATEMRAS_PT_TFERQRCTRANSFER;

#define ATEMRAS_T_TFERQRCTRANSFER_SIZE      sizeof(ATEMRAS_T_TFERQRCTRANSFER)

#define ATEMRAS_TFERQRCTRANSFER_OFFS_COMMANDCODE           ((EC_T_DWORD)0x00)
#define ATEMRAS_TFERQRCTRANSFER_OFFS_INSTANCEID            ((EC_T_DWORD)0x04)
#define ATEMRAS_TFERQRCTRANSFER_OFFS_SLAVEID               ((EC_T_DWORD)0x08)
#define ATEMRAS_TFERQRCTRANSFER_OFFS_INVOKEID              ((EC_T_DWORD)0x0C)
#define ATEMRAS_TFERQRCTRANSFER_OFFS_COMMAND               ((EC_T_DWORD)0x10)
#define ATEMRAS_TFERQRCTRANSFER_OFFS_MEMADDR               ((EC_T_DWORD)0x14)
#define ATEMRAS_TFERQRCTRANSFER_OFFS_DATAOFFSET            ((EC_T_DWORD)0x18)
#define ATEMRAS_TFERQRCTRANSFER_OFFS_DATASIZE              ((EC_T_DWORD)0x1C)
#define ATEMRAS_TFERQRCTRANSFER_OFFS_SRVRESULT             ((EC_T_DWORD)0x20)
#define ATEMRAS_TFERQRCTRANSFER_OFFS_DATA                  ((EC_T_DWORD)0x24)

static EC_INLINESTART EC_T_DWORD ATEMRAS_TFERQRCTRANSFER_GET_COMMANDCODE(ATEMRAS_PT_TFERQRCTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_TFERQRCTRANSFER_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_TFERQRCTRANSFER_SET_COMMANDCODE(ATEMRAS_PT_TFERQRCTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_TFERQRCTRANSFER_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_TFERQRCTRANSFER_GET_INSTANCEID(ATEMRAS_PT_TFERQRCTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_TFERQRCTRANSFER_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_TFERQRCTRANSFER_SET_INSTANCEID(ATEMRAS_PT_TFERQRCTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_TFERQRCTRANSFER_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_TFERQRCTRANSFER_GET_SLAVEID(ATEMRAS_PT_TFERQRCTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_TFERQRCTRANSFER_OFFS_SLAVEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_TFERQRCTRANSFER_SET_SLAVEID(ATEMRAS_PT_TFERQRCTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_TFERQRCTRANSFER_OFFS_SLAVEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_TFERQRCTRANSFER_GET_INVOKEID(ATEMRAS_PT_TFERQRCTRANSFER p)
{
    return (EC_T_DWORD)(EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_TFERQRCTRANSFER_OFFS_INVOKEID))&0xffff);
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_TFERQRCTRANSFER_SET_INVOKEID(ATEMRAS_PT_TFERQRCTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_TFERQRCTRANSFER_OFFS_INVOKEID), (dwVal&0xffff));
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_TFERQRCTRANSFER_GET_COMMAND(ATEMRAS_PT_TFERQRCTRANSFER p)
{
    return (EC_T_DWORD)(EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_TFERQRCTRANSFER_OFFS_COMMAND))&0xff);
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_TFERQRCTRANSFER_SET_COMMAND(ATEMRAS_PT_TFERQRCTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_TFERQRCTRANSFER_OFFS_COMMAND), (dwVal&0xff));
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_TFERQRCTRANSFER_GET_MEMADDR(ATEMRAS_PT_TFERQRCTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_TFERQRCTRANSFER_OFFS_MEMADDR));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_TFERQRCTRANSFER_SET_MEMADDR(ATEMRAS_PT_TFERQRCTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_TFERQRCTRANSFER_OFFS_MEMADDR), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_TFERQRCTRANSFER_GET_DATAOFFSET(ATEMRAS_PT_TFERQRCTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_TFERQRCTRANSFER_OFFS_DATAOFFSET));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_TFERQRCTRANSFER_SET_DATAOFFSET(ATEMRAS_PT_TFERQRCTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_TFERQRCTRANSFER_OFFS_DATAOFFSET), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_TFERQRCTRANSFER_GET_DATASIZE(ATEMRAS_PT_TFERQRCTRANSFER p)
{
    return (EC_T_DWORD)(EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_TFERQRCTRANSFER_OFFS_DATASIZE))&0xffff);
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_TFERQRCTRANSFER_SET_DATASIZE(ATEMRAS_PT_TFERQRCTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_TFERQRCTRANSFER_OFFS_DATASIZE), (dwVal&0xffff));
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_TFERQRCTRANSFER_GET_SRVRESULT(ATEMRAS_PT_TFERQRCTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_TFERQRCTRANSFER_OFFS_SRVRESULT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_TFERQRCTRANSFER_SET_SRVRESULT(ATEMRAS_PT_TFERQRCTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_TFERQRCTRANSFER_OFFS_SRVRESULT), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_PBYTE ATEMRAS_TFERQRCTRANSFER_DATA(ATEMRAS_PT_TFERQRCTRANSFER p)
{
    return ((EC_T_PBYTE)(((EC_T_PBYTE)p)+ATEMRAS_TFERQRCTRANSFER_OFFS_DATA));
} EC_INLINESTOP

typedef struct _ATEMRAS_T_MBXTFER
{
    EC_T_DWORD              dwClientId;         /* Client Id of Mbx owner */    /* 0x00 */
                                                
    EC_T_DWORD              dwMbxTferType;      /* Mailbox Transfer Type */     /* 0x04 */
    EC_T_DWORD              dwMaxDataLen;       /* Max Data Len */              /* 0x08 */
                                                
    EC_T_DWORD              dwDataLen;          /* number of bytes to be tferd*//* 0x0C */
    EC_T_DWORD              dwDataOffset;       /* data ptr offset */           /* 0x10 */
    EC_T_DWORD              dwStatus;           /* curr transfer status */      /* 0x14 */
    EC_T_DWORD              dwErrorCode;        /* transfer error code */       /* 0x18 */
    EC_T_DWORD              dwTferId;           /* unique transfer id */        /* 0x1C */
} EC_PACKED(1) ATEMRAS_T_MBXTFER, *ATEMRAS_PT_MBXTFER;

#define ATEMRAS_T_MBXTFER_SIZE      sizeof(ATEMRAS_T_MBXTFER)

#define ATEMRAS_MBXTFERTRANSFER_OFFS_CLIENTID               ((EC_T_DWORD)0x00)
#define ATEMRAS_MBXTFERTRANSFER_OFFS_MBXTFERTYPE            ((EC_T_DWORD)0x04)
#define ATEMRAS_MBXTFERTRANSFER_OFFS_MAXDATALEN             ((EC_T_DWORD)0x08)
#define ATEMRAS_MBXTFERTRANSFER_OFFS_DATALEN                ((EC_T_DWORD)0x0C)
#define ATEMRAS_MBXTFERTRANSFER_OFFS_DATAOFFSET             ((EC_T_DWORD)0x10)
#define ATEMRAS_MBXTFERTRANSFER_OFFS_STATUS                 ((EC_T_DWORD)0x14)
#define ATEMRAS_MBXTFERTRANSFER_OFFS_ERRORCODE              ((EC_T_DWORD)0x18)
#define ATEMRAS_MBXTFERTRANSFER_OFFS_TFERID                 ((EC_T_DWORD)0x1C)

static EC_INLINESTART EC_T_DWORD ATEMRAS_MBXTFERTRANSFER_GET_CLIENTID(ATEMRAS_PT_MBXTFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_MBXTFERTRANSFER_OFFS_CLIENTID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_MBXTFERTRANSFER_SET_CLIENTID(ATEMRAS_PT_MBXTFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_MBXTFERTRANSFER_OFFS_CLIENTID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_MBXTFERTRANSFER_GET_MBXTFERTYPE(ATEMRAS_PT_MBXTFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_MBXTFERTRANSFER_OFFS_MBXTFERTYPE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_MBXTFERTRANSFER_SET_MBXTFERTYPE(ATEMRAS_PT_MBXTFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_MBXTFERTRANSFER_OFFS_MBXTFERTYPE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_MBXTFERTRANSFER_GET_MAXDATALEN(ATEMRAS_PT_MBXTFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_MBXTFERTRANSFER_OFFS_MAXDATALEN));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_MBXTFERTRANSFER_SET_MAXDATALEN(ATEMRAS_PT_MBXTFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_MBXTFERTRANSFER_OFFS_MAXDATALEN), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_MBXTFERTRANSFER_GET_DATALEN(ATEMRAS_PT_MBXTFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_MBXTFERTRANSFER_OFFS_DATALEN));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_MBXTFERTRANSFER_SET_DATALEN(ATEMRAS_PT_MBXTFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_MBXTFERTRANSFER_OFFS_DATALEN), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_MBXTFERTRANSFER_GET_DATAOFFSET(ATEMRAS_PT_MBXTFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_MBXTFERTRANSFER_OFFS_DATAOFFSET));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_MBXTFERTRANSFER_SET_DATAOFFSET(ATEMRAS_PT_MBXTFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_MBXTFERTRANSFER_OFFS_DATAOFFSET), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_MBXTFERTRANSFER_GET_STATUS(ATEMRAS_PT_MBXTFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_MBXTFERTRANSFER_OFFS_STATUS));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_MBXTFERTRANSFER_SET_STATUS(ATEMRAS_PT_MBXTFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_MBXTFERTRANSFER_OFFS_STATUS), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_MBXTFERTRANSFER_GET_ERRORCODE(ATEMRAS_PT_MBXTFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_MBXTFERTRANSFER_OFFS_ERRORCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_MBXTFERTRANSFER_SET_ERRORCODE(ATEMRAS_PT_MBXTFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_MBXTFERTRANSFER_OFFS_ERRORCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_MBXTFERTRANSFER_GET_TRANSFERID(ATEMRAS_PT_MBXTFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_MBXTFERTRANSFER_OFFS_TFERID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_MBXTFERTRANSFER_SET_TRANSFERID(ATEMRAS_PT_MBXTFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_MBXTFERTRANSFER_OFFS_TFERID), dwVal);
} EC_INLINESTOP

typedef struct _ATEMRAS_T_MBXCREATETRANSFER
{
    EC_T_DWORD          dwCommandCode;      /* Command Code */              /* 0x00 */
    EC_T_DWORD          dwInstanceID;       /* Master Instance */           /* 0x04 */
    EC_T_DWORD          dwMbxTferType;      /* Mailbox Transfer Type */     /* 0x08 */
    EC_T_DWORD          dwMaxDataLen;       /* Max Data Len */              /* 0x0C */
    EC_T_DWORD          dwMbxTferId;        /* Id of Mailbox Transfer Obj *//* 0x10 */
    ATEMRAS_T_MBXTFER   oTferObj;           /* Tfer Obj */                  /* 0x14 */
} EC_PACKED(1) ATEMRAS_T_MBXCREATETRANSFER, *ATEMRAS_PT_MBXCREATETRANSFER;

#define ATEMRAS_T_MBXCREATETRANSFER_SIZE        sizeof(ATEMRAS_T_MBXCREATETRANSFER)

#define ATEMRAS_MBXCREATETRANSFER_OFFS_COMMANDCODE          ((EC_T_DWORD)0x00)
#define ATEMRAS_MBXCREATETRANSFER_OFFS_INSTANCEID           ((EC_T_DWORD)0x04)
#define ATEMRAS_MBXCREATETRANSFER_OFFS_MBXTFERTYPE          ((EC_T_DWORD)0x08)
#define ATEMRAS_MBXCREATETRANSFER_OFFS_MAXDATALEN           ((EC_T_DWORD)0x0C)
#define ATEMRAS_MBXCREATETRANSFER_OFFS_MBXOBJID             ((EC_T_DWORD)0x10)
#define ATEMRAS_MBXCREATETRANSFER_OFFS_TFEROBJ              ((EC_T_DWORD)0x14)
#define ATEMRAS_MBXCREATETRANSFER_OFFS_DATA                 ((EC_T_DWORD)0x14+ATEMRAS_T_MBXTFER_SIZE)

static EC_INLINESTART EC_T_DWORD ATEMRAS_MBXCREATETRANSFER_GET_COMMANDCODE(ATEMRAS_PT_MBXCREATETRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_MBXCREATETRANSFER_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_MBXCREATETRANSFER_SET_COMMANDCODE(ATEMRAS_PT_MBXCREATETRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_MBXCREATETRANSFER_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_MBXCREATETRANSFER_GET_INSTANCEID(ATEMRAS_PT_MBXCREATETRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_MBXCREATETRANSFER_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_MBXCREATETRANSFER_SET_INSTANCEID(ATEMRAS_PT_MBXCREATETRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_MBXCREATETRANSFER_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_MBXCREATETRANSFER_GET_MBXTFERTYPE(ATEMRAS_PT_MBXCREATETRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_MBXCREATETRANSFER_OFFS_MBXTFERTYPE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_MBXCREATETRANSFER_SET_MBXTFERTYPE(ATEMRAS_PT_MBXCREATETRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_MBXCREATETRANSFER_OFFS_MBXTFERTYPE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_MBXCREATETRANSFER_GET_MAXDATALEN(ATEMRAS_PT_MBXCREATETRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_MBXCREATETRANSFER_OFFS_MAXDATALEN));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_MBXCREATETRANSFER_SET_MAXDATALEN(ATEMRAS_PT_MBXCREATETRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_MBXCREATETRANSFER_OFFS_MAXDATALEN), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_MBXCREATETRANSFER_GET_MBXOBJID(ATEMRAS_PT_MBXCREATETRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ ATEMRAS_MBXCREATETRANSFER_OFFS_MBXOBJID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_MBXCREATETRANSFER_SET_MBXOBJID(ATEMRAS_PT_MBXCREATETRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ ATEMRAS_MBXCREATETRANSFER_OFFS_MBXOBJID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART ATEMRAS_PT_MBXTFER ATEMRAS_MBXCREATETRANSFER_TFEROBJ(ATEMRAS_PT_MBXCREATETRANSFER p)
{
    return (ATEMRAS_PT_MBXTFER)((((EC_T_PBYTE)p)+ATEMRAS_MBXCREATETRANSFER_OFFS_TFEROBJ));
} EC_INLINESTOP
static EC_INLINESTART EC_T_PBYTE ATEMRAS_MBXCREATETRANSFER_DATA(ATEMRAS_PT_MBXCREATETRANSFER p)
{
    return (EC_T_PBYTE)((((EC_T_PBYTE)p)+ATEMRAS_MBXCREATETRANSFER_OFFS_DATA));
} EC_INLINESTOP

typedef struct _ATEMRAS_T_MBXDELETETRANSFER
{
    EC_T_DWORD          dwCommandCode;      /* Command Code */              /* 0x00 */
    EC_T_DWORD          dwInstanceID;       /* Master Instance */           /* 0x04 */
    
    EC_T_DWORD          dwMbxTferId;        /* Id of Mailbox Transfer Obj *//* 0x08 */
} EC_PACKED(1) ATEMRAS_T_MBXDELETETRANSFER, *ATEMRAS_PT_MBXDELETETRANSFER;

#define ATEMRAS_T_MBXDELETETRANSFER_SIZE        sizeof(ATEMRAS_T_MBXDELETETRANSFER)

#define ATEMRAS_MBXDELETETRANSFER_OFFS_COMMANDCODE ((EC_T_DWORD)0x00)
#define ATEMRAS_MBXDELETETRANSFER_OFFS_INSTANCEID  ((EC_T_DWORD)0x04)
#define ATEMRAS_MBXDELETETRANSFER_OFFS_MBXOBJID    ((EC_T_DWORD)0x08)

static EC_INLINESTART EC_T_DWORD ATEMRAS_MBXDELETETRANSFER_GET_COMMANDCODE(ATEMRAS_PT_MBXDELETETRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_MBXDELETETRANSFER_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_MBXDELETETRANSFER_SET_COMMANDCODE(ATEMRAS_PT_MBXDELETETRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_MBXDELETETRANSFER_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_MBXDELETETRANSFER_GET_INSTANCEID(ATEMRAS_PT_MBXDELETETRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_MBXDELETETRANSFER_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_MBXDELETETRANSFER_SET_INSTANCEID(ATEMRAS_PT_MBXDELETETRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_MBXDELETETRANSFER_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_MBXDELETETRANSFER_GET_MBXOBJID(ATEMRAS_PT_MBXDELETETRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_MBXDELETETRANSFER_OFFS_MBXOBJID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_MBXDELETETRANSFER_SET_MBXOBJID(ATEMRAS_PT_MBXDELETETRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_MBXDELETETRANSFER_OFFS_MBXOBJID), dwVal);
} EC_INLINESTOP
 
typedef struct _ATEMRAS_T_COESDODOWNLOADTRANSFER
{
    EC_T_DWORD          dwCommandCode;      /* Command Code */              /* 0x00 */
    EC_T_DWORD          dwInstanceID;       /* Master Instance */           /* 0x04 */
    
    EC_T_DWORD          dwMbxTferId;        /* Id of Mailbox Transfer Obj *//* 0x08 */
    EC_T_DWORD          dwSlaveId;          /* Slave Id */                  /* 0x0C */
    union _t_uIndex
    {
        EC_T_DWORD      dwIndex;                                            /* 0x10 */
        struct _t_sIndex
        {
            EC_T_WORD   wObIndex;           /* object Index */              /* 0x10 */
            EC_T_BYTE   bySubIndex;         /* sub Index */                 /* 0x12 */
            EC_T_BYTE   byReserved;         /* res */                       /* 0x13 */
        } EC_PACKED(1)     sIndex;
    } EC_PACKED(1)         uIndex;
    EC_T_DWORD          dwTimeout;          /* Timeout */                   /* 0x14 */

    EC_T_DWORD          dwSrvResult;        /* Result from server */        /* 0x18 */
    EC_T_DWORD          dwFlags;            /* mailbox transfer flags */    /* 0x1c */

    ATEMRAS_T_MBXTFER   oTferObj;           /* Tfer Obj */                  /* 0x20 */
} EC_PACKED(1) ATEMRAS_T_COESDODOWNLOADTRANSFER, *ATEMRAS_PT_COESDODOWNLOADTRANSFER;

#define ATEMRAS_T_COESDODOWNLOADTRANSFER_SIZE           sizeof(ATEMRAS_T_COESDODOWNLOADTRANSFER)

#define ATEMRAS_COESDODOWNLOADTRANSFER_OFFS_COMMANDCODE ((EC_T_DWORD)0x00)
#define ATEMRAS_COESDODOWNLOADTRANSFER_OFFS_INSTANCEID  ((EC_T_DWORD)0x04)
#define ATEMRAS_COESDODOWNLOADTRANSFER_OFFS_MBXOBJID    ((EC_T_DWORD)0x08)
#define ATEMRAS_COESDODOWNLOADTRANSFER_OFFS_SLAVEID     ((EC_T_DWORD)0x0C)
#define ATEMRAS_COESDODOWNLOADTRANSFER_OFFS_OBINDEX     ((EC_T_DWORD)0x10)
#define ATEMRAS_COESDODOWNLOADTRANSFER_OFFS_OBSUBINDEX  ((EC_T_DWORD)0x12)
#define ATEMRAS_COESDODOWNLOADTRANSFER_OFFS_TIMEOUT     ((EC_T_DWORD)0x14)
#define ATEMRAS_COESDODOWNLOADTRANSFER_OFFS_SRVRESULT   ((EC_T_DWORD)0x18)
#define ATEMRAS_COESDODOWNLOADTRANSFER_OFFS_FLAGS       ((EC_T_DWORD)0x1C)
#define ATEMRAS_COESDODOWNLOADTRANSFER_OFFS_TFEROBJ     ((EC_T_DWORD)0x20)
#define ATEMRAS_COESDODOWNLOADTRANSFER_OFFS_DATA        ((EC_T_DWORD)0x20+ATEMRAS_T_MBXTFER_SIZE)

static EC_INLINESTART EC_T_DWORD ATEMRAS_COESDODOWNLOADTRANSFER_GET_COMMANDCODE(ATEMRAS_PT_COESDODOWNLOADTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDODOWNLOADTRANSFER_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COESDODOWNLOADTRANSFER_SET_COMMANDCODE(ATEMRAS_PT_COESDODOWNLOADTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDODOWNLOADTRANSFER_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_COESDODOWNLOADTRANSFER_GET_INSTANCEID(ATEMRAS_PT_COESDODOWNLOADTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDODOWNLOADTRANSFER_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COESDODOWNLOADTRANSFER_SET_INSTANCEID(ATEMRAS_PT_COESDODOWNLOADTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDODOWNLOADTRANSFER_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_COESDODOWNLOADTRANSFER_GET_MBXOBJID(ATEMRAS_PT_COESDODOWNLOADTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDODOWNLOADTRANSFER_OFFS_MBXOBJID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COESDODOWNLOADTRANSFER_SET_MBXOBJID(ATEMRAS_PT_COESDODOWNLOADTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDODOWNLOADTRANSFER_OFFS_MBXOBJID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_COESDODOWNLOADTRANSFER_GET_SLAVEID(ATEMRAS_PT_COESDODOWNLOADTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDODOWNLOADTRANSFER_OFFS_SLAVEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COESDODOWNLOADTRANSFER_SET_SLAVEID(ATEMRAS_PT_COESDODOWNLOADTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDODOWNLOADTRANSFER_OFFS_SLAVEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_WORD ATEMRAS_COESDODOWNLOADTRANSFER_GET_OBINDEX(ATEMRAS_PT_COESDODOWNLOADTRANSFER p)
{
    return EC_GET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_COESDODOWNLOADTRANSFER_OFFS_OBINDEX));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COESDODOWNLOADTRANSFER_SET_OBINDEX(ATEMRAS_PT_COESDODOWNLOADTRANSFER p, EC_T_WORD wVal)
{
    EC_SET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_COESDODOWNLOADTRANSFER_OFFS_OBINDEX), wVal );
} EC_INLINESTOP
static EC_INLINESTART EC_T_BYTE ATEMRAS_COESDODOWNLOADTRANSFER_GET_OBSUBINDEX(ATEMRAS_PT_COESDODOWNLOADTRANSFER p)
{
    return (EC_T_BYTE)(*((((EC_T_PBYTE)p)+ATEMRAS_COESDODOWNLOADTRANSFER_OFFS_OBSUBINDEX)));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COESDODOWNLOADTRANSFER_SET_OBSUBINDEX(ATEMRAS_PT_COESDODOWNLOADTRANSFER p, EC_T_BYTE byVal)
{
    (*((((EC_T_PBYTE)p)+ATEMRAS_COESDODOWNLOADTRANSFER_OFFS_OBSUBINDEX))) = byVal;
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_COESDODOWNLOADTRANSFER_GET_TIMEOUT(ATEMRAS_PT_COESDODOWNLOADTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDODOWNLOADTRANSFER_OFFS_TIMEOUT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COESDODOWNLOADTRANSFER_SET_TIMEOUT(ATEMRAS_PT_COESDODOWNLOADTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDODOWNLOADTRANSFER_OFFS_TIMEOUT), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_COESDODOWNLOADTRANSFER_GET_SRVRESULT(ATEMRAS_PT_COESDODOWNLOADTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDODOWNLOADTRANSFER_OFFS_SRVRESULT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COESDODOWNLOADTRANSFER_SET_SRVRESULT(ATEMRAS_PT_COESDODOWNLOADTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDODOWNLOADTRANSFER_OFFS_SRVRESULT), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_COESDODOWNLOADTRANSFER_GET_FLAGS(ATEMRAS_PT_COESDODOWNLOADTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDODOWNLOADTRANSFER_OFFS_FLAGS));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COESDODOWNLOADTRANSFER_SET_FLAGS(ATEMRAS_PT_COESDODOWNLOADTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDODOWNLOADTRANSFER_OFFS_FLAGS), dwVal);
} EC_INLINESTOP
static EC_INLINESTART ATEMRAS_PT_MBXTFER ATEMRAS_COESDODOWNLOADTRANSFER_TFEROBJ(ATEMRAS_PT_COESDODOWNLOADTRANSFER p)
{
    return (ATEMRAS_PT_MBXTFER)((((EC_T_PBYTE)p)+ATEMRAS_COESDODOWNLOADTRANSFER_OFFS_TFEROBJ));
} EC_INLINESTOP
static EC_INLINESTART EC_T_PBYTE ATEMRAS_COESDODOWNLOADTRANSFER_DATA(ATEMRAS_PT_COESDODOWNLOADTRANSFER p)
{
    return (EC_T_PBYTE)((((EC_T_PBYTE)p)+ATEMRAS_COESDODOWNLOADTRANSFER_OFFS_DATA));
} EC_INLINESTOP

typedef struct _ATEMRAS_T_COESDOUPLOADTRANSFER
{
    EC_T_DWORD          dwCommandCode;      /* Command Code */              /* 0x00 */
    EC_T_DWORD          dwInstanceID;       /* Master Instance */           /* 0x04 */
    
    EC_T_DWORD          dwMbxTferId;        /* Id of Mailbox Transfer Obj *//* 0x08 */
    EC_T_DWORD          dwSlaveId;          /* Slave Id */                  /* 0x0C */
    union _t_uIndex
    {
        EC_T_DWORD      dwIndex;                                            /* 0x10 */
        struct _t_sIndex
        {
            EC_T_WORD   wObIndex;           /* object Index */              /* 0x10 */
            EC_T_BYTE   bySubIndex;         /* sub Index */                 /* 0x12 */
            EC_T_BYTE   byReserved;         /* res */                       /* 0x13 */
        } EC_PACKED(1)     sIndex;
    } EC_PACKED(1)         uIndex;
    EC_T_DWORD          dwTimeout;          /* Timeout */                   /* 0x14 */

    EC_T_DWORD          dwSrvResult;        /* Result from server */        /* 0x18 */

    EC_T_DWORD          dwFlags;            /* mailbox transfer flags */    /* 0x1C */
    ATEMRAS_T_MBXTFER   oTferObj;           /* Tfer Obj */                  /* 0x20 */
} EC_PACKED(1) ATEMRAS_T_COESDOUPLOADTRANSFER, *ATEMRAS_PT_COESDOUPLOADTRANSFER;

#define ATEMRAS_T_COESDOUPLOADTRANSFER_SIZE             sizeof(ATEMRAS_T_COESDOUPLOADTRANSFER)

#define ATEMRAS_COESDOUPLOADTRANSFER_OFFS_COMMANDCODE ((EC_T_DWORD)0x00)
#define ATEMRAS_COESDOUPLOADTRANSFER_OFFS_INSTANCEID  ((EC_T_DWORD)0x04)
#define ATEMRAS_COESDOUPLOADTRANSFER_OFFS_MBXOBJID    ((EC_T_DWORD)0x08)
#define ATEMRAS_COESDOUPLOADTRANSFER_OFFS_SLAVEID     ((EC_T_DWORD)0x0C)
#define ATEMRAS_COESDOUPLOADTRANSFER_OFFS_OBINDEX     ((EC_T_DWORD)0x10)
#define ATEMRAS_COESDOUPLOADTRANSFER_OFFS_OBSUBINDEX  ((EC_T_DWORD)0x12)
#define ATEMRAS_COESDOUPLOADTRANSFER_OFFS_TIMEOUT     ((EC_T_DWORD)0x14)
#define ATEMRAS_COESDOUPLOADTRANSFER_OFFS_SRVRESULT   ((EC_T_DWORD)0x18)
#define ATEMRAS_COESDOUPLOADTRANSFER_OFFS_FLAGS       ((EC_T_DWORD)0x1C)
#define ATEMRAS_COESDOUPLOADTRANSFER_OFFS_TFEROBJ     ((EC_T_DWORD)0x20)
#define ATEMRAS_COESDOUPLOADTRANSFER_OFFS_DATA        ((EC_T_DWORD)0x20+ATEMRAS_T_MBXTFER_SIZE)

static EC_INLINESTART EC_T_DWORD ATEMRAS_COESDOUPLOADTRANSFER_GET_COMMANDCODE(ATEMRAS_PT_COESDOUPLOADTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDOUPLOADTRANSFER_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COESDOUPLOADTRANSFER_SET_COMMANDCODE(ATEMRAS_PT_COESDOUPLOADTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDOUPLOADTRANSFER_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_COESDOUPLOADTRANSFER_GET_INSTANCEID(ATEMRAS_PT_COESDOUPLOADTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDOUPLOADTRANSFER_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COESDOUPLOADTRANSFER_SET_INSTANCEID(ATEMRAS_PT_COESDOUPLOADTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDOUPLOADTRANSFER_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_COESDOUPLOADTRANSFER_GET_MBXOBJID(ATEMRAS_PT_COESDOUPLOADTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDOUPLOADTRANSFER_OFFS_MBXOBJID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COESDOUPLOADTRANSFER_SET_MBXOBJID(ATEMRAS_PT_COESDOUPLOADTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDOUPLOADTRANSFER_OFFS_MBXOBJID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_COESDOUPLOADTRANSFER_GET_SLAVEID(ATEMRAS_PT_COESDOUPLOADTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDOUPLOADTRANSFER_OFFS_SLAVEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COESDOUPLOADTRANSFER_SET_SLAVEID(ATEMRAS_PT_COESDOUPLOADTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDOUPLOADTRANSFER_OFFS_SLAVEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_WORD ATEMRAS_COESDOUPLOADTRANSFER_GET_OBINDEX(ATEMRAS_PT_COESDOUPLOADTRANSFER p)
{
    return EC_GET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_COESDOUPLOADTRANSFER_OFFS_OBINDEX));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COESDOUPLOADTRANSFER_SET_OBINDEX(ATEMRAS_PT_COESDOUPLOADTRANSFER p, EC_T_WORD wVal)
{
    EC_SET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_COESDOUPLOADTRANSFER_OFFS_OBINDEX), wVal );
} EC_INLINESTOP
static EC_INLINESTART EC_T_BYTE ATEMRAS_COESDOUPLOADTRANSFER_GET_OBSUBINDEX(ATEMRAS_PT_COESDOUPLOADTRANSFER p)
{
    return (EC_T_BYTE)(*((((EC_T_PBYTE)p)+ATEMRAS_COESDOUPLOADTRANSFER_OFFS_OBSUBINDEX)));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COESDOUPLOADTRANSFER_SET_OBSUBINDEX(ATEMRAS_PT_COESDOUPLOADTRANSFER p, EC_T_BYTE byVal)
{
    (*((((EC_T_PBYTE)p)+ATEMRAS_COESDOUPLOADTRANSFER_OFFS_OBSUBINDEX))) = byVal;
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_COESDOUPLOADTRANSFER_GET_TIMEOUT(ATEMRAS_PT_COESDOUPLOADTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDOUPLOADTRANSFER_OFFS_TIMEOUT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COESDOUPLOADTRANSFER_SET_TIMEOUT(ATEMRAS_PT_COESDOUPLOADTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDOUPLOADTRANSFER_OFFS_TIMEOUT), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_COESDOUPLOADTRANSFER_GET_SRVRESULT(ATEMRAS_PT_COESDOUPLOADTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDOUPLOADTRANSFER_OFFS_SRVRESULT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COESDOUPLOADTRANSFER_SET_SRVRESULT(ATEMRAS_PT_COESDOUPLOADTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDOUPLOADTRANSFER_OFFS_SRVRESULT), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_COESDOUPLOADTRANSFER_GET_FLAGS(ATEMRAS_PT_COESDOUPLOADTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDOUPLOADTRANSFER_OFFS_FLAGS));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COESDOUPLOADTRANSFER_SET_FLAGS(ATEMRAS_PT_COESDOUPLOADTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDOUPLOADTRANSFER_OFFS_FLAGS), dwVal);
} EC_INLINESTOP
static EC_INLINESTART ATEMRAS_PT_MBXTFER ATEMRAS_COESDOUPLOADTRANSFER_TFEROBJ(ATEMRAS_PT_COESDOUPLOADTRANSFER p)
{
    return (ATEMRAS_PT_MBXTFER)((((EC_T_PBYTE)p)+ATEMRAS_COESDOUPLOADTRANSFER_OFFS_TFEROBJ));
} EC_INLINESTOP
static EC_INLINESTART EC_T_PBYTE ATEMRAS_COESDOUPLOADTRANSFER_DATA(ATEMRAS_PT_COESDOUPLOADTRANSFER p)
{
    return (EC_T_PBYTE)((((EC_T_PBYTE)p)+ATEMRAS_COESDOUPLOADTRANSFER_OFFS_DATA));
} EC_INLINESTOP

typedef struct _ATEMRAS_T_COEGETODLTRANSFER
{
    EC_T_DWORD          dwCommandCode;      /* Command Code */              /* 0x00 */
    EC_T_DWORD          dwInstanceID;       /* Master Instance */           /* 0x04 */
    
    EC_T_DWORD          dwMbxTferId;        /* Id of Mailbox Transfer Obj *//* 0x08 */
    EC_T_DWORD          dwSlaveId;          /* Slave Id */                  /* 0x0C */
    
    EC_T_DWORD          dwListType;         /* Type of List */              /* 0x10 */

    EC_T_DWORD          dwTimeout;          /* Timeout */                   /* 0x14 */

    EC_T_DWORD          dwSrvResult;        /* Result from server */        /* 0x18 */

    ATEMRAS_T_MBXTFER   oTferObj;           /* Tfer Obj */                  /* 0x1C */
} EC_PACKED(1) ATEMRAS_T_COEGETODLTRANSFER, *ATEMRAS_PT_COEGETODLTRANSFER;

#define ATEMRAS_T_COEGETODLTRANSFER_SIZE             sizeof(ATEMRAS_T_COEGETODLTRANSFER)

#define ATEMRAS_COEGETODLTRANSFER_OFFS_COMMANDCODE ((EC_T_DWORD)0x00)
#define ATEMRAS_COEGETODLTRANSFER_OFFS_INSTANCEID  ((EC_T_DWORD)0x04)
#define ATEMRAS_COEGETODLTRANSFER_OFFS_MBXOBJID    ((EC_T_DWORD)0x08)
#define ATEMRAS_COEGETODLTRANSFER_OFFS_SLAVEID     ((EC_T_DWORD)0x0C)
#define ATEMRAS_COEGETODLTRANSFER_OFFS_LISTTYPE    ((EC_T_DWORD)0x10)
#define ATEMRAS_COEGETODLTRANSFER_OFFS_TIMEOUT     ((EC_T_DWORD)0x14)
#define ATEMRAS_COEGETODLTRANSFER_OFFS_SRVRESULT   ((EC_T_DWORD)0x18)
#define ATEMRAS_COEGETODLTRANSFER_OFFS_TFEROBJ     ((EC_T_DWORD)0x1C)
#define ATEMRAS_COEGETODLTRANSFER_OFFS_DATA        ((EC_T_DWORD)0x1C+ATEMRAS_T_MBXTFER_SIZE)

static EC_INLINESTART EC_T_DWORD ATEMRAS_COEGETODLTRANSFER_GET_COMMANDCODE(ATEMRAS_PT_COEGETODLTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COEGETODLTRANSFER_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COEGETODLTRANSFER_SET_COMMANDCODE(ATEMRAS_PT_COEGETODLTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COEGETODLTRANSFER_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_COEGETODLTRANSFER_GET_INSTANCEID(ATEMRAS_PT_COEGETODLTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COEGETODLTRANSFER_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COEGETODLTRANSFER_SET_INSTANCEID(ATEMRAS_PT_COEGETODLTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COEGETODLTRANSFER_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_COEGETODLTRANSFER_GET_MBXOBJID(ATEMRAS_PT_COEGETODLTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COEGETODLTRANSFER_OFFS_MBXOBJID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COEGETODLTRANSFER_SET_MBXOBJID(ATEMRAS_PT_COEGETODLTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COEGETODLTRANSFER_OFFS_MBXOBJID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_COEGETODLTRANSFER_GET_SLAVEID(ATEMRAS_PT_COEGETODLTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COEGETODLTRANSFER_OFFS_SLAVEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COEGETODLTRANSFER_SET_SLAVEID(ATEMRAS_PT_COEGETODLTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COEGETODLTRANSFER_OFFS_SLAVEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_COEGETODLTRANSFER_GET_LISTTYPE(ATEMRAS_PT_COEGETODLTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COEGETODLTRANSFER_OFFS_LISTTYPE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COEGETODLTRANSFER_SET_LISTTYPE(ATEMRAS_PT_COEGETODLTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COEGETODLTRANSFER_OFFS_LISTTYPE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_COEGETODLTRANSFER_GET_TIMEOUT(ATEMRAS_PT_COEGETODLTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COEGETODLTRANSFER_OFFS_TIMEOUT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COEGETODLTRANSFER_SET_TIMEOUT(ATEMRAS_PT_COEGETODLTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COEGETODLTRANSFER_OFFS_TIMEOUT), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_COEGETODLTRANSFER_GET_SRVRESULT(ATEMRAS_PT_COEGETODLTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COEGETODLTRANSFER_OFFS_SRVRESULT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COEGETODLTRANSFER_SET_SRVRESULT(ATEMRAS_PT_COEGETODLTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COEGETODLTRANSFER_OFFS_SRVRESULT), dwVal);
} EC_INLINESTOP
static EC_INLINESTART ATEMRAS_PT_MBXTFER ATEMRAS_COEGETODLTRANSFER_TFEROBJ(ATEMRAS_PT_COEGETODLTRANSFER p)
{
    return (ATEMRAS_PT_MBXTFER)((((EC_T_PBYTE)p)+ATEMRAS_COEGETODLTRANSFER_OFFS_TFEROBJ));
} EC_INLINESTOP
static EC_INLINESTART EC_T_PBYTE ATEMRAS_COEGETODLTRANSFER_DATA(ATEMRAS_PT_COEGETODLTRANSFER p)
{
    return (EC_T_PBYTE)((((EC_T_PBYTE)p)+ATEMRAS_COEGETODLTRANSFER_OFFS_DATA));
} EC_INLINESTOP

typedef struct _ATEMRAS_T_COEGETOBDESCTRANSFER
{
    EC_T_DWORD          dwCommandCode;      /* Command Code */              /* 0x00 */
    EC_T_DWORD          dwInstanceID;       /* Master Instance */           /* 0x04 */
    
    EC_T_DWORD          dwMbxTferId;        /* Id of Mailbox Transfer Obj *//* 0x08 */
    EC_T_DWORD          dwSlaveId;          /* Slave Id */                  /* 0x0C */
    
    EC_T_DWORD          dwObIndex;          /* Obj Index (16B) */           /* 0x10 */
    
    EC_T_DWORD          dwTimeout;          /* Timeout */                   /* 0x14 */
    
    EC_T_DWORD          dwSrvResult;        /* Result from server */        /* 0x18 */
    
    ATEMRAS_T_MBXTFER   oTferObj;           /* Tfer Obj */                  /* 0x1C */
} EC_PACKED(1) ATEMRAS_T_COEGETOBDESCTRANSFER, *ATEMRAS_PT_COEGETOBDESCTRANSFER;

#define ATEMRAS_T_COEGETOBDESCTRANSFER_SIZE             sizeof(ATEMRAS_T_COEGETOBDESCTRANSFER)

#define ATEMRAS_COEGETOBDESCTRANSFER_OFFS_COMMANDCODE ((EC_T_DWORD)0x00)
#define ATEMRAS_COEGETOBDESCTRANSFER_OFFS_INSTANCEID  ((EC_T_DWORD)0x04)
#define ATEMRAS_COEGETOBDESCTRANSFER_OFFS_MBXOBJID    ((EC_T_DWORD)0x08)
#define ATEMRAS_COEGETOBDESCTRANSFER_OFFS_SLAVEID     ((EC_T_DWORD)0x0C)
#define ATEMRAS_COEGETOBDESCTRANSFER_OFFS_OBINDEX     ((EC_T_DWORD)0x10)
#define ATEMRAS_COEGETOBDESCTRANSFER_OFFS_TIMEOUT     ((EC_T_DWORD)0x14)
#define ATEMRAS_COEGETOBDESCTRANSFER_OFFS_SRVRESULT   ((EC_T_DWORD)0x18)
#define ATEMRAS_COEGETOBDESCTRANSFER_OFFS_TFEROBJ     ((EC_T_DWORD)0x1C)
#define ATEMRAS_COEGETOBDESCTRANSFER_OFFS_DATA        ((EC_T_DWORD)0x1C+ATEMRAS_T_MBXTFER_SIZE)

static EC_INLINESTART EC_T_DWORD ATEMRAS_COEGETOBDESCTRANSFER_GET_COMMANDCODE(ATEMRAS_PT_COEGETOBDESCTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COEGETOBDESCTRANSFER_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COEGETOBDESCTRANSFER_SET_COMMANDCODE(ATEMRAS_PT_COEGETOBDESCTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COEGETOBDESCTRANSFER_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_COEGETOBDESCTRANSFER_GET_INSTANCEID(ATEMRAS_PT_COEGETOBDESCTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COEGETOBDESCTRANSFER_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COEGETOBDESCTRANSFER_SET_INSTANCEID(ATEMRAS_PT_COEGETOBDESCTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COEGETOBDESCTRANSFER_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_COEGETOBDESCTRANSFER_GET_MBXOBJID(ATEMRAS_PT_COEGETOBDESCTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COEGETOBDESCTRANSFER_OFFS_MBXOBJID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COEGETOBDESCTRANSFER_SET_MBXOBJID(ATEMRAS_PT_COEGETOBDESCTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COEGETOBDESCTRANSFER_OFFS_MBXOBJID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_COEGETOBDESCTRANSFER_GET_SLAVEID(ATEMRAS_PT_COEGETOBDESCTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COEGETOBDESCTRANSFER_OFFS_SLAVEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COEGETOBDESCTRANSFER_SET_SLAVEID(ATEMRAS_PT_COEGETOBDESCTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COEGETOBDESCTRANSFER_OFFS_SLAVEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_COEGETOBDESCTRANSFER_GET_OBINDEX(ATEMRAS_PT_COEGETOBDESCTRANSFER p)
{
    return (EC_T_DWORD)(EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COEGETOBDESCTRANSFER_OFFS_OBINDEX))&0xffff);
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COEGETOBDESCTRANSFER_SET_OBINDEX(ATEMRAS_PT_COEGETOBDESCTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COEGETOBDESCTRANSFER_OFFS_OBINDEX), (dwVal&0xffff));
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_COEGETOBDESCTRANSFER_GET_TIMEOUT(ATEMRAS_PT_COEGETOBDESCTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COEGETOBDESCTRANSFER_OFFS_TIMEOUT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COEGETOBDESCTRANSFER_SET_TIMEOUT(ATEMRAS_PT_COEGETOBDESCTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COEGETOBDESCTRANSFER_OFFS_TIMEOUT), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_COEGETOBDESCTRANSFER_GET_SRVRESULT(ATEMRAS_PT_COEGETOBDESCTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COEGETOBDESCTRANSFER_OFFS_SRVRESULT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COEGETOBDESCTRANSFER_SET_SRVRESULT(ATEMRAS_PT_COEGETOBDESCTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COEGETOBDESCTRANSFER_OFFS_SRVRESULT), dwVal);
} EC_INLINESTOP
static EC_INLINESTART ATEMRAS_PT_MBXTFER ATEMRAS_COEGETOBDESCTRANSFER_TFEROBJ(ATEMRAS_PT_COEGETOBDESCTRANSFER p)
{
    return (ATEMRAS_PT_MBXTFER)((((EC_T_PBYTE)p)+ATEMRAS_COEGETOBDESCTRANSFER_OFFS_TFEROBJ));
} EC_INLINESTOP
static EC_INLINESTART EC_T_PBYTE ATEMRAS_COEGETOBDESCTRANSFER_DATA(ATEMRAS_PT_COEGETOBDESCTRANSFER p)
{
    return (EC_T_PBYTE)((((EC_T_PBYTE)p)+ATEMRAS_COEGETOBDESCTRANSFER_OFFS_DATA));
} EC_INLINESTOP

typedef struct _ATEMRAS_T_COEGETENTDESCTRANSFER
{
    EC_T_DWORD          dwCommandCode;      /* Command Code */              /* 0x00 */
    EC_T_DWORD          dwInstanceID;       /* Master Instance */           /* 0x04 */
    
    EC_T_DWORD          dwMbxTferId;        /* Id of Mailbox Transfer Obj *//* 0x08 */
    EC_T_DWORD          dwSlaveId;          /* Slave Id */                  /* 0x0C */
    union _t_uIndex
    {
        EC_T_DWORD      dwIndex;                                            /* 0x10 */
        struct _t_sIndex
        {
            EC_T_WORD   wObIndex;           /* object Index */              /* 0x10 */
            EC_T_BYTE   bySubIndex;         /* sub Index */                 /* 0x12 */
            EC_T_BYTE   byValueInfo;        /* Value Info */                /* 0x13 */
        } EC_PACKED(1)     sIndex;
    } EC_PACKED(1)         uIndex;
    EC_T_DWORD          dwTimeout;          /* Timeout */                   /* 0x14 */
    
    EC_T_DWORD          dwSrvResult;        /* Result from server */        /* 0x18 */
    
    ATEMRAS_T_MBXTFER   oTferObj;           /* Tfer Obj */                  /* 0x1C */
} EC_PACKED(1) ATEMRAS_T_COEGETENTDESCTRANSFER, *ATEMRAS_PT_COEGETENTDESCTRANSFER;

#define ATEMRAS_T_COEGETENTDESCTRANSFER_SIZE                sizeof(ATEMRAS_T_COEGETENTDESCTRANSFER)

#define ATEMRAS_COEGETENTDESCTRANSFER_OFFS_COMMANDCODE ((EC_T_DWORD)0x00)
#define ATEMRAS_COEGETENTDESCTRANSFER_OFFS_INSTANCEID  ((EC_T_DWORD)0x04)
#define ATEMRAS_COEGETENTDESCTRANSFER_OFFS_MBXOBJID    ((EC_T_DWORD)0x08)
#define ATEMRAS_COEGETENTDESCTRANSFER_OFFS_SLAVEID     ((EC_T_DWORD)0x0C)
#define ATEMRAS_COEGETENTDESCTRANSFER_OFFS_OBINDEX     ((EC_T_DWORD)0x10)
#define ATEMRAS_COEGETENTDESCTRANSFER_OFFS_OBSUBINDEX  ((EC_T_DWORD)0x12)
#define ATEMRAS_COEGETENTDESCTRANSFER_OFFS_VALUEINFO   ((EC_T_DWORD)0x13)
#define ATEMRAS_COEGETENTDESCTRANSFER_OFFS_TIMEOUT     ((EC_T_DWORD)0x14)
#define ATEMRAS_COEGETENTDESCTRANSFER_OFFS_SRVRESULT   ((EC_T_DWORD)0x18)
#define ATEMRAS_COEGETENTDESCTRANSFER_OFFS_TFEROBJ     ((EC_T_DWORD)0x1C)
#define ATEMRAS_COEGETENTDESCTRANSFER_OFFS_DATA        ((EC_T_DWORD)0x1C+ATEMRAS_T_MBXTFER_SIZE)

static EC_INLINESTART EC_T_DWORD ATEMRAS_COEGETENTDESCTRANSFER_GET_COMMANDCODE(ATEMRAS_PT_COEGETENTDESCTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COEGETENTDESCTRANSFER_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COEGETENTDESCTRANSFER_SET_COMMANDCODE(ATEMRAS_PT_COEGETENTDESCTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COEGETENTDESCTRANSFER_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_COEGETENTDESCTRANSFER_GET_INSTANCEID(ATEMRAS_PT_COEGETENTDESCTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COEGETENTDESCTRANSFER_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COEGETENTDESCTRANSFER_SET_INSTANCEID(ATEMRAS_PT_COEGETENTDESCTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COEGETENTDESCTRANSFER_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_COEGETENTDESCTRANSFER_GET_MBXOBJID(ATEMRAS_PT_COEGETENTDESCTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COEGETENTDESCTRANSFER_OFFS_MBXOBJID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COEGETENTDESCTRANSFER_SET_MBXOBJID(ATEMRAS_PT_COEGETENTDESCTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COEGETENTDESCTRANSFER_OFFS_MBXOBJID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_COEGETENTDESCTRANSFER_GET_SLAVEID(ATEMRAS_PT_COEGETENTDESCTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COEGETENTDESCTRANSFER_OFFS_SLAVEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COEGETENTDESCTRANSFER_SET_SLAVEID(ATEMRAS_PT_COEGETENTDESCTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COEGETENTDESCTRANSFER_OFFS_SLAVEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_WORD ATEMRAS_COEGETENTDESCTRANSFER_GET_OBINDEX(ATEMRAS_PT_COEGETENTDESCTRANSFER p)
{
    return EC_GET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_COEGETENTDESCTRANSFER_OFFS_OBINDEX));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COEGETENTDESCTRANSFER_SET_OBINDEX(ATEMRAS_PT_COEGETENTDESCTRANSFER p, EC_T_WORD wVal)
{
    EC_SET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_COEGETENTDESCTRANSFER_OFFS_OBINDEX), wVal );
} EC_INLINESTOP
static EC_INLINESTART EC_T_BYTE ATEMRAS_COEGETENTDESCTRANSFER_GET_OBSUBINDEX(ATEMRAS_PT_COEGETENTDESCTRANSFER p)
{
    return (EC_T_BYTE)(*((((EC_T_PBYTE)p)+ATEMRAS_COEGETENTDESCTRANSFER_OFFS_OBSUBINDEX)));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COEGETENTDESCTRANSFER_SET_OBSUBINDEX(ATEMRAS_PT_COEGETENTDESCTRANSFER p, EC_T_BYTE byVal)
{
    (*((((EC_T_PBYTE)p)+ATEMRAS_COEGETENTDESCTRANSFER_OFFS_OBSUBINDEX))) = byVal;
} EC_INLINESTOP
static EC_INLINESTART EC_T_BYTE ATEMRAS_COEGETENTDESCTRANSFER_GET_VALUEINFO(ATEMRAS_PT_COEGETENTDESCTRANSFER p)
{
    return (EC_T_BYTE)(*((((EC_T_PBYTE)p)+ATEMRAS_COEGETENTDESCTRANSFER_OFFS_VALUEINFO)));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COEGETENTDESCTRANSFER_SET_VALUEINFO(ATEMRAS_PT_COEGETENTDESCTRANSFER p, EC_T_BYTE byVal)
{
    (*((((EC_T_PBYTE)p)+ATEMRAS_COEGETENTDESCTRANSFER_OFFS_VALUEINFO))) = byVal;
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_COEGETENTDESCTRANSFER_GET_TIMEOUT(ATEMRAS_PT_COEGETENTDESCTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COEGETENTDESCTRANSFER_OFFS_TIMEOUT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COEGETENTDESCTRANSFER_SET_TIMEOUT(ATEMRAS_PT_COEGETENTDESCTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COEGETENTDESCTRANSFER_OFFS_TIMEOUT), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_COEGETENTDESCTRANSFER_GET_SRVRESULT(ATEMRAS_PT_COEGETENTDESCTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COEGETENTDESCTRANSFER_OFFS_SRVRESULT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COEGETENTDESCTRANSFER_SET_SRVRESULT(ATEMRAS_PT_COEGETENTDESCTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COEGETENTDESCTRANSFER_OFFS_SRVRESULT), dwVal);
} EC_INLINESTOP
static EC_INLINESTART ATEMRAS_PT_MBXTFER ATEMRAS_COEGETENTDESCTRANSFER_TFEROBJ(ATEMRAS_PT_COEGETENTDESCTRANSFER p)
{
    return (ATEMRAS_PT_MBXTFER)((((EC_T_PBYTE)p)+ATEMRAS_COEGETENTDESCTRANSFER_OFFS_TFEROBJ));
} EC_INLINESTOP
static EC_INLINESTART EC_T_PBYTE ATEMRAS_COEGETENTDESCTRANSFER_DATA(ATEMRAS_PT_COEGETENTDESCTRANSFER p)
{
    return (EC_T_PBYTE)((((EC_T_PBYTE)p)+ATEMRAS_COEGETENTDESCTRANSFER_OFFS_DATA));
} EC_INLINESTOP

typedef struct _ATEMRAS_T_PROCESSDATATRANSFER
{
    EC_T_DWORD          dwCommandCode;      /* Command Code */              /* 0x00 */
    EC_T_DWORD          dwInstanceID;       /* Master Instance */           /* 0x04 */
    
    EC_T_BOOL           bDirection;         /* 1:Out Data, 0:In Data */     /* 0x08 */
    EC_T_DWORD          dwOffset;           /* Process data offset */       /* 0x0C */
    EC_T_DWORD          dwLen;              /* Process data length */       /* 0x10 */
    EC_T_DWORD          dwTimeout;          /* Call Timeout */              /* 0x14 */
    EC_T_DWORD          dwSrvResult;        /* Result from server */        /* 0x18 */
} EC_PACKED(1) ATEMRAS_T_PROCESSDATATRANSFER, *ATEMRAS_PT_PROCESSDATATRANSFER;

#define ATEMRAS_T_PROCESSDATATRANSFER_SIZE                sizeof(ATEMRAS_T_PROCESSDATATRANSFER)

#define ATEMRAS_PROCESSDATATRANSFER_OFFS_COMMANDCODE        ((EC_T_DWORD)0x00)
#define ATEMRAS_PROCESSDATATRANSFER_OFFS_INSTANCEID         ((EC_T_DWORD)0x04)
#define ATEMRAS_PROCESSDATATRANSFER_OFFS_DIRECTION          ((EC_T_DWORD)0x08)
#define ATEMRAS_PROCESSDATATRANSFER_OFFS_OFFSET             ((EC_T_DWORD)0x0C)
#define ATEMRAS_PROCESSDATATRANSFER_OFFS_LENGTH             ((EC_T_DWORD)0x10)
#define ATEMRAS_PROCESSDATATRANSFER_OFFS_TIMEOUT            ((EC_T_DWORD)0x14)
#define ATEMRAS_PROCESSDATATRANSFER_OFFS_SRVRESULT          ((EC_T_DWORD)0x18)
#define ATEMRAS_PROCESSDATATRANSFER_OFFS_DATA               ((EC_T_DWORD)0x1C)

static EC_INLINESTART EC_T_DWORD ATEMRAS_PROCESSDATATRANSFER_GET_COMMANDCODE(ATEMRAS_PT_PROCESSDATATRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_PROCESSDATATRANSFER_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_PROCESSDATATRANSFER_SET_COMMANDCODE(ATEMRAS_PT_PROCESSDATATRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_PROCESSDATATRANSFER_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_PROCESSDATATRANSFER_GET_INSTANCEID(ATEMRAS_PT_PROCESSDATATRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_PROCESSDATATRANSFER_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_PROCESSDATATRANSFER_SET_INSTANCEID(ATEMRAS_PT_PROCESSDATATRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_PROCESSDATATRANSFER_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_BOOL ATEMRAS_PROCESSDATATRANSFER_GET_DIRECTION(ATEMRAS_PT_PROCESSDATATRANSFER p)
{
    return (EC_T_BOOL)EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_PROCESSDATATRANSFER_OFFS_DIRECTION));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_PROCESSDATATRANSFER_SET_DIRECTION(ATEMRAS_PT_PROCESSDATATRANSFER p, EC_T_BOOL bVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_PROCESSDATATRANSFER_OFFS_DIRECTION), ((EC_T_DWORD)bVal));
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_PROCESSDATATRANSFER_GET_OFFSET(ATEMRAS_PT_PROCESSDATATRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_PROCESSDATATRANSFER_OFFS_OFFSET));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_PROCESSDATATRANSFER_SET_OFFSET(ATEMRAS_PT_PROCESSDATATRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_PROCESSDATATRANSFER_OFFS_OFFSET), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_PROCESSDATATRANSFER_GET_LENGTH(ATEMRAS_PT_PROCESSDATATRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_PROCESSDATATRANSFER_OFFS_LENGTH));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_PROCESSDATATRANSFER_SET_LENGTH(ATEMRAS_PT_PROCESSDATATRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_PROCESSDATATRANSFER_OFFS_LENGTH), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_PROCESSDATATRANSFER_GET_TIMEOUT(ATEMRAS_PT_PROCESSDATATRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_PROCESSDATATRANSFER_OFFS_TIMEOUT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_PROCESSDATATRANSFER_SET_TIMEOUT(ATEMRAS_PT_PROCESSDATATRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_PROCESSDATATRANSFER_OFFS_TIMEOUT), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_PROCESSDATATRANSFER_GET_SRVRESULT(ATEMRAS_PT_PROCESSDATATRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_PROCESSDATATRANSFER_OFFS_SRVRESULT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_PROCESSDATATRANSFER_SET_SRVRESULT(ATEMRAS_PT_PROCESSDATATRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_PROCESSDATATRANSFER_OFFS_SRVRESULT), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_PBYTE ATEMRAS_PROCESSDATATRANSFER_DATA(ATEMRAS_PT_PROCESSDATATRANSFER p)
{
    return (EC_T_PBYTE)((((EC_T_PBYTE)p)+ATEMRAS_PROCESSDATATRANSFER_OFFS_DATA));
} EC_INLINESTOP

typedef struct _ATEMRAS_T_NOTIFICATIONTRANSFER
{
    EC_T_DWORD   dwInstanceID;      /* Master Instance */           /* 0x00 */
    EC_T_DWORD   dwClientID;        /* Client Instance */           /* 0x04 */
    EC_T_DWORD   dwCode;            /* Notification Code */         /* 0x08 */
    EC_T_DWORD   dwInBufOffset;     /* Offset of In Data Buffer */  /* 0x0C */
    EC_T_DWORD   dwInBufSize;       /* Size of In Buffer */         /* 0x10 */
} EC_PACKED(1) ATEMRAS_T_NOTIFICATIONTRANSFER, *ATEMRAS_PT_NOTIFICATIONTRANSFER;

#define ATEMRAS_T_NOTIFICATIONTRANSFER_SIZE    sizeof(ATEMRAS_T_NOTIFICATIONTRANSFER)

#define ATEMRAS_NOTIF_OFFS_INSTANCEID       ((EC_T_DWORD)0x00)
#define ATEMRAS_NOTIF_OFFS_CLIENTID         ((EC_T_DWORD)0x04)
#define ATEMRAS_NOTIF_OFFS_CODE             ((EC_T_DWORD)0x08)

#define ATEMRAS_NOTIF_OFFS_INBUFOFFSET      ((EC_T_DWORD)0x0C)
#define ATEMRAS_NOTIF_OFFS_INBUFSIZE        ((EC_T_DWORD)0x10)

#define ATEMRAS_NOTIF_OFFS_DATA             ((EC_T_DWORD)0x14)

static EC_INLINESTART EC_T_DWORD ATEMRAS_NOTIF_GET_INSTANCEID(ATEMRAS_PT_NOTIFICATIONTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_NOTIF_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_NOTIF_SET_INSTANCEID(ATEMRAS_PT_NOTIFICATIONTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_NOTIF_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_NOTIF_GET_CLIENTID(ATEMRAS_PT_NOTIFICATIONTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_NOTIF_OFFS_CLIENTID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_NOTIF_SET_CLIENTID(ATEMRAS_PT_NOTIFICATIONTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_NOTIF_OFFS_CLIENTID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_NOTIF_GET_CODE(ATEMRAS_PT_NOTIFICATIONTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_NOTIF_OFFS_CODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_NOTIF_SET_CODE(ATEMRAS_PT_NOTIFICATIONTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_NOTIF_OFFS_CODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_NOTIF_GET_INBUFOFFSET(ATEMRAS_PT_NOTIFICATIONTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_NOTIF_OFFS_INBUFOFFSET));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_NOTIF_SET_INBUFFOFFSET(ATEMRAS_PT_NOTIFICATIONTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_NOTIF_OFFS_INBUFOFFSET), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_NOTIF_GET_INBUFSIZE(ATEMRAS_PT_NOTIFICATIONTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_NOTIF_OFFS_INBUFSIZE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_NOTIF_SET_INBUFSIZE(ATEMRAS_PT_NOTIFICATIONTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_NOTIF_OFFS_INBUFSIZE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_PBYTE ATEMRAS_NOTIF_DATA(ATEMRAS_PT_NOTIFICATIONTRANSFER p)
{
    return ((EC_T_PBYTE)(((EC_T_PBYTE)p)+ATEMRAS_NOTIF_OFFS_DATA));
} EC_INLINESTOP

typedef struct _ATEMRAS_T_MBXNOTIFICATIONTRANSFER
{
    EC_T_DWORD          dwMbxTferId;        /* Id of Mailbox Transfer Obj *//* 0x00 */
    ATEMRAS_T_MBXTFER   oTferObj;           /* Tfer Obj */                  /* 0x04 */
} EC_PACKED(1) ATEMRAS_T_MBXNOTIFICATIONTRANSFER, *ATEMRAS_PT_MBXNOTIFICATIONTRANSFER;

#define ATEMRAS_T_MBXNOTIFICATIONTRANSFER_SIZE          sizeof(ATEMRAS_T_MBXNOTIFICATIONTRANSFER)

#define ATEMRAS_MBXNOTIFICATIONTRANSFER_OFFS_MBXOBJID ((EC_T_DWORD)0x00)
#define ATEMRAS_MBXNOTIFICATIONTRANSFER_OFFS_TFEROBJ  ((EC_T_DWORD)0x04)
#define ATEMRAS_MBXNOTIFICATIONTRANSFER_OFFS_DATA     ((EC_T_DWORD)0x04+ATEMRAS_T_MBXTFER_SIZE)

static EC_INLINESTART EC_T_DWORD ATEMRAS_MBXNOTIFICATIONTRANSFER_GET_MBXOBJID(ATEMRAS_PT_MBXNOTIFICATIONTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_MBXNOTIFICATIONTRANSFER_OFFS_MBXOBJID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_MBXNOTIFICATIONTRANSFER_SET_MBXOBJID(ATEMRAS_PT_MBXNOTIFICATIONTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_MBXNOTIFICATIONTRANSFER_OFFS_MBXOBJID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART ATEMRAS_PT_MBXTFER ATEMRAS_MBXNOTIFICATIONTRANSFER_TFEROBJ(ATEMRAS_PT_MBXNOTIFICATIONTRANSFER p)
{
    return (ATEMRAS_PT_MBXTFER)((((EC_T_PBYTE)p)+ATEMRAS_MBXNOTIFICATIONTRANSFER_OFFS_TFEROBJ));
} EC_INLINESTOP
static EC_INLINESTART EC_T_PBYTE ATEMRAS_MBXNOTIFICATIONTRANSFER_DATA(ATEMRAS_PT_MBXNOTIFICATIONTRANSFER p)
{
    return (EC_T_PBYTE)((((EC_T_PBYTE)p)+ATEMRAS_MBXNOTIFICATIONTRANSFER_OFFS_DATA));
} EC_INLINESTOP

typedef struct _ATEMRAS_T_COESDOUPLOADCMPLTRANSFER
{
    EC_T_DWORD          dwCommandCode;      /* Command Code */              /* 0x00 */
    EC_T_DWORD          dwInstanceID;       /* Master Instance */           /* 0x04 */
    
    EC_T_DWORD          dwSlaveId;          /* Slave Id */                  /* 0x08 */
    union _t_uIndex
    {
        EC_T_DWORD      dwIndex;                                            /* 0x0C */
        struct _t_sIndex
        {
            EC_T_WORD   wObIndex;           /* object Index */              /* 0x0C */
            EC_T_BYTE   bySubIndex;         /* sub Index */                 /* 0x0E */
            EC_T_BYTE   byReserved;         /* res */                       /* 0x0F */
        } EC_PACKED(1)     sIndex;
    } EC_PACKED(1)         uIndex;

    EC_T_DWORD          dwDataLen;          /* data length */               /* 0x10 */
    EC_T_DWORD          dwOutDataLen;       /* out data length */           /* 0x14 */

    EC_T_DWORD          dwTimeout;          /* Timeout */                   /* 0x18 */

    EC_T_DWORD          dwSrvResult;        /* Result from server */        /* 0x1C */

    EC_T_DWORD          dwFlags;            /* mailbox transfer flags */    /* 0x20 */
} EC_PACKED(1) ATEMRAS_T_COESDOUPLOADCMPLTRANSFER, *ATEMRAS_PT_COESDOUPLOADCMPLTRANSFER;

#define ATEMRAS_T_COESDOUPLOADCMPLTRANSFER_SIZE         sizeof(ATEMRAS_T_COESDOUPLOADCMPLTRANSFER)

#define ATEMRAS_COESDOUPLOADCMPLTRANSFER_OFFS_COMMANDCODE               ((EC_T_DWORD)0x00)
#define ATEMRAS_COESDOUPLOADCMPLTRANSFER_OFFS_INSTANCEID                ((EC_T_DWORD)0x04)
#define ATEMRAS_COESDOUPLOADCMPLTRANSFER_OFFS_SLAVEID                   ((EC_T_DWORD)0x08)
#define ATEMRAS_COESDOUPLOADCMPLTRANSFER_OFFS_OBINDEX                   ((EC_T_DWORD)0x0C)
#define ATEMRAS_COESDOUPLOADCMPLTRANSFER_OFFS_OBSUBINDEX                ((EC_T_DWORD)0x0E)
#define ATEMRAS_COESDOUPLOADCMPLTRANSFER_OFFS_DATALEN                   ((EC_T_DWORD)0x10)
#define ATEMRAS_COESDOUPLOADCMPLTRANSFER_OFFS_OUTDATALEN                ((EC_T_DWORD)0x14)
#define ATEMRAS_COESDOUPLOADCMPLTRANSFER_OFFS_TIMEOUT                   ((EC_T_DWORD)0x18)
#define ATEMRAS_COESDOUPLOADCMPLTRANSFER_OFFS_SRVRESULT                 ((EC_T_DWORD)0x1C)
#define ATEMRAS_COESDOUPLOADCMPLTRANSFER_OFFS_FLAGS                     ((EC_T_DWORD)0x20)
#define ATEMRAS_COESDOUPLOADCMPLTRANSFER_OFFS_DATA                      ((EC_T_DWORD)0x24)

static EC_INLINESTART EC_T_DWORD ATEMRAS_COESDOUPLOADCMPLTRANSFER_GET_COMMANDCODE(ATEMRAS_PT_COESDOUPLOADCMPLTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDOUPLOADCMPLTRANSFER_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COESDOUPLOADCMPLTRANSFER_SET_COMMANDCODE(ATEMRAS_PT_COESDOUPLOADCMPLTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDOUPLOADCMPLTRANSFER_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_COESDOUPLOADCMPLTRANSFER_GET_INSTANCEID(ATEMRAS_PT_COESDOUPLOADCMPLTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDOUPLOADCMPLTRANSFER_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COESDOUPLOADCMPLTRANSFER_SET_INSTANCEID(ATEMRAS_PT_COESDOUPLOADCMPLTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDOUPLOADCMPLTRANSFER_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_COESDOUPLOADCMPLTRANSFER_GET_SLAVEID(ATEMRAS_PT_COESDOUPLOADCMPLTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDOUPLOADCMPLTRANSFER_OFFS_SLAVEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COESDOUPLOADCMPLTRANSFER_SET_SLAVEID(ATEMRAS_PT_COESDOUPLOADCMPLTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDOUPLOADCMPLTRANSFER_OFFS_SLAVEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_WORD ATEMRAS_COESDOUPLOADCMPLTRANSFER_GET_OBINDEX(ATEMRAS_PT_COESDOUPLOADCMPLTRANSFER p)
{
    return EC_GET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_COESDOUPLOADCMPLTRANSFER_OFFS_OBINDEX));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COESDOUPLOADCMPLTRANSFER_SET_OBINDEX(ATEMRAS_PT_COESDOUPLOADCMPLTRANSFER p, EC_T_WORD wVal)
{
    EC_SET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_COESDOUPLOADCMPLTRANSFER_OFFS_OBINDEX), wVal );
} EC_INLINESTOP
static EC_INLINESTART EC_T_BYTE ATEMRAS_COESDOUPLOADCMPLTRANSFER_GET_OBSUBINDEX(ATEMRAS_PT_COESDOUPLOADCMPLTRANSFER p)
{
    return (EC_T_BYTE)(*((((EC_T_PBYTE)p)+ATEMRAS_COESDOUPLOADCMPLTRANSFER_OFFS_OBSUBINDEX)));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COESDOUPLOADCMPLTRANSFER_SET_OBSUBINDEX(ATEMRAS_PT_COESDOUPLOADCMPLTRANSFER p, EC_T_BYTE byVal)
{
    (*((((EC_T_PBYTE)p)+ATEMRAS_COESDOUPLOADCMPLTRANSFER_OFFS_OBSUBINDEX))) = byVal;
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_COESDOUPLOADCMPLTRANSFER_GET_DATALEN(ATEMRAS_PT_COESDOUPLOADCMPLTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDOUPLOADCMPLTRANSFER_OFFS_DATALEN));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COESDOUPLOADCMPLTRANSFER_SET_DATALEN(ATEMRAS_PT_COESDOUPLOADCMPLTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDOUPLOADCMPLTRANSFER_OFFS_DATALEN), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_COESDOUPLOADCMPLTRANSFER_GET_OUTDATALEN(ATEMRAS_PT_COESDOUPLOADCMPLTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDOUPLOADCMPLTRANSFER_OFFS_OUTDATALEN));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COESDOUPLOADCMPLTRANSFER_SET_OUTDATALEN(ATEMRAS_PT_COESDOUPLOADCMPLTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDOUPLOADCMPLTRANSFER_OFFS_OUTDATALEN), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_COESDOUPLOADCMPLTRANSFER_GET_TIMEOUT(ATEMRAS_PT_COESDOUPLOADCMPLTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDOUPLOADCMPLTRANSFER_OFFS_TIMEOUT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COESDOUPLOADCMPLTRANSFER_SET_TIMEOUT(ATEMRAS_PT_COESDOUPLOADCMPLTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDOUPLOADCMPLTRANSFER_OFFS_TIMEOUT), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_COESDOUPLOADCMPLTRANSFER_GET_SRVRESULT(ATEMRAS_PT_COESDOUPLOADCMPLTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDOUPLOADCMPLTRANSFER_OFFS_SRVRESULT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COESDOUPLOADCMPLTRANSFER_SET_SRVRESULT(ATEMRAS_PT_COESDOUPLOADCMPLTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDOUPLOADCMPLTRANSFER_OFFS_SRVRESULT), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_COESDOUPLOADCMPLTRANSFER_GET_FLAGS(ATEMRAS_PT_COESDOUPLOADCMPLTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDOUPLOADCMPLTRANSFER_OFFS_FLAGS));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COESDOUPLOADCMPLTRANSFER_SET_FLAGS(ATEMRAS_PT_COESDOUPLOADCMPLTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDOUPLOADCMPLTRANSFER_OFFS_FLAGS), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_PBYTE ATEMRAS_COESDOUPLOADCMPLTRANSFER_DATA(ATEMRAS_PT_COESDOUPLOADCMPLTRANSFER p)
{
    return (EC_T_PBYTE)((((EC_T_PBYTE)p)+ATEMRAS_COESDOUPLOADCMPLTRANSFER_OFFS_DATA));
} EC_INLINESTOP

typedef struct _ATEMRAS_T_COESDODOWNLOADCMPLTRANSFER
{
    EC_T_DWORD          dwCommandCode;      /* Command Code */              /* 0x00 */
    EC_T_DWORD          dwInstanceID;       /* Master Instance */           /* 0x04 */
    
    EC_T_DWORD          dwSlaveId;          /* Slave Id */                  /* 0x08 */
    union _t_uIndex
    {
        EC_T_DWORD      dwIndex;                                            /* 0x0C */
        struct _t_sIndex
        {
            EC_T_WORD   wObIndex;           /* object Index */              /* 0x0C */
            EC_T_BYTE   bySubIndex;         /* sub Index */                 /* 0x0E */
            EC_T_BYTE   byReserved;         /* res */                       /* 0x0F */
        } EC_PACKED(1)     sIndex;
    } EC_PACKED(1)         uIndex;

    EC_T_DWORD          dwDataLen;          /* data length */               /* 0x10 */
    EC_T_DWORD          dwTimeout;          /* Timeout */                   /* 0x14 */

    EC_T_DWORD          dwSrvResult;        /* Result from server */        /* 0x18 */

    EC_T_DWORD          dwFlags;            /* mailbox transfer flags */    /* 0x1C */
} EC_PACKED(1) ATEMRAS_T_COESDODOWNLOADCMPLTRANSFER, *ATEMRAS_PT_COESDODOWNLOADCMPLTRANSFER;

#define ATEMRAS_T_COESDODOWNLOADCMPLTRANSFER_SIZE         sizeof(ATEMRAS_T_COESDODOWNLOADCMPLTRANSFER)

#define ATEMRAS_COESDODOWNLOADCMPLTRANSFER_OFFS_COMMANDCODE               ((EC_T_DWORD)0x00)
#define ATEMRAS_COESDODOWNLOADCMPLTRANSFER_OFFS_INSTANCEID                ((EC_T_DWORD)0x04)
#define ATEMRAS_COESDODOWNLOADCMPLTRANSFER_OFFS_SLAVEID                   ((EC_T_DWORD)0x08)
#define ATEMRAS_COESDODOWNLOADCMPLTRANSFER_OFFS_OBINDEX                   ((EC_T_DWORD)0x0C)
#define ATEMRAS_COESDODOWNLOADCMPLTRANSFER_OFFS_OBSUBINDEX                ((EC_T_DWORD)0x0E)
#define ATEMRAS_COESDODOWNLOADCMPLTRANSFER_OFFS_DATALEN                   ((EC_T_DWORD)0x10)
#define ATEMRAS_COESDODOWNLOADCMPLTRANSFER_OFFS_TIMEOUT                   ((EC_T_DWORD)0x14)
#define ATEMRAS_COESDODOWNLOADCMPLTRANSFER_OFFS_SRVRESULT                 ((EC_T_DWORD)0x18)
#define ATEMRAS_COESDODOWNLOADCMPLTRANSFER_OFFS_FLAGS                     ((EC_T_DWORD)0x1C)
#define ATEMRAS_COESDODOWNLOADCMPLTRANSFER_OFFS_DATA                      ((EC_T_DWORD)0x20)

static EC_INLINESTART EC_T_DWORD ATEMRAS_COESDODOWNLOADCMPLTRANSFER_GET_COMMANDCODE(ATEMRAS_PT_COESDODOWNLOADCMPLTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDODOWNLOADCMPLTRANSFER_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COESDODOWNLOADCMPLTRANSFER_SET_COMMANDCODE(ATEMRAS_PT_COESDODOWNLOADCMPLTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDODOWNLOADCMPLTRANSFER_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_COESDODOWNLOADCMPLTRANSFER_GET_INSTANCEID(ATEMRAS_PT_COESDODOWNLOADCMPLTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDODOWNLOADCMPLTRANSFER_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COESDODOWNLOADCMPLTRANSFER_SET_INSTANCEID(ATEMRAS_PT_COESDODOWNLOADCMPLTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDODOWNLOADCMPLTRANSFER_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_COESDODOWNLOADCMPLTRANSFER_GET_SLAVEID(ATEMRAS_PT_COESDODOWNLOADCMPLTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDODOWNLOADCMPLTRANSFER_OFFS_SLAVEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COESDODOWNLOADCMPLTRANSFER_SET_SLAVEID(ATEMRAS_PT_COESDODOWNLOADCMPLTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDODOWNLOADCMPLTRANSFER_OFFS_SLAVEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_WORD ATEMRAS_COESDODOWNLOADCMPLTRANSFER_GET_OBINDEX(ATEMRAS_PT_COESDODOWNLOADCMPLTRANSFER p)
{
    return EC_GET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_COESDODOWNLOADCMPLTRANSFER_OFFS_OBINDEX));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COESDODOWNLOADCMPLTRANSFER_SET_OBINDEX(ATEMRAS_PT_COESDODOWNLOADCMPLTRANSFER p, EC_T_WORD wVal)
{
    EC_SET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_COESDODOWNLOADCMPLTRANSFER_OFFS_OBINDEX), wVal );
} EC_INLINESTOP
static EC_INLINESTART EC_T_BYTE ATEMRAS_COESDODOWNLOADCMPLTRANSFER_GET_OBSUBINDEX(ATEMRAS_PT_COESDODOWNLOADCMPLTRANSFER p)
{
    return (EC_T_BYTE)(*((((EC_T_PBYTE)p)+ATEMRAS_COESDODOWNLOADCMPLTRANSFER_OFFS_OBSUBINDEX)));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COESDODOWNLOADCMPLTRANSFER_SET_OBSUBINDEX(ATEMRAS_PT_COESDODOWNLOADCMPLTRANSFER p, EC_T_BYTE byVal)
{
    (*((((EC_T_PBYTE)p)+ATEMRAS_COESDODOWNLOADCMPLTRANSFER_OFFS_OBSUBINDEX))) = byVal;
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_COESDODOWNLOADCMPLTRANSFER_GET_DATALEN(ATEMRAS_PT_COESDODOWNLOADCMPLTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDODOWNLOADCMPLTRANSFER_OFFS_DATALEN));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COESDODOWNLOADCMPLTRANSFER_SET_DATALEN(ATEMRAS_PT_COESDODOWNLOADCMPLTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDODOWNLOADCMPLTRANSFER_OFFS_DATALEN), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_COESDODOWNLOADCMPLTRANSFER_GET_TIMEOUT(ATEMRAS_PT_COESDODOWNLOADCMPLTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDODOWNLOADCMPLTRANSFER_OFFS_TIMEOUT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COESDODOWNLOADCMPLTRANSFER_SET_TIMEOUT(ATEMRAS_PT_COESDODOWNLOADCMPLTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDODOWNLOADCMPLTRANSFER_OFFS_TIMEOUT), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_COESDODOWNLOADCMPLTRANSFER_GET_SRVRESULT(ATEMRAS_PT_COESDODOWNLOADCMPLTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDODOWNLOADCMPLTRANSFER_OFFS_SRVRESULT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COESDODOWNLOADCMPLTRANSFER_SET_SRVRESULT(ATEMRAS_PT_COESDODOWNLOADCMPLTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDODOWNLOADCMPLTRANSFER_OFFS_SRVRESULT), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_COESDODOWNLOADCMPLTRANSFER_GET_FLAGS(ATEMRAS_PT_COESDODOWNLOADCMPLTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDODOWNLOADCMPLTRANSFER_OFFS_FLAGS));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_COESDODOWNLOADCMPLTRANSFER_SET_FLAGS(ATEMRAS_PT_COESDODOWNLOADCMPLTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_COESDODOWNLOADCMPLTRANSFER_OFFS_FLAGS), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_PBYTE ATEMRAS_COESDODOWNLOADCMPLTRANSFER_DATA(ATEMRAS_PT_COESDODOWNLOADCMPLTRANSFER p)
{
    return (EC_T_PBYTE)((((EC_T_PBYTE)p)+ATEMRAS_COESDODOWNLOADCMPLTRANSFER_OFFS_DATA));
} EC_INLINESTOP

typedef struct _ATEMRAS_T_AOEWRITEREQTRANSFER
{
    EC_T_DWORD          dwCommandCode;      /* Command Code */              /* 0x00 */
    EC_T_DWORD          dwInstanceID;       /* Master Instance */           /* 0x04 */
    
    EC_T_DWORD          dwMbxTferId;        /* Id of Mailbox Transfer Obj *//* 0x08 */
    EC_T_DWORD          dwSlaveId;          /* Slave Id */                  /* 0x0C */
    EC_T_AOE_NETID      oTargetNetId;       /* Target Net Id */             /* 0x10 */
    EC_T_WORD           wTargetPort;        /* object Index */              /* 0x16 */
    EC_T_DWORD          dwIndexGroup;       /* Index Group */               /* 0x18 */
    EC_T_DWORD          dwIndexOffset;      /* Index Offset */              /* 0x1C */
    EC_T_DWORD          dwTimeout;          /* Timeout */                   /* 0x20 */

    EC_T_DWORD          dwSrvResult;        /* Result from server */        /* 0x24 */

    ATEMRAS_T_MBXTFER   oTferObj;           /* Tfer Obj */                  /* 0x28 */
} EC_PACKED(1) ATEMRAS_T_AOEWRITEREQTRANSFER, *ATEMRAS_PT_AOEWRITEREQTRANSFER;

#define ATEMRAS_T_AOEWRITEREQTRANSFER_SIZE           sizeof(ATEMRAS_T_AOEWRITEREQTRANSFER)

#define ATEMRAS_AOEWRITEREQTRANSFER_OFFS_COMMANDCODE ((EC_T_DWORD)0x00)
#define ATEMRAS_AOEWRITEREQTRANSFER_OFFS_INSTANCEID  ((EC_T_DWORD)0x04)
#define ATEMRAS_AOEWRITEREQTRANSFER_OFFS_MBXOBJID    ((EC_T_DWORD)0x08)
#define ATEMRAS_AOEWRITEREQTRANSFER_OFFS_SLAVEID     ((EC_T_DWORD)0x0C)
#define ATEMRAS_AOEWRITEREQTRANSFER_OFFS_TARGETNETID ((EC_T_DWORD)0x10)
#define ATEMRAS_AOEWRITEREQTRANSFER_OFFS_TARGETPORT  ((EC_T_DWORD)0x16)
#define ATEMRAS_AOEWRITEREQTRANSFER_OFFS_INDEXGROUP  ((EC_T_DWORD)0x18)
#define ATEMRAS_AOEWRITEREQTRANSFER_OFFS_INDEXOFFSET ((EC_T_DWORD)0x1C)
#define ATEMRAS_AOEWRITEREQTRANSFER_OFFS_TIMEOUT     ((EC_T_DWORD)0x20)
#define ATEMRAS_AOEWRITEREQTRANSFER_OFFS_SRVRESULT   ((EC_T_DWORD)0x24)
#define ATEMRAS_AOEWRITEREQTRANSFER_OFFS_TFEROBJ     ((EC_T_DWORD)0x28)
#define ATEMRAS_AOEWRITEREQTRANSFER_OFFS_DATA        ((EC_T_DWORD)0x28+ATEMRAS_T_MBXTFER_SIZE)

static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEWRITEREQTRANSFER_GET_COMMANDCODE(ATEMRAS_PT_AOEWRITEREQTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEWRITEREQTRANSFER_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEWRITEREQTRANSFER_SET_COMMANDCODE(ATEMRAS_PT_AOEWRITEREQTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEWRITEREQTRANSFER_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEWRITEREQTRANSFER_GET_INSTANCEID(ATEMRAS_PT_AOEWRITEREQTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEWRITEREQTRANSFER_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEWRITEREQTRANSFER_SET_INSTANCEID(ATEMRAS_PT_AOEWRITEREQTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEWRITEREQTRANSFER_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEWRITEREQTRANSFER_GET_MBXOBJID(ATEMRAS_PT_AOEWRITEREQTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEWRITEREQTRANSFER_OFFS_MBXOBJID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEWRITEREQTRANSFER_SET_MBXOBJID(ATEMRAS_PT_AOEWRITEREQTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEWRITEREQTRANSFER_OFFS_MBXOBJID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEWRITEREQTRANSFER_GET_SLAVEID(ATEMRAS_PT_AOEWRITEREQTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEWRITEREQTRANSFER_OFFS_SLAVEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEWRITEREQTRANSFER_SET_SLAVEID(ATEMRAS_PT_AOEWRITEREQTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEWRITEREQTRANSFER_OFFS_SLAVEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_AOE_NETID* ATEMRAS_AOEWRITEREQTRANSFER_GET_TARGETNETID(ATEMRAS_PT_AOEWRITEREQTRANSFER p, EC_T_AOE_NETID* poVal)
{
    OsMemcpy( poVal, (((EC_T_PBYTE)p)+ATEMRAS_AOEWRITEREQTRANSFER_OFFS_TARGETNETID), sizeof(EC_T_AOE_NETID));
    return poVal;
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEWRITEREQTRANSFER_SET_TARGETNETID(ATEMRAS_PT_AOEWRITEREQTRANSFER p, EC_T_AOE_NETID* poVal)
{
    OsMemcpy((((EC_T_PBYTE)p)+ATEMRAS_AOEWRITEREQTRANSFER_OFFS_TARGETNETID), poVal, sizeof(EC_T_AOE_NETID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_WORD ATEMRAS_AOEWRITEREQTRANSFER_GET_TARGETPORT(ATEMRAS_PT_AOEWRITEREQTRANSFER p)
{
    return EC_GET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_AOEWRITEREQTRANSFER_OFFS_TARGETPORT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEWRITEREQTRANSFER_SET_TARGETPORT(ATEMRAS_PT_AOEWRITEREQTRANSFER p, EC_T_WORD wVal)
{
    EC_SET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_AOEWRITEREQTRANSFER_OFFS_TARGETPORT), wVal );
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEWRITEREQTRANSFER_GET_INDEXGROUP(ATEMRAS_PT_AOEWRITEREQTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEWRITEREQTRANSFER_OFFS_INDEXGROUP));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEWRITEREQTRANSFER_SET_INDEXGROUP(ATEMRAS_PT_AOEWRITEREQTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEWRITEREQTRANSFER_OFFS_INDEXGROUP), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEWRITEREQTRANSFER_GET_INDEXOFFSET(ATEMRAS_PT_AOEWRITEREQTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEWRITEREQTRANSFER_OFFS_INDEXOFFSET));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEWRITEREQTRANSFER_SET_INDEXOFFSET(ATEMRAS_PT_AOEWRITEREQTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEWRITEREQTRANSFER_OFFS_INDEXOFFSET), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEWRITEREQTRANSFER_GET_TIMEOUT(ATEMRAS_PT_AOEWRITEREQTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEWRITEREQTRANSFER_OFFS_TIMEOUT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEWRITEREQTRANSFER_SET_TIMEOUT(ATEMRAS_PT_AOEWRITEREQTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEWRITEREQTRANSFER_OFFS_TIMEOUT), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEWRITEREQTRANSFER_GET_SRVRESULT(ATEMRAS_PT_AOEWRITEREQTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEWRITEREQTRANSFER_OFFS_SRVRESULT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEWRITEREQTRANSFER_SET_SRVRESULT(ATEMRAS_PT_AOEWRITEREQTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEWRITEREQTRANSFER_OFFS_SRVRESULT), dwVal);
} EC_INLINESTOP
static EC_INLINESTART ATEMRAS_PT_MBXTFER ATEMRAS_AOEWRITEREQTRANSFER_TFEROBJ(ATEMRAS_PT_AOEWRITEREQTRANSFER p)
{
    return (ATEMRAS_PT_MBXTFER)((((EC_T_PBYTE)p)+ATEMRAS_AOEWRITEREQTRANSFER_OFFS_TFEROBJ));
} EC_INLINESTOP
static EC_INLINESTART EC_T_PBYTE ATEMRAS_AOEWRITEREQTRANSFER_DATA(ATEMRAS_PT_AOEWRITEREQTRANSFER p)
{
    return (EC_T_PBYTE)((((EC_T_PBYTE)p)+ATEMRAS_AOEWRITEREQTRANSFER_OFFS_DATA));
} EC_INLINESTOP

typedef struct _ATEMRAS_T_AOEREADREQTRANSFER
{
    EC_T_DWORD          dwCommandCode;      /* Command Code */              /* 0x00 */
    EC_T_DWORD          dwInstanceID;       /* Master Instance */           /* 0x04 */
    
    EC_T_DWORD          dwMbxTferId;        /* Id of Mailbox Transfer Obj *//* 0x08 */
    EC_T_DWORD          dwSlaveId;          /* Slave Id */                  /* 0x0C */
    EC_T_AOE_NETID      oTargetNetId;       /* Target Net Id */             /* 0x10 */
    EC_T_WORD           wTargetPort;        /* object Index */              /* 0x16 */
    EC_T_DWORD          dwIndexGroup;       /* Index Group */               /* 0x18 */
    EC_T_DWORD          dwIndexOffset;      /* Index Offset */              /* 0x1C */
    EC_T_DWORD          dwTimeout;          /* Timeout */                   /* 0x20 */

    EC_T_DWORD          dwSrvResult;        /* Result from server */        /* 0x24 */

    ATEMRAS_T_MBXTFER   oTferObj;           /* Tfer Obj */                  /* 0x28 */
} EC_PACKED(1) ATEMRAS_T_AOEREADREQTRANSFER, *ATEMRAS_PT_AOEREADREQTRANSFER;

#define ATEMRAS_T_AOEREADREQTRANSFER_SIZE             sizeof(ATEMRAS_T_AOEREADREQTRANSFER)

#define ATEMRAS_AOEREADREQTRANSFER_OFFS_COMMANDCODE ((EC_T_DWORD)0x00)
#define ATEMRAS_AOEREADREQTRANSFER_OFFS_INSTANCEID  ((EC_T_DWORD)0x04)
#define ATEMRAS_AOEREADREQTRANSFER_OFFS_MBXOBJID    ((EC_T_DWORD)0x08)
#define ATEMRAS_AOEREADREQTRANSFER_OFFS_SLAVEID     ((EC_T_DWORD)0x0C)
#define ATEMRAS_AOEREADREQTRANSFER_OFFS_TARGETNETID ((EC_T_DWORD)0x10)
#define ATEMRAS_AOEREADREQTRANSFER_OFFS_TARGETPORT  ((EC_T_DWORD)0x16)
#define ATEMRAS_AOEREADREQTRANSFER_OFFS_INDEXGROUP  ((EC_T_DWORD)0x18)
#define ATEMRAS_AOEREADREQTRANSFER_OFFS_INDEXOFFSET ((EC_T_DWORD)0x1C)
#define ATEMRAS_AOEREADREQTRANSFER_OFFS_TIMEOUT     ((EC_T_DWORD)0x20)
#define ATEMRAS_AOEREADREQTRANSFER_OFFS_SRVRESULT   ((EC_T_DWORD)0x24)
#define ATEMRAS_AOEREADREQTRANSFER_OFFS_TFEROBJ     ((EC_T_DWORD)0x28)
#define ATEMRAS_AOEREADREQTRANSFER_OFFS_DATA        ((EC_T_DWORD)0x28+ATEMRAS_T_MBXTFER_SIZE)

static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEREADREQTRANSFER_GET_COMMANDCODE(ATEMRAS_PT_AOEREADREQTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADREQTRANSFER_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEREADREQTRANSFER_SET_COMMANDCODE(ATEMRAS_PT_AOEREADREQTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADREQTRANSFER_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEREADREQTRANSFER_GET_INSTANCEID(ATEMRAS_PT_AOEREADREQTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADREQTRANSFER_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEREADREQTRANSFER_SET_INSTANCEID(ATEMRAS_PT_AOEREADREQTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADREQTRANSFER_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEREADREQTRANSFER_GET_MBXOBJID(ATEMRAS_PT_AOEREADREQTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADREQTRANSFER_OFFS_MBXOBJID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEREADREQTRANSFER_SET_MBXOBJID(ATEMRAS_PT_AOEREADREQTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADREQTRANSFER_OFFS_MBXOBJID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEREADREQTRANSFER_GET_SLAVEID(ATEMRAS_PT_AOEREADREQTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADREQTRANSFER_OFFS_SLAVEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEREADREQTRANSFER_SET_SLAVEID(ATEMRAS_PT_AOEREADREQTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADREQTRANSFER_OFFS_SLAVEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_AOE_NETID* ATEMRAS_AOEREADREQTRANSFER_GET_TARGETNETID(ATEMRAS_PT_AOEREADREQTRANSFER p, EC_T_AOE_NETID* poVal)
{
    OsMemcpy( poVal, (((EC_T_PBYTE)p)+ATEMRAS_AOEREADREQTRANSFER_OFFS_TARGETNETID), sizeof(EC_T_AOE_NETID));
    return poVal;
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEREADREQTRANSFER_SET_TARGETNETID(ATEMRAS_PT_AOEREADREQTRANSFER p, EC_T_AOE_NETID* poVal)
{
    OsMemcpy((((EC_T_PBYTE)p)+ATEMRAS_AOEREADREQTRANSFER_OFFS_TARGETNETID), poVal, sizeof(EC_T_AOE_NETID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_WORD ATEMRAS_AOEREADREQTRANSFER_GET_TARGETPORT(ATEMRAS_PT_AOEREADREQTRANSFER p)
{
    return EC_GET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADREQTRANSFER_OFFS_TARGETPORT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEREADREQTRANSFER_SET_TARGETPORT(ATEMRAS_PT_AOEREADREQTRANSFER p, EC_T_WORD wVal)
{
    EC_SET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADREQTRANSFER_OFFS_TARGETPORT), wVal );
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEREADREQTRANSFER_GET_INDEXGROUP(ATEMRAS_PT_AOEREADREQTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADREQTRANSFER_OFFS_INDEXGROUP));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEREADREQTRANSFER_SET_INDEXGROUP(ATEMRAS_PT_AOEREADREQTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADREQTRANSFER_OFFS_INDEXGROUP), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEREADREQTRANSFER_GET_INDEXOFFSET(ATEMRAS_PT_AOEREADREQTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADREQTRANSFER_OFFS_INDEXOFFSET));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEREADREQTRANSFER_SET_INDEXOFFSET(ATEMRAS_PT_AOEREADREQTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADREQTRANSFER_OFFS_INDEXOFFSET), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEREADREQTRANSFER_GET_TIMEOUT(ATEMRAS_PT_AOEREADREQTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADREQTRANSFER_OFFS_TIMEOUT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEREADREQTRANSFER_SET_TIMEOUT(ATEMRAS_PT_AOEREADREQTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADREQTRANSFER_OFFS_TIMEOUT), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEREADREQTRANSFER_GET_SRVRESULT(ATEMRAS_PT_AOEREADREQTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADREQTRANSFER_OFFS_SRVRESULT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEREADREQTRANSFER_SET_SRVRESULT(ATEMRAS_PT_AOEREADREQTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADREQTRANSFER_OFFS_SRVRESULT), dwVal);
} EC_INLINESTOP
static EC_INLINESTART ATEMRAS_PT_MBXTFER ATEMRAS_AOEREADREQTRANSFER_TFEROBJ(ATEMRAS_PT_AOEREADREQTRANSFER p)
{
    return (ATEMRAS_PT_MBXTFER)((((EC_T_PBYTE)p)+ATEMRAS_AOEREADREQTRANSFER_OFFS_TFEROBJ));
} EC_INLINESTOP
static EC_INLINESTART EC_T_PBYTE ATEMRAS_AOEREADREQTRANSFER_DATA(ATEMRAS_PT_AOEREADREQTRANSFER p)
{
    return (EC_T_PBYTE)((((EC_T_PBYTE)p)+ATEMRAS_AOEREADREQTRANSFER_OFFS_DATA));
} EC_INLINESTOP

typedef struct _ATEMRAS_T_AOEREADWRITEREQTRANSFER
{
  EC_T_DWORD          dwCommandCode;      /* Command Code */              /* 0x00 */
  EC_T_DWORD          dwInstanceID;       /* Master Instance */           /* 0x04 */

  EC_T_DWORD          dwMbxTferId;        /* Id of Mailbox Transfer Obj *//* 0x08 */
  EC_T_DWORD          dwSlaveId;          /* Slave Id */                  /* 0x0C */
  EC_T_AOE_NETID      oTargetNetId;       /* Target Net Id */             /* 0x10 */
  EC_T_WORD           wTargetPort;        /* object Index */              /* 0x16 */
  EC_T_DWORD          dwIndexGroup;       /* Index Group */               /* 0x18 */
  EC_T_DWORD          dwIndexOffset;      /* Index Offset */              /* 0x1C */
  EC_T_DWORD          dwReadDataLen;      /* Number of bytes to read */   /* 0x20 */
  EC_T_DWORD          dwTimeout;          /* Timeout */                   /* 0x24 */

  EC_T_DWORD          dwSrvResult;        /* Result from server */        /* 0x28 */

  ATEMRAS_T_MBXTFER   oTferObj;           /* Tfer Obj */                  /* 0x2C */
} EC_PACKED(1) ATEMRAS_T_AOEREADWRITEREQTRANSFER, *ATEMRAS_PT_AOEREADWRITEREQTRANSFER;

#define ATEMRAS_T_AOEREADWRITEREQTRANSFER_SIZE             sizeof(ATEMRAS_T_AOEREADWRITEREQTRANSFER)

#define ATEMRAS_AOEREADWRITEREQTRANSFER_OFFS_COMMANDCODE             ((EC_T_DWORD)0x00)
#define ATEMRAS_AOEREADWRITEREQTRANSFER_OFFS_INSTANCEID              ((EC_T_DWORD)0x04)
#define ATEMRAS_AOEREADWRITEREQTRANSFER_OFFS_MBXOBJID               ((EC_T_DWORD)0x08)
#define ATEMRAS_AOEREADWRITEREQTRANSFER_OFFS_SLAVEID                 ((EC_T_DWORD)0x0C)
#define ATEMRAS_AOEREADWRITEREQTRANSFER_OFFS_TARGETNETID             ((EC_T_DWORD)0x10)
#define ATEMRAS_AOEREADWRITEREQTRANSFER_OFFS_TARGETPORT              ((EC_T_DWORD)0x16)
#define ATEMRAS_AOEREADWRITEREQTRANSFER_OFFS_INDEXGROUP              ((EC_T_DWORD)0x18)
#define ATEMRAS_AOEREADWRITEREQTRANSFER_OFFS_INDEXOFFSET             ((EC_T_DWORD)0x1C)
#define ATEMRAS_AOEREADWRITEREQTRANSFER_OFFS_READDATALEN             ((EC_T_DWORD)0x20)
#define ATEMRAS_AOEREADWRITEREQTRANSFER_OFFS_TIMEOUT                 ((EC_T_DWORD)0x24)
#define ATEMRAS_AOEREADWRITEREQTRANSFER_OFFS_SRVRESULT               ((EC_T_DWORD)0x28)
#define ATEMRAS_AOEREADWRITEREQTRANSFER_OFFS_TFEROBJ                 ((EC_T_DWORD)0x2C)
#define ATEMRAS_AOEREADWRITEREQTRANSFER_OFFS_DATA                    ((EC_T_DWORD)0x2C+ATEMRAS_T_MBXTFER_SIZE)

static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEREADWRITEREQTRANSFER_GET_COMMANDCODE(ATEMRAS_PT_AOEREADWRITEREQTRANSFER p)
{
  return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITEREQTRANSFER_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEREADWRITEREQTRANSFER_SET_COMMANDCODE(ATEMRAS_PT_AOEREADWRITEREQTRANSFER p, EC_T_DWORD dwVal)
{
  EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITEREQTRANSFER_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEREADWRITEREQTRANSFER_GET_INSTANCEID(ATEMRAS_PT_AOEREADWRITEREQTRANSFER p)
{
  return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITEREQTRANSFER_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEREADWRITEREQTRANSFER_SET_INSTANCEID(ATEMRAS_PT_AOEREADWRITEREQTRANSFER p, EC_T_DWORD dwVal)
{
  EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITEREQTRANSFER_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEREADWRITEREQTRANSFER_GET_MBXOBJID(ATEMRAS_PT_AOEREADWRITEREQTRANSFER p)
{
  return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITEREQTRANSFER_OFFS_MBXOBJID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEREADWRITEREQTRANSFER_SET_MBXOBJID(ATEMRAS_PT_AOEREADWRITEREQTRANSFER p, EC_T_DWORD dwVal)
{
  EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITEREQTRANSFER_OFFS_MBXOBJID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEREADWRITEREQTRANSFER_GET_SLAVEID(ATEMRAS_PT_AOEREADWRITEREQTRANSFER p)
{
  return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITEREQTRANSFER_OFFS_SLAVEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEREADWRITEREQTRANSFER_SET_SLAVEID(ATEMRAS_PT_AOEREADWRITEREQTRANSFER p, EC_T_DWORD dwVal)
{
  EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITEREQTRANSFER_OFFS_SLAVEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_AOE_NETID* ATEMRAS_AOEREADWRITEREQTRANSFER_GET_TARGETNETID(ATEMRAS_PT_AOEREADWRITEREQTRANSFER p, EC_T_AOE_NETID* poVal)
{
  OsMemcpy( poVal, (((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITEREQTRANSFER_OFFS_TARGETNETID), sizeof(EC_T_AOE_NETID));
  return poVal;
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEREADWRITEREQTRANSFER_SET_TARGETNETID(ATEMRAS_PT_AOEREADWRITEREQTRANSFER p, EC_T_AOE_NETID* poVal)
{
  OsMemcpy((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITEREQTRANSFER_OFFS_TARGETNETID), poVal, sizeof(EC_T_AOE_NETID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_WORD ATEMRAS_AOEREADWRITEREQTRANSFER_GET_TARGETPORT(ATEMRAS_PT_AOEREADWRITEREQTRANSFER p)
{
  return EC_GET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITEREQTRANSFER_OFFS_TARGETPORT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEREADWRITEREQTRANSFER_SET_TARGETPORT(ATEMRAS_PT_AOEREADWRITEREQTRANSFER p, EC_T_WORD wVal)
{
  EC_SET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITEREQTRANSFER_OFFS_TARGETPORT), wVal );
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEREADWRITEREQTRANSFER_GET_INDEXGROUP(ATEMRAS_PT_AOEREADWRITEREQTRANSFER p)
{
  return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITEREQTRANSFER_OFFS_INDEXGROUP));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEREADWRITEREQTRANSFER_SET_INDEXGROUP(ATEMRAS_PT_AOEREADWRITEREQTRANSFER p, EC_T_DWORD dwVal)
{
  EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITEREQTRANSFER_OFFS_INDEXGROUP), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEREADWRITEREQTRANSFER_GET_INDEXOFFSET(ATEMRAS_PT_AOEREADWRITEREQTRANSFER p)
{
  return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITEREQTRANSFER_OFFS_INDEXOFFSET));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEREADWRITEREQTRANSFER_SET_INDEXOFFSET(ATEMRAS_PT_AOEREADWRITEREQTRANSFER p, EC_T_DWORD dwVal)
{
  EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITEREQTRANSFER_OFFS_INDEXOFFSET), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEREADWRITEREQTRANSFER_GET_READDATALEN(ATEMRAS_PT_AOEREADWRITEREQTRANSFER p)
{
  return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITEREQTRANSFER_OFFS_READDATALEN));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEREADWRITEREQTRANSFER_SET_READDATALEN(ATEMRAS_PT_AOEREADWRITEREQTRANSFER p, EC_T_DWORD dwVal)
{
  EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITEREQTRANSFER_OFFS_READDATALEN), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEREADWRITEREQTRANSFER_GET_TIMEOUT(ATEMRAS_PT_AOEREADWRITEREQTRANSFER p)
{
  return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITEREQTRANSFER_OFFS_TIMEOUT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEREADWRITEREQTRANSFER_SET_TIMEOUT(ATEMRAS_PT_AOEREADWRITEREQTRANSFER p, EC_T_DWORD dwVal)
{
  EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITEREQTRANSFER_OFFS_TIMEOUT), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEREADWRITEREQTRANSFER_GET_SRVRESULT(ATEMRAS_PT_AOEREADWRITEREQTRANSFER p)
{
  return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITEREQTRANSFER_OFFS_SRVRESULT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEREADWRITEREQTRANSFER_SET_SRVRESULT(ATEMRAS_PT_AOEREADWRITEREQTRANSFER p, EC_T_DWORD dwVal)
{
  EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITEREQTRANSFER_OFFS_SRVRESULT), dwVal);
} EC_INLINESTOP
static EC_INLINESTART ATEMRAS_PT_MBXTFER ATEMRAS_AOEREADWRITEREQTRANSFER_TFEROBJ(ATEMRAS_PT_AOEREADWRITEREQTRANSFER p)
{
  return (ATEMRAS_PT_MBXTFER)((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITEREQTRANSFER_OFFS_TFEROBJ));
} EC_INLINESTOP
static EC_INLINESTART EC_T_PBYTE ATEMRAS_AOEREADWRITEREQTRANSFER_DATA(ATEMRAS_PT_AOEREADWRITEREQTRANSFER p)
{
  return (EC_T_PBYTE)((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITEREQTRANSFER_OFFS_DATA));
} EC_INLINESTOP

typedef struct _ATEMRAS_T_AOEREADTRANSFER
{
    EC_T_DWORD          dwCommandCode;      /* Command Code */              /* 0x00 */
    EC_T_DWORD          dwInstanceID;       /* Master Instance */           /* 0x04 */
    
    EC_T_DWORD          dwSlaveId;          /* Slave Id */                  /* 0x08 */
    EC_T_AOE_NETID      oTargetNetId;       /* Target Net Id */             /* 0x0C */
    EC_T_WORD           wTargetPort;        /* Target Port */               /* 0x12 */
    EC_T_DWORD          dwIndexGroup;       /* Index Group */               /* 0x14 */
    EC_T_DWORD          dwIndexOffset;      /* Index Offset */              /* 0x18 */
    EC_T_DWORD          dwDataLength;       /* Data Length */               /* 0x1C */

    EC_T_DWORD          dwOutDataLen;       /* out data length */           /* 0x20 */

    EC_T_DWORD          dwTimeout;          /* Timeout */                   /* 0x24 */

    EC_T_DWORD          dwErrorCode;        /* Error Code */                /* 0x28 */
    EC_T_DWORD          dwCmdResult;        /* Cmd Result */                /* 0x2C */
    EC_T_DWORD          dwSrvResult;        /* Result from server */        /* 0x30 */
} EC_PACKED(1) ATEMRAS_T_AOEREADTRANSFER, *ATEMRAS_PT_AOEREADTRANSFER;

#define ATEMRAS_T_AOEREADTRANSFER_SIZE         sizeof(ATEMRAS_T_AOEREADTRANSFER)

#define ATEMRAS_AOEREADTRANSFER_OFFS_COMMANDCODE               ((EC_T_DWORD)0x00)
#define ATEMRAS_AOEREADTRANSFER_OFFS_INSTANCEID                ((EC_T_DWORD)0x04)
#define ATEMRAS_AOEREADTRANSFER_OFFS_SLAVEID                   ((EC_T_DWORD)0x08)
#define ATEMRAS_AOEREADTRANSFER_OFFS_TARGETNETID               ((EC_T_DWORD)0x0C)
#define ATEMRAS_AOEREADTRANSFER_OFFS_TARGETPORT                ((EC_T_DWORD)0x12)
#define ATEMRAS_AOEREADTRANSFER_OFFS_INDEXGROUP                ((EC_T_DWORD)0x14)
#define ATEMRAS_AOEREADTRANSFER_OFFS_INDEXOFFSET               ((EC_T_DWORD)0x18)
#define ATEMRAS_AOEREADTRANSFER_OFFS_DATALENGTH                ((EC_T_DWORD)0x1C)
#define ATEMRAS_AOEREADTRANSFER_OFFS_OUTDATALEN                ((EC_T_DWORD)0x20)
#define ATEMRAS_AOEREADTRANSFER_OFFS_TIMEOUT                   ((EC_T_DWORD)0x24)
#define ATEMRAS_AOEREADTRANSFER_OFFS_ERRORCODE                 ((EC_T_DWORD)0x28)
#define ATEMRAS_AOEREADTRANSFER_OFFS_CMDRESULT                 ((EC_T_DWORD)0x2C)
#define ATEMRAS_AOEREADTRANSFER_OFFS_SRVRESULT                 ((EC_T_DWORD)0x30)
#define ATEMRAS_AOEREADTRANSFER_OFFS_DATA                      ((EC_T_DWORD)0x34)

static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEREADTRANSFER_GET_COMMANDCODE(ATEMRAS_PT_AOEREADTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADTRANSFER_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEREADTRANSFER_SET_COMMANDCODE(ATEMRAS_PT_AOEREADTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADTRANSFER_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEREADTRANSFER_GET_INSTANCEID(ATEMRAS_PT_AOEREADTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADTRANSFER_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEREADTRANSFER_SET_INSTANCEID(ATEMRAS_PT_AOEREADTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADTRANSFER_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEREADTRANSFER_GET_SLAVEID(ATEMRAS_PT_AOEREADTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADTRANSFER_OFFS_SLAVEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEREADTRANSFER_SET_SLAVEID(ATEMRAS_PT_AOEREADTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADTRANSFER_OFFS_SLAVEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_AOE_NETID* ATEMRAS_AOEREADTRANSFER_GET_TARGETNETID(ATEMRAS_PT_AOEREADTRANSFER p, EC_T_AOE_NETID* poVal)
{
    OsMemcpy( poVal, (((EC_T_PBYTE)p)+ATEMRAS_AOEREADTRANSFER_OFFS_TARGETNETID), sizeof(EC_T_AOE_NETID));
    return poVal;
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEREADTRANSFER_SET_TARGETNETID(ATEMRAS_PT_AOEREADTRANSFER p, EC_T_AOE_NETID* poVal)
{
    OsMemcpy((((EC_T_PBYTE)p)+ATEMRAS_AOEREADTRANSFER_OFFS_TARGETNETID), poVal, sizeof(EC_T_AOE_NETID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_WORD ATEMRAS_AOEREADTRANSFER_GET_TARGETPORT(ATEMRAS_PT_AOEREADTRANSFER p)
{
    return EC_GET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADTRANSFER_OFFS_TARGETPORT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEREADTRANSFER_SET_TARGETPORT(ATEMRAS_PT_AOEREADTRANSFER p, EC_T_WORD wVal)
{
    EC_SET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADTRANSFER_OFFS_TARGETPORT), wVal );
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEREADTRANSFER_GET_DATALENGTH(ATEMRAS_PT_AOEREADTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADTRANSFER_OFFS_DATALENGTH));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEREADTRANSFER_SET_DATALENGTH(ATEMRAS_PT_AOEREADTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADTRANSFER_OFFS_DATALENGTH), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEREADTRANSFER_GET_INDEXGROUP(ATEMRAS_PT_AOEREADTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADTRANSFER_OFFS_INDEXGROUP));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEREADTRANSFER_SET_INDEXGROUP(ATEMRAS_PT_AOEREADTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADTRANSFER_OFFS_INDEXGROUP), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEREADTRANSFER_GET_INDEXOFFSET(ATEMRAS_PT_AOEREADTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADTRANSFER_OFFS_INDEXOFFSET));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEREADTRANSFER_SET_INDEXOFFSET(ATEMRAS_PT_AOEREADTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADTRANSFER_OFFS_INDEXOFFSET), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEREADTRANSFER_GET_OUTDATALEN(ATEMRAS_PT_AOEREADTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADTRANSFER_OFFS_OUTDATALEN));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEREADTRANSFER_SET_OUTDATALEN(ATEMRAS_PT_AOEREADTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADTRANSFER_OFFS_OUTDATALEN), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEREADTRANSFER_GET_TIMEOUT(ATEMRAS_PT_AOEREADTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADTRANSFER_OFFS_TIMEOUT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEREADTRANSFER_SET_TIMEOUT(ATEMRAS_PT_AOEREADTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADTRANSFER_OFFS_TIMEOUT), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEREADTRANSFER_GET_ERRORCODE(ATEMRAS_PT_AOEREADTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADTRANSFER_OFFS_ERRORCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEREADTRANSFER_SET_ERRORCODE(ATEMRAS_PT_AOEREADTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADTRANSFER_OFFS_ERRORCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEREADTRANSFER_GET_CMDRESULT(ATEMRAS_PT_AOEREADTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADTRANSFER_OFFS_CMDRESULT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEREADTRANSFER_SET_CMDRESULT(ATEMRAS_PT_AOEREADTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADTRANSFER_OFFS_CMDRESULT), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEREADTRANSFER_GET_SRVRESULT(ATEMRAS_PT_AOEREADTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADTRANSFER_OFFS_SRVRESULT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEREADTRANSFER_SET_SRVRESULT(ATEMRAS_PT_AOEREADTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADTRANSFER_OFFS_SRVRESULT), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_PBYTE ATEMRAS_AOEREADTRANSFER_DATA(ATEMRAS_PT_AOEREADTRANSFER p)
{
    return (EC_T_PBYTE)((((EC_T_PBYTE)p)+ATEMRAS_AOEREADTRANSFER_OFFS_DATA));
} EC_INLINESTOP

typedef struct _ATEMRAS_T_AOEREADWRITETRANSFER
{
  EC_T_DWORD          dwCommandCode;      /* Command Code */              /* 0x00 */
  EC_T_DWORD          dwInstanceID;       /* Master Instance */           /* 0x04 */

  EC_T_DWORD          dwSlaveId;          /* Slave Id */                  /* 0x08 */
  EC_T_AOE_NETID      oTargetNetId;       /* Target Net Id */             /* 0x0C */
  EC_T_WORD           wTargetPort;        /* Target Port */               /* 0x12 */
  EC_T_DWORD          dwIndexGroup;       /* Index Group */               /* 0x14 */
  EC_T_DWORD          dwIndexOffset;      /* Index Offset */              /* 0x18 */
  EC_T_DWORD          dwReadDataLength;   /* Read Data Length */          /* 0x1C */
  EC_T_DWORD          dwWriteDataLength;  /* Write Data Length */         /* 0x20 */

  EC_T_DWORD          dwOutDataLen;       /* out data length */           /* 0x24 */

  EC_T_DWORD          dwTimeout;          /* Timeout */                   /* 0x28 */

  EC_T_DWORD          dwErrorCode;        /* Error Code */                /* 0x2C */
  EC_T_DWORD          dwCmdResult;        /* Cmd Result */                /* 0x30 */
  EC_T_DWORD          dwSrvResult;        /* Result from server */        /* 0x34 */
} EC_PACKED(1) ATEMRAS_T_AOEREADWRITETRANSFER, *ATEMRAS_PT_AOEREADWRITETRANSFER;

#define ATEMRAS_T_AOEREADWRITETRANSFER_SIZE         sizeof(ATEMRAS_T_AOEREADWRITETRANSFER)

#define ATEMRAS_AOEREADWRITETRANSFER_OFFS_COMMANDCODE               ((EC_T_DWORD)0x00)
#define ATEMRAS_AOEREADWRITETRANSFER_OFFS_INSTANCEID                ((EC_T_DWORD)0x04)
#define ATEMRAS_AOEREADWRITETRANSFER_OFFS_SLAVEID                   ((EC_T_DWORD)0x08)
#define ATEMRAS_AOEREADWRITETRANSFER_OFFS_TARGETNETID               ((EC_T_DWORD)0x0C)
#define ATEMRAS_AOEREADWRITETRANSFER_OFFS_TARGETPORT                ((EC_T_DWORD)0x12)
#define ATEMRAS_AOEREADWRITETRANSFER_OFFS_INDEXGROUP                ((EC_T_DWORD)0x14)
#define ATEMRAS_AOEREADWRITETRANSFER_OFFS_INDEXOFFSET               ((EC_T_DWORD)0x18)
#define ATEMRAS_AOEREADWRITETRANSFER_OFFS_READDATALENGTH            ((EC_T_DWORD)0x1C)
#define ATEMRAS_AOEREADWRITETRANSFER_OFFS_WRITEDATALENGTH           ((EC_T_DWORD)0x20)
#define ATEMRAS_AOEREADWRITETRANSFER_OFFS_OUTDATALEN                ((EC_T_DWORD)0x24)
#define ATEMRAS_AOEREADWRITETRANSFER_OFFS_TIMEOUT                   ((EC_T_DWORD)0x28)
#define ATEMRAS_AOEREADWRITETRANSFER_OFFS_ERRORCODE                 ((EC_T_DWORD)0x2C)
#define ATEMRAS_AOEREADWRITETRANSFER_OFFS_CMDRESULT                 ((EC_T_DWORD)0x30)
#define ATEMRAS_AOEREADWRITETRANSFER_OFFS_SRVRESULT                 ((EC_T_DWORD)0x34)
#define ATEMRAS_AOEREADWRITETRANSFER_OFFS_DATA                      ((EC_T_DWORD)0x38)

static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEREADWRITETRANSFER_GET_COMMANDCODE(ATEMRAS_PT_AOEREADWRITETRANSFER p)
{
  return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITETRANSFER_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEREADWRITETRANSFER_SET_COMMANDCODE(ATEMRAS_PT_AOEREADWRITETRANSFER p, EC_T_DWORD dwVal)
{
  EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITETRANSFER_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEREADWRITETRANSFER_GET_INSTANCEID(ATEMRAS_PT_AOEREADWRITETRANSFER p)
{
  return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITETRANSFER_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEREADWRITETRANSFER_SET_INSTANCEID(ATEMRAS_PT_AOEREADWRITETRANSFER p, EC_T_DWORD dwVal)
{
  EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITETRANSFER_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEREADWRITETRANSFER_GET_SLAVEID(ATEMRAS_PT_AOEREADWRITETRANSFER p)
{
  return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITETRANSFER_OFFS_SLAVEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEREADWRITETRANSFER_SET_SLAVEID(ATEMRAS_PT_AOEREADWRITETRANSFER p, EC_T_DWORD dwVal)
{
  EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITETRANSFER_OFFS_SLAVEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_AOE_NETID* ATEMRAS_AOEREADWRITETRANSFER_GET_TARGETNETID(ATEMRAS_PT_AOEREADWRITETRANSFER p, EC_T_AOE_NETID* poVal)
{
  OsMemcpy( poVal, (((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITETRANSFER_OFFS_TARGETNETID), sizeof(EC_T_AOE_NETID));
  return poVal;
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEREADWRITETRANSFER_SET_TARGETNETID(ATEMRAS_PT_AOEREADWRITETRANSFER p, EC_T_AOE_NETID* poVal)
{
  OsMemcpy((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITETRANSFER_OFFS_TARGETNETID), poVal, sizeof(EC_T_AOE_NETID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_WORD ATEMRAS_AOEREADWRITETRANSFER_GET_TARGETPORT(ATEMRAS_PT_AOEREADWRITETRANSFER p)
{
  return EC_GET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITETRANSFER_OFFS_TARGETPORT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEREADWRITETRANSFER_SET_TARGETPORT(ATEMRAS_PT_AOEREADWRITETRANSFER p, EC_T_WORD wVal)
{
  EC_SET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITETRANSFER_OFFS_TARGETPORT), wVal );
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEREADWRITETRANSFER_GET_READDATALENGTH(ATEMRAS_PT_AOEREADWRITETRANSFER p)
{
  return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITETRANSFER_OFFS_READDATALENGTH));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEREADWRITETRANSFER_SET_READDATALENGTH(ATEMRAS_PT_AOEREADWRITETRANSFER p, EC_T_DWORD dwVal)
{
  EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITETRANSFER_OFFS_READDATALENGTH), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEREADWRITETRANSFER_GET_WRITEDATALENGTH(ATEMRAS_PT_AOEREADWRITETRANSFER p)
{
  return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITETRANSFER_OFFS_WRITEDATALENGTH));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEREADWRITETRANSFER_SET_WRITEDATALENGTH(ATEMRAS_PT_AOEREADWRITETRANSFER p, EC_T_DWORD dwVal)
{
  EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITETRANSFER_OFFS_WRITEDATALENGTH), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEREADWRITETRANSFER_GET_INDEXGROUP(ATEMRAS_PT_AOEREADWRITETRANSFER p)
{
  return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITETRANSFER_OFFS_INDEXGROUP));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEREADWRITETRANSFER_SET_INDEXGROUP(ATEMRAS_PT_AOEREADWRITETRANSFER p, EC_T_DWORD dwVal)
{
  EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITETRANSFER_OFFS_INDEXGROUP), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEREADWRITETRANSFER_GET_INDEXOFFSET(ATEMRAS_PT_AOEREADWRITETRANSFER p)
{
  return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITETRANSFER_OFFS_INDEXOFFSET));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEREADWRITETRANSFER_SET_INDEXOFFSET(ATEMRAS_PT_AOEREADWRITETRANSFER p, EC_T_DWORD dwVal)
{
  EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITETRANSFER_OFFS_INDEXOFFSET), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEREADWRITETRANSFER_GET_OUTDATALEN(ATEMRAS_PT_AOEREADWRITETRANSFER p)
{
  return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITETRANSFER_OFFS_OUTDATALEN));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEREADWRITETRANSFER_SET_OUTDATALEN(ATEMRAS_PT_AOEREADWRITETRANSFER p, EC_T_DWORD dwVal)
{
  EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITETRANSFER_OFFS_OUTDATALEN), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEREADWRITETRANSFER_GET_TIMEOUT(ATEMRAS_PT_AOEREADWRITETRANSFER p)
{
  return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITETRANSFER_OFFS_TIMEOUT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEREADWRITETRANSFER_SET_TIMEOUT(ATEMRAS_PT_AOEREADWRITETRANSFER p, EC_T_DWORD dwVal)
{
  EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITETRANSFER_OFFS_TIMEOUT), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEREADWRITETRANSFER_GET_ERRORCODE(ATEMRAS_PT_AOEREADWRITETRANSFER p)
{
  return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITETRANSFER_OFFS_ERRORCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEREADWRITETRANSFER_SET_ERRORCODE(ATEMRAS_PT_AOEREADWRITETRANSFER p, EC_T_DWORD dwVal)
{
  EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITETRANSFER_OFFS_ERRORCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEREADWRITETRANSFER_GET_CMDRESULT(ATEMRAS_PT_AOEREADWRITETRANSFER p)
{
  return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITETRANSFER_OFFS_CMDRESULT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEREADWRITETRANSFER_SET_CMDRESULT(ATEMRAS_PT_AOEREADWRITETRANSFER p, EC_T_DWORD dwVal)
{
  EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITETRANSFER_OFFS_CMDRESULT), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEREADWRITETRANSFER_GET_SRVRESULT(ATEMRAS_PT_AOEREADWRITETRANSFER p)
{
  return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITETRANSFER_OFFS_SRVRESULT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEREADWRITETRANSFER_SET_SRVRESULT(ATEMRAS_PT_AOEREADWRITETRANSFER p, EC_T_DWORD dwVal)
{
  EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITETRANSFER_OFFS_SRVRESULT), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_PBYTE ATEMRAS_AOEREADWRITETRANSFER_DATA(ATEMRAS_PT_AOEREADWRITETRANSFER p)
{
  return (EC_T_PBYTE)((((EC_T_PBYTE)p)+ATEMRAS_AOEREADWRITETRANSFER_OFFS_DATA));
} EC_INLINESTOP

typedef struct _ATEMRAS_T_AOEGETSLAVENETIDTRANSFER
{
    EC_T_DWORD          dwCommandCode;      /* Command Code */              /* 0x00 */
    EC_T_DWORD          dwInstanceID;       /* Master Instance */           /* 0x04 */  

    EC_T_DWORD          dwSlaveId;          /* Slave Id */                  /* 0x08 */
    EC_T_AOE_NETID      oTargetNetId;       /* Target Net Id */             /* 0x0C */

    EC_T_DWORD          dwSrvResult;        /* Result from server */        /* 0x10 */
} EC_PACKED(1) ATEMRAS_T_AOEGETSLAVENETIDTRANSFER, *ATEMRAS_PT_AOEGETSLAVENETIDTRANSFER;

#define ATEMRAS_T_AOEGETSLAVENETIDTRANSFER_SIZE         sizeof(ATEMRAS_T_AOEGETSLAVENETIDTRANSFER)

#define ATEMRAS_AOEGETSLAVENETIDTRANSFER_OFFS_COMMANDCODE               ((EC_T_DWORD)0x00)
#define ATEMRAS_AOEGETSLAVENETIDTRANSFER_OFFS_INSTANCEID                ((EC_T_DWORD)0x04)
#define ATEMRAS_AOEGETSLAVENETIDTRANSFER_OFFS_SLAVEID                   ((EC_T_DWORD)0x08)
#define ATEMRAS_AOEGETSLAVENETIDTRANSFER_OFFS_TARGETNETID               ((EC_T_DWORD)0x0C)
#define ATEMRAS_AOEGETSLAVENETIDTRANSFER_OFFS_SRVRESULT                 ((EC_T_DWORD)0x12)

static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEGETSLAVENETIDTRANSFER_GET_COMMANDCODE(ATEMRAS_PT_AOEGETSLAVENETIDTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEGETSLAVENETIDTRANSFER_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEGETSLAVENETIDTRANSFER_SET_COMMANDCODE(ATEMRAS_PT_AOEGETSLAVENETIDTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEGETSLAVENETIDTRANSFER_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEGETSLAVENETIDTRANSFER_GET_INSTANCEID(ATEMRAS_PT_AOEGETSLAVENETIDTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEGETSLAVENETIDTRANSFER_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEGETSLAVENETIDTRANSFER_SET_INSTANCEID(ATEMRAS_PT_AOEGETSLAVENETIDTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEGETSLAVENETIDTRANSFER_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEGETSLAVENETIDTRANSFER_GET_SLAVEID(ATEMRAS_PT_AOEGETSLAVENETIDTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEGETSLAVENETIDTRANSFER_OFFS_SLAVEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEGETSLAVENETIDTRANSFER_SET_SLAVEID(ATEMRAS_PT_AOEGETSLAVENETIDTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEGETSLAVENETIDTRANSFER_OFFS_SLAVEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_AOE_NETID* ATEMRAS_AOEGETSLAVENETIDTRANSFER_GET_TARGETNETID(ATEMRAS_PT_AOEGETSLAVENETIDTRANSFER p, EC_T_AOE_NETID* poVal)
{
    OsMemcpy( poVal, (((EC_T_PBYTE)p)+ATEMRAS_AOEGETSLAVENETIDTRANSFER_OFFS_TARGETNETID), sizeof(EC_T_AOE_NETID));
    return poVal;
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEGETSLAVENETIDTRANSFER_SET_TARGETNETID(ATEMRAS_PT_AOEGETSLAVENETIDTRANSFER p, EC_T_AOE_NETID* poVal)
{
    OsMemcpy((((EC_T_PBYTE)p)+ATEMRAS_AOEGETSLAVENETIDTRANSFER_OFFS_TARGETNETID), poVal, sizeof(EC_T_AOE_NETID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEGETSLAVENETIDTRANSFER_GET_SRVRESULT(ATEMRAS_PT_AOEGETSLAVENETIDTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEGETSLAVENETIDTRANSFER_OFFS_SRVRESULT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEGETSLAVENETIDTRANSFER_SET_SRVRESULT(ATEMRAS_PT_AOEGETSLAVENETIDTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEGETSLAVENETIDTRANSFER_OFFS_SRVRESULT), dwVal);
} EC_INLINESTOP

typedef struct _ATEMRAS_T_AOEWRITETRANSFER
{
    EC_T_DWORD          dwCommandCode;      /* Command Code */              /* 0x00 */
    EC_T_DWORD          dwInstanceID;       /* Master Instance */           /* 0x04 */
    
    EC_T_DWORD          dwSlaveId;          /* Slave Id */                  /* 0x08 */
    EC_T_AOE_NETID      oTargetNetId;       /* Target Net Id */             /* 0x0C */
    EC_T_WORD           wTargetPort;        /* object Index */              /* 0x12 */
    EC_T_DWORD          dwIndexGroup;       /* Index Group */               /* 0x14 */
    EC_T_DWORD          dwIndexOffset;      /* Index Offset */              /* 0x18 */
    EC_T_DWORD          dwDataLength;       /* data length */               /* 0x1C */
    EC_T_DWORD          dwTimeout;          /* Timeout */                   /* 0x20 */
    EC_T_DWORD          dwErrorCode;        /* error code */                /* 0x24 */
    EC_T_DWORD          dwCmdResult;        /* cmd result */                /* 0x28 */

    EC_T_DWORD          dwSrvResult;        /* Result from server */        /* 0x2C */

} EC_PACKED(1) ATEMRAS_T_AOEWRITETRANSFER, *ATEMRAS_PT_AOEWRITETRANSFER;

#define ATEMRAS_T_AOEWRITETRANSFER_SIZE         sizeof(ATEMRAS_T_AOEWRITETRANSFER)

#define ATEMRAS_AOEWRITETRANSFER_OFFS_COMMANDCODE               ((EC_T_DWORD)0x00)
#define ATEMRAS_AOEWRITETRANSFER_OFFS_INSTANCEID                ((EC_T_DWORD)0x04)
#define ATEMRAS_AOEWRITETRANSFER_OFFS_SLAVEID                   ((EC_T_DWORD)0x08)
#define ATEMRAS_AOEWRITETRANSFER_OFFS_TARGETNETID               ((EC_T_DWORD)0x0C)
#define ATEMRAS_AOEWRITETRANSFER_OFFS_TARGETPORT                ((EC_T_DWORD)0x12)
#define ATEMRAS_AOEWRITETRANSFER_OFFS_INDEXGROUP                ((EC_T_DWORD)0x14)
#define ATEMRAS_AOEWRITETRANSFER_OFFS_INDEXOFFSET               ((EC_T_DWORD)0x18)
#define ATEMRAS_AOEWRITETRANSFER_OFFS_DATALENGTH                ((EC_T_DWORD)0x1C)
#define ATEMRAS_AOEWRITETRANSFER_OFFS_TIMEOUT                   ((EC_T_DWORD)0x20)
#define ATEMRAS_AOEWRITETRANSFER_OFFS_ERRORCODE                 ((EC_T_DWORD)0x24)
#define ATEMRAS_AOEWRITETRANSFER_OFFS_CMDRESULT                 ((EC_T_DWORD)0x28)
#define ATEMRAS_AOEWRITETRANSFER_OFFS_SRVRESULT                 ((EC_T_DWORD)0x2C)
#define ATEMRAS_AOEWRITETRANSFER_OFFS_DATA                      ((EC_T_DWORD)0x30)

static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEWRITETRANSFER_GET_COMMANDCODE(ATEMRAS_PT_AOEWRITETRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEWRITETRANSFER_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEWRITETRANSFER_SET_COMMANDCODE(ATEMRAS_PT_AOEWRITETRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEWRITETRANSFER_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEWRITETRANSFER_GET_INSTANCEID(ATEMRAS_PT_AOEWRITETRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEWRITETRANSFER_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEWRITETRANSFER_SET_INSTANCEID(ATEMRAS_PT_AOEWRITETRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEWRITETRANSFER_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEWRITETRANSFER_GET_SLAVEID(ATEMRAS_PT_AOEWRITETRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEWRITETRANSFER_OFFS_SLAVEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEWRITETRANSFER_SET_SLAVEID(ATEMRAS_PT_AOEWRITETRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEWRITETRANSFER_OFFS_SLAVEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_AOE_NETID* ATEMRAS_AOEWRITETRANSFER_GET_TARGETNETID(ATEMRAS_PT_AOEWRITETRANSFER p, EC_T_AOE_NETID* poVal)
{
    OsMemcpy( poVal, (((EC_T_PBYTE)p)+ATEMRAS_AOEWRITETRANSFER_OFFS_TARGETNETID), sizeof(EC_T_AOE_NETID));
    return poVal;
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEWRITETRANSFER_SET_TARGETNETID(ATEMRAS_PT_AOEWRITETRANSFER p, EC_T_AOE_NETID* poVal)
{
    OsMemcpy((((EC_T_PBYTE)p)+ATEMRAS_AOEWRITETRANSFER_OFFS_TARGETNETID), poVal, sizeof(EC_T_AOE_NETID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_WORD ATEMRAS_AOEWRITETRANSFER_GET_TARGETPORT(ATEMRAS_PT_AOEWRITETRANSFER p)
{
    return EC_GET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_AOEWRITETRANSFER_OFFS_TARGETPORT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEWRITETRANSFER_SET_TARGETPORT(ATEMRAS_PT_AOEWRITETRANSFER p, EC_T_WORD wVal)
{
    EC_SET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_AOEWRITETRANSFER_OFFS_TARGETPORT), wVal );
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEWRITETRANSFER_GET_DATALENGTH(ATEMRAS_PT_AOEWRITETRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEWRITETRANSFER_OFFS_DATALENGTH));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEWRITETRANSFER_SET_DATALENGTH(ATEMRAS_PT_AOEWRITETRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEWRITETRANSFER_OFFS_DATALENGTH), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEWRITETRANSFER_GET_INDEXGROUP(ATEMRAS_PT_AOEWRITETRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEWRITETRANSFER_OFFS_INDEXGROUP));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEWRITETRANSFER_SET_INDEXGROUP(ATEMRAS_PT_AOEWRITETRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEWRITETRANSFER_OFFS_INDEXGROUP), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEWRITETRANSFER_GET_INDEXOFFSET(ATEMRAS_PT_AOEWRITETRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEWRITETRANSFER_OFFS_INDEXOFFSET));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEWRITETRANSFER_SET_INDEXOFFSET(ATEMRAS_PT_AOEWRITETRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEWRITETRANSFER_OFFS_INDEXOFFSET), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEWRITETRANSFER_GET_TIMEOUT(ATEMRAS_PT_AOEWRITETRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEWRITETRANSFER_OFFS_TIMEOUT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEWRITETRANSFER_SET_TIMEOUT(ATEMRAS_PT_AOEWRITETRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEWRITETRANSFER_OFFS_TIMEOUT), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEWRITETRANSFER_GET_ERRORCODE(ATEMRAS_PT_AOEWRITETRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEWRITETRANSFER_OFFS_ERRORCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEWRITETRANSFER_SET_ERRORCODE(ATEMRAS_PT_AOEWRITETRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEWRITETRANSFER_OFFS_ERRORCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEWRITETRANSFER_GET_CMDRESULT(ATEMRAS_PT_AOEWRITETRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEWRITETRANSFER_OFFS_CMDRESULT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEWRITETRANSFER_SET_CMDRESULT(ATEMRAS_PT_AOEWRITETRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEWRITETRANSFER_OFFS_CMDRESULT), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEWRITETRANSFER_GET_SRVRESULT(ATEMRAS_PT_AOEWRITETRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEWRITETRANSFER_OFFS_SRVRESULT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEWRITETRANSFER_SET_SRVRESULT(ATEMRAS_PT_AOEWRITETRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_AOEWRITETRANSFER_OFFS_SRVRESULT), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_PBYTE ATEMRAS_AOEWRITETRANSFER_DATA(ATEMRAS_PT_AOEWRITETRANSFER p)
{
    return (EC_T_PBYTE)((((EC_T_PBYTE)p)+ATEMRAS_AOEWRITETRANSFER_OFFS_DATA));
} EC_INLINESTOP

typedef struct _ATEMRAS_T_AOEWRITECONTROLTRANSFER
{
    EC_T_DWORD          dwCommandCode;      /* Command Code */              /* 0x00 */
    EC_T_DWORD          dwInstanceID;       /* Master Instance */           /* 0x04 */
    EC_T_DWORD          dwSlaveId;          /* Slave Id */                  /* 0x08 */
    EC_T_AOE_NETID      oTargetNetId;       /* Target Net Id */             /* 0x0C */
    EC_T_WORD           wTargetPort;        /* object Index */              /* 0x12 */
    EC_T_WORD           wAoEState;          /* AoE state */                 /* 0x14 */
    EC_T_WORD           wDeviceState;       /* device state */              /* 0x16 */
    EC_T_DWORD          dwDataLength;       /* data length */               /* 0x18 */
    EC_T_DWORD          dwTimeout;          /* Timeout */                   /* 0x1C */
    EC_T_DWORD          dwErrorCode;        /* error code */                /* 0x20 */
    EC_T_DWORD          dwCmdResult;        /* cmd result */                /* 0x24 */
    EC_T_DWORD          dwSrvResult;        /* Result from server */        /* 0x28 */
} EC_PACKED(1) ATEMRAS_T_AOEWRITECONTROLTRANSFER, *ATEMRAS_PT_AOEWRITECONTROLTRANSFER;
#define ATEMRAS_T_AOEWRITECONTROLTRANSFER_SIZE sizeof(ATEMRAS_T_AOEWRITECONTROLTRANSFER)

#define ATEMRAS_AOEWRITECONTROLTRANSFER_OFFS_COMMANDCODE               ((EC_T_DWORD)0x00)
#define ATEMRAS_AOEWRITECONTROLTRANSFER_OFFS_INSTANCEID                ((EC_T_DWORD)0x04)
#define ATEMRAS_AOEWRITECONTROLTRANSFER_OFFS_SLAVEID                   ((EC_T_DWORD)0x08)
#define ATEMRAS_AOEWRITECONTROLTRANSFER_OFFS_TARGETNETID               ((EC_T_DWORD)0x0C)
#define ATEMRAS_AOEWRITECONTROLTRANSFER_OFFS_TARGETPORT                ((EC_T_DWORD)0x12)
#define ATEMRAS_AOEWRITECONTROLTRANSFER_OFFS_AOESTATE                  ((EC_T_DWORD)0x14)
#define ATEMRAS_AOEWRITECONTROLTRANSFER_OFFS_DEVICESTATE               ((EC_T_DWORD)0x16)
#define ATEMRAS_AOEWRITECONTROLTRANSFER_OFFS_DATALENGTH                ((EC_T_DWORD)0x18)
#define ATEMRAS_AOEWRITECONTROLTRANSFER_OFFS_TIMEOUT                   ((EC_T_DWORD)0x1C)
#define ATEMRAS_AOEWRITECONTROLTRANSFER_OFFS_ERRORCODE                 ((EC_T_DWORD)0x20)
#define ATEMRAS_AOEWRITECONTROLTRANSFER_OFFS_CMDRESULT                 ((EC_T_DWORD)0x24)
#define ATEMRAS_AOEWRITECONTROLTRANSFER_OFFS_SRVRESULT                 ((EC_T_DWORD)0x28)
#define ATEMRAS_AOEWRITECONTROLTRANSFER_OFFS_DATA                      ((EC_T_DWORD)0x2C)

static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEWRITECONTROLTRANSFER_GET_COMMANDCODE(ATEMRAS_PT_AOEWRITECONTROLTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_AOEWRITECONTROLTRANSFER_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEWRITECONTROLTRANSFER_SET_COMMANDCODE(ATEMRAS_PT_AOEWRITECONTROLTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_AOEWRITECONTROLTRANSFER_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEWRITECONTROLTRANSFER_GET_INSTANCEID(ATEMRAS_PT_AOEWRITECONTROLTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_AOEWRITECONTROLTRANSFER_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEWRITECONTROLTRANSFER_SET_INSTANCEID(ATEMRAS_PT_AOEWRITECONTROLTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_AOEWRITECONTROLTRANSFER_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEWRITECONTROLTRANSFER_GET_SLAVEID(ATEMRAS_PT_AOEWRITECONTROLTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_AOEWRITECONTROLTRANSFER_OFFS_SLAVEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEWRITECONTROLTRANSFER_SET_SLAVEID(ATEMRAS_PT_AOEWRITECONTROLTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_AOEWRITECONTROLTRANSFER_OFFS_SLAVEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_AOE_NETID* ATEMRAS_AOEWRITECONTROLTRANSFER_GET_TARGETNETID(ATEMRAS_PT_AOEWRITECONTROLTRANSFER p, EC_T_AOE_NETID* poVal)
{
    OsMemcpy(poVal, (((EC_T_PBYTE)p) + ATEMRAS_AOEWRITECONTROLTRANSFER_OFFS_TARGETNETID), sizeof(EC_T_AOE_NETID));
    return poVal;
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEWRITECONTROLTRANSFER_SET_TARGETNETID(ATEMRAS_PT_AOEWRITECONTROLTRANSFER p, EC_T_AOE_NETID* poVal)
{
    OsMemcpy((((EC_T_PBYTE)p) + ATEMRAS_AOEWRITECONTROLTRANSFER_OFFS_TARGETNETID), poVal, sizeof(EC_T_AOE_NETID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_WORD ATEMRAS_AOEWRITECONTROLTRANSFER_GET_TARGETPORT(ATEMRAS_PT_AOEWRITECONTROLTRANSFER p)
{
    return EC_GET_FRM_WORD((((EC_T_PBYTE)p) + ATEMRAS_AOEWRITECONTROLTRANSFER_OFFS_TARGETPORT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEWRITECONTROLTRANSFER_SET_TARGETPORT(ATEMRAS_PT_AOEWRITECONTROLTRANSFER p, EC_T_WORD wVal)
{
    EC_SET_FRM_WORD((((EC_T_PBYTE)p) + ATEMRAS_AOEWRITECONTROLTRANSFER_OFFS_TARGETPORT), wVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_WORD ATEMRAS_AOEWRITECONTROLTRANSFER_GET_AOESTATE(ATEMRAS_PT_AOEWRITECONTROLTRANSFER p)
{
    return EC_GET_FRM_WORD((((EC_T_PBYTE)p) + ATEMRAS_AOEWRITECONTROLTRANSFER_OFFS_AOESTATE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEWRITECONTROLTRANSFER_SET_AOESTATE(ATEMRAS_PT_AOEWRITECONTROLTRANSFER p, EC_T_WORD wVal)
{
    EC_SET_FRM_WORD((((EC_T_PBYTE)p) + ATEMRAS_AOEWRITECONTROLTRANSFER_OFFS_AOESTATE), wVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_WORD ATEMRAS_AOEWRITECONTROLTRANSFER_GET_DEVICESTATE(ATEMRAS_PT_AOEWRITECONTROLTRANSFER p)
{
    return EC_GET_FRM_WORD((((EC_T_PBYTE)p) + ATEMRAS_AOEWRITECONTROLTRANSFER_OFFS_DEVICESTATE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEWRITECONTROLTRANSFER_SET_DEVICESTATE(ATEMRAS_PT_AOEWRITECONTROLTRANSFER p, EC_T_WORD wVal)
{
    EC_SET_FRM_WORD((((EC_T_PBYTE)p) + ATEMRAS_AOEWRITECONTROLTRANSFER_OFFS_DEVICESTATE), wVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEWRITECONTROLTRANSFER_GET_DATALENGTH(ATEMRAS_PT_AOEWRITECONTROLTRANSFER p)
{
    return EC_GET_FRM_WORD((((EC_T_PBYTE)p) + ATEMRAS_AOEWRITECONTROLTRANSFER_OFFS_DATALENGTH));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEWRITECONTROLTRANSFER_SET_DATALENGTH(ATEMRAS_PT_AOEWRITECONTROLTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_AOEWRITECONTROLTRANSFER_OFFS_DATALENGTH), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEWRITECONTROLTRANSFER_GET_TIMEOUT(ATEMRAS_PT_AOEWRITECONTROLTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_AOEWRITECONTROLTRANSFER_OFFS_TIMEOUT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEWRITECONTROLTRANSFER_SET_TIMEOUT(ATEMRAS_PT_AOEWRITECONTROLTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_AOEWRITECONTROLTRANSFER_OFFS_TIMEOUT), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEWRITECONTROLTRANSFER_GET_ERRORCODE(ATEMRAS_PT_AOEWRITECONTROLTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_AOEWRITECONTROLTRANSFER_OFFS_ERRORCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEWRITECONTROLTRANSFER_SET_ERRORCODE(ATEMRAS_PT_AOEWRITECONTROLTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_AOEWRITECONTROLTRANSFER_OFFS_ERRORCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEWRITECONTROLTRANSFER_GET_CMDRESULT(ATEMRAS_PT_AOEWRITECONTROLTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_AOEWRITECONTROLTRANSFER_OFFS_CMDRESULT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEWRITECONTROLTRANSFER_SET_CMDRESULT(ATEMRAS_PT_AOEWRITECONTROLTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_AOEWRITECONTROLTRANSFER_OFFS_CMDRESULT), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_AOEWRITECONTROLTRANSFER_GET_SRVRESULT(ATEMRAS_PT_AOEWRITECONTROLTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_AOEWRITECONTROLTRANSFER_OFFS_SRVRESULT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_AOEWRITECONTROLTRANSFER_SET_SRVRESULT(ATEMRAS_PT_AOEWRITECONTROLTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_AOEWRITECONTROLTRANSFER_OFFS_SRVRESULT), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_PBYTE ATEMRAS_AOEWRITECONTROLTRANSFER_DATA(ATEMRAS_PT_AOEWRITECONTROLTRANSFER p)
{
    return (EC_T_PBYTE)((((EC_T_PBYTE)p) + ATEMRAS_AOEWRITECONTROLTRANSFER_OFFS_DATA));
} EC_INLINESTOP

typedef struct _ATEMRAS_T_FOEUPLOADCMPLTRANSFER
{
    EC_T_DWORD          dwCommandCode;      /* Command Code */              /* 0x00 */
    EC_T_DWORD          dwInstanceID;       /* Master Instance */           /* 0x04 */

    EC_T_DWORD          dwSlaveId;          /* Slave Id */                  /* 0x08 */

    
    EC_T_CHAR           szFileName[ATEMRAS_MAX_FILE_NAME_SIZE];       
                                            /* FoE File Name */             /* 0x0C */
    EC_T_DWORD          dwFileNameLength;   /* Length of FoE FileName */    /* MAX_FILE_NAME_SIZE + 0x0C */
    EC_T_DWORD          dwPasswd;           /* Slave Password */            /* MAX_FILE_NAME_SIZE + 0x10 */
    EC_T_DWORD          dwDataLen;          /* data length */               /* MAX_FILE_NAME_SIZE + 0x14 */
    EC_T_DWORD          dwOutDataLen;       /* out data length */           /* MAX_FILE_NAME_SIZE + 0x18 */
    EC_T_DWORD          dwTimeout;          /* Timeout */                   /* MAX_FILE_NAME_SIZE + 0x1C */
   
    EC_T_DWORD          dwSrvResult;        /* Result from server */        /* MAX_FILE_NAME_SIZE + 0x20 */

} EC_PACKED(1) ATEMRAS_T_FOEUPLOADCMPLTRANSFER, *ATEMRAS_PT_FOEUPLOADCMPLTRANSFER;

#define ATEMRAS_T_FOEUPLOADCMPLTRANSFER_SIZE(dwVersion) (((dwVersion)<0x0109010C)?68:sizeof(ATEMRAS_T_FOEUPLOADCMPLTRANSFER))

#define ATEMRAS_FOEUPLOADCMPLTRANSFER_OFFS_COMMANDCODE               ((EC_T_DWORD)0x00)
#define ATEMRAS_FOEUPLOADCMPLTRANSFER_OFFS_INSTANCEID                ((EC_T_DWORD)0x04)
#define ATEMRAS_FOEUPLOADCMPLTRANSFER_OFFS_SLAVEID                   ((EC_T_DWORD)0x08)
#define ATEMRAS_FOEUPLOADCMPLTRANSFER_OFFS_FILENAME                  ((EC_T_DWORD)0x0C)
#define ATEMRAS_FOEUPLOADCMPLTRANSFER_OFFS_FILENAMELENGTH(dwVersion) ((EC_T_DWORD)0x0C+ATEMRAS_FILE_NAME_SIZE((dwVersion)))
#define ATEMRAS_FOEUPLOADCMPLTRANSFER_OFFS_PASSWD(dwVersion)         ((EC_T_DWORD)0x10+ATEMRAS_FILE_NAME_SIZE((dwVersion)))
#define ATEMRAS_FOEUPLOADCMPLTRANSFER_OFFS_DATALEN(dwVersion)        ((EC_T_DWORD)0x14+ATEMRAS_FILE_NAME_SIZE((dwVersion)))
#define ATEMRAS_FOEUPLOADCMPLTRANSFER_OFFS_OUTDATALEN(dwVersion)     ((EC_T_DWORD)0x18+ATEMRAS_FILE_NAME_SIZE((dwVersion)))
#define ATEMRAS_FOEUPLOADCMPLTRANSFER_OFFS_TIMEOUT(dwVersion)        ((EC_T_DWORD)0x1C+ATEMRAS_FILE_NAME_SIZE((dwVersion)))
#define ATEMRAS_FOEUPLOADCMPLTRANSFER_OFFS_SRVRESULT(dwVersion)      ((EC_T_DWORD)0x20+ATEMRAS_FILE_NAME_SIZE((dwVersion)))
#define ATEMRAS_FOEUPLOADCMPLTRANSFER_OFFS_DATA(dwVersion)           ((EC_T_DWORD)0x24+ATEMRAS_FILE_NAME_SIZE((dwVersion)))

static EC_INLINESTART EC_T_DWORD ATEMRAS_FOEUPLOADCMPLTRANSFER_GET_COMMANDCODE(ATEMRAS_PT_FOEUPLOADCMPLTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_FOEUPLOADCMPLTRANSFER_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_FOEUPLOADCMPLTRANSFER_SET_COMMANDCODE(ATEMRAS_PT_FOEUPLOADCMPLTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_FOEUPLOADCMPLTRANSFER_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_FOEUPLOADCMPLTRANSFER_GET_INSTANCEID(ATEMRAS_PT_FOEUPLOADCMPLTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_FOEUPLOADCMPLTRANSFER_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_FOEUPLOADCMPLTRANSFER_SET_INSTANCEID(ATEMRAS_PT_FOEUPLOADCMPLTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_FOEUPLOADCMPLTRANSFER_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_FOEUPLOADCMPLTRANSFER_GET_SLAVEID(ATEMRAS_PT_FOEUPLOADCMPLTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_FOEUPLOADCMPLTRANSFER_OFFS_SLAVEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_FOEUPLOADCMPLTRANSFER_SET_SLAVEID(ATEMRAS_PT_FOEUPLOADCMPLTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_FOEUPLOADCMPLTRANSFER_OFFS_SLAVEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_CHAR* ATEMRAS_FOEUPLOADCMPLTRANSFER_FILENAME(ATEMRAS_PT_FOEUPLOADCMPLTRANSFER p)
{
    return (EC_T_CHAR*)((((EC_T_PBYTE)p)+ATEMRAS_FOEUPLOADCMPLTRANSFER_OFFS_FILENAME));
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_FOEUPLOADCMPLTRANSFER_GET_FILENAMELENGH(ATEMRAS_PT_FOEUPLOADCMPLTRANSFER p, EC_T_DWORD dwVersion)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_FOEUPLOADCMPLTRANSFER_OFFS_FILENAMELENGTH(dwVersion)));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_FOEUPLOADCMPLTRANSFER_SET_FILENAMELENGH(ATEMRAS_PT_FOEUPLOADCMPLTRANSFER p, EC_T_DWORD dwVal, EC_T_DWORD dwVersion)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_FOEUPLOADCMPLTRANSFER_OFFS_FILENAMELENGTH(dwVersion)), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_FOEUPLOADCMPLTRANSFER_GET_PASSWD(ATEMRAS_PT_FOEUPLOADCMPLTRANSFER p, EC_T_DWORD dwVersion)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_FOEUPLOADCMPLTRANSFER_OFFS_PASSWD(dwVersion)));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_FOEUPLOADCMPLTRANSFER_SET_PASSWD(ATEMRAS_PT_FOEUPLOADCMPLTRANSFER p, EC_T_DWORD dwVal, EC_T_DWORD dwVersion)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_FOEUPLOADCMPLTRANSFER_OFFS_PASSWD(dwVersion)), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_FOEUPLOADCMPLTRANSFER_GET_DATALEN(ATEMRAS_PT_FOEUPLOADCMPLTRANSFER p, EC_T_DWORD dwVersion)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_FOEUPLOADCMPLTRANSFER_OFFS_DATALEN(dwVersion)));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_FOEUPLOADCMPLTRANSFER_SET_DATALEN(ATEMRAS_PT_FOEUPLOADCMPLTRANSFER p, EC_T_DWORD dwVal, EC_T_DWORD dwVersion)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_FOEUPLOADCMPLTRANSFER_OFFS_DATALEN(dwVersion)), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_FOEUPLOADCMPLTRANSFER_GET_OUTDATALEN(ATEMRAS_PT_FOEUPLOADCMPLTRANSFER p, EC_T_DWORD dwVersion)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_FOEUPLOADCMPLTRANSFER_OFFS_OUTDATALEN(dwVersion)));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_FOEUPLOADCMPLTRANSFER_SET_OUTDATALEN(ATEMRAS_PT_FOEUPLOADCMPLTRANSFER p, EC_T_DWORD dwVal, EC_T_DWORD dwVersion)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_FOEUPLOADCMPLTRANSFER_OFFS_OUTDATALEN(dwVersion)), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_FOEUPLOADCMPLTRANSFER_GET_TIMEOUT(ATEMRAS_PT_FOEUPLOADCMPLTRANSFER p, EC_T_DWORD dwVersion)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_FOEUPLOADCMPLTRANSFER_OFFS_TIMEOUT(dwVersion)));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_FOEUPLOADCMPLTRANSFER_SET_TIMEOUT(ATEMRAS_PT_FOEUPLOADCMPLTRANSFER p, EC_T_DWORD dwVal, EC_T_DWORD dwVersion)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_FOEUPLOADCMPLTRANSFER_OFFS_TIMEOUT(dwVersion)), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_FOEUPLOADCMPLTRANSFER_GET_SRVRESULT(ATEMRAS_PT_FOEUPLOADCMPLTRANSFER p, EC_T_DWORD dwVersion)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_FOEUPLOADCMPLTRANSFER_OFFS_SRVRESULT(dwVersion)));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_FOEUPLOADCMPLTRANSFER_SET_SRVRESULT(ATEMRAS_PT_FOEUPLOADCMPLTRANSFER p, EC_T_DWORD dwVal, EC_T_DWORD dwVersion)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_FOEUPLOADCMPLTRANSFER_OFFS_SRVRESULT(dwVersion)), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_PBYTE ATEMRAS_FOEUPLOADCMPLTRANSFER_DATA(ATEMRAS_PT_FOEUPLOADCMPLTRANSFER p, EC_T_DWORD dwVersion)
{
    return (EC_T_PBYTE)((((EC_T_PBYTE)p)+ATEMRAS_FOEUPLOADCMPLTRANSFER_OFFS_DATA(dwVersion)));
} EC_INLINESTOP

typedef struct _ATEMRAS_T_FOEUPLOADTRANSFER
{
    EC_T_DWORD          dwCommandCode;      /* Command Code */              /* 0x00 */
    EC_T_DWORD          dwInstanceID;       /* Master Instance */           /* 0x04 */

    EC_T_DWORD          dwMbxTferId;        /* Id of Mailbox Transfer Obj *//* 0x08 */
    EC_T_DWORD          dwSlaveId;          /* Slave Id */                  /* 0x0C */
    
    EC_T_CHAR           szFileName[ATEMRAS_MAX_FILE_NAME_SIZE];    /* FoE File Name */             /* 0x10 */
    EC_T_DWORD          dwFileNameLength;   /* Length of FoE FileName */    /* MAX_FILE_NAME_SIZE + 0x10 */
    EC_T_DWORD          dwPasswd;           /* Slave Password */            /* MAX_FILE_NAME_SIZE + 0x14 */
    EC_T_DWORD          dwTimeout;          /* Timeout */                   /* MAX_FILE_NAME_SIZE + 0x18 */

    EC_T_DWORD          dwSrvResult;        /* Result from server */        /* MAX_FILE_NAME_SIZE + 0x1C */
    ATEMRAS_T_MBXTFER   oTferObj;           /* Tfer Obj */                  /* MAX_FILE_NAME_SIZE + 0x20 */

} EC_PACKED(1) ATEMRAS_T_FOEUPLOADTRANSFER, *ATEMRAS_PT_FOEUPLOADTRANSFER;

#define ATEMRAS_T_FOEUPLOADTRANSFER_SIZE(dwVersion) (((dwVersion)<0x0109010C)?96:sizeof(ATEMRAS_T_FOEUPLOADTRANSFER))

#define ATEMRAS_FOEUPLOADTRANSFER_OFFS_COMMANDCODE               ((EC_T_DWORD)0x00)
#define ATEMRAS_FOEUPLOADTRANSFER_OFFS_INSTANCEID                ((EC_T_DWORD)0x04)
#define ATEMRAS_FOEUPLOADTRANSFER_OFFS_MBXOBJID                  ((EC_T_DWORD)0x08)
#define ATEMRAS_FOEUPLOADTRANSFER_OFFS_SLAVEID                   ((EC_T_DWORD)0x0C)
#define ATEMRAS_FOEUPLOADTRANSFER_OFFS_FILENAME                  ((EC_T_DWORD)0x10)
#define ATEMRAS_FOEUPLOADTRANSFER_OFFS_FILENAMELENGTH(dwVersion) ((EC_T_DWORD)0x10+ATEMRAS_FILE_NAME_SIZE((dwVersion)))
#define ATEMRAS_FOEUPLOADTRANSFER_OFFS_PASSWD(dwVersion)         ((EC_T_DWORD)0x14+ATEMRAS_FILE_NAME_SIZE((dwVersion)))
#define ATEMRAS_FOEUPLOADTRANSFER_OFFS_TIMEOUT(dwVersion)        ((EC_T_DWORD)0x18+ATEMRAS_FILE_NAME_SIZE((dwVersion)))
#define ATEMRAS_FOEUPLOADTRANSFER_OFFS_SRVRESULT(dwVersion)      ((EC_T_DWORD)0x1C+ATEMRAS_FILE_NAME_SIZE((dwVersion)))
#define ATEMRAS_FOEUPLOADTRANSFER_OFFS_TFEROBJ(dwVersion)        ((EC_T_DWORD)0x20+ATEMRAS_FILE_NAME_SIZE((dwVersion)))
#define ATEMRAS_FOEUPLOADTRANSFER_OFFS_DATA(dwVersion)           ((EC_T_DWORD)0x20+ATEMRAS_FILE_NAME_SIZE((dwVersion))+ATEMRAS_T_MBXTFER_SIZE)

static EC_INLINESTART EC_T_DWORD ATEMRAS_FOEUPLOADTRANSFER_GET_COMMANDCODE(ATEMRAS_PT_FOEUPLOADTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_FOEUPLOADTRANSFER_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_FOEUPLOADTRANSFER_SET_COMMANDCODE(ATEMRAS_PT_FOEUPLOADTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_FOEUPLOADTRANSFER_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_FOEUPLOADTRANSFER_GET_INSTANCEID(ATEMRAS_PT_FOEUPLOADTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_FOEUPLOADTRANSFER_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_FOEUPLOADTRANSFER_SET_INSTANCEID(ATEMRAS_PT_FOEUPLOADTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_FOEUPLOADTRANSFER_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_FOEUPLOADTRANSFER_GET_MBXOBJID(ATEMRAS_PT_FOEUPLOADTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_FOEUPLOADTRANSFER_OFFS_MBXOBJID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_FOEUPLOADTRANSFER_SET_MBXOBJID(ATEMRAS_PT_FOEUPLOADTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_FOEUPLOADTRANSFER_OFFS_MBXOBJID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_FOEUPLOADTRANSFER_GET_SLAVEID(ATEMRAS_PT_FOEUPLOADTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_FOEUPLOADTRANSFER_OFFS_SLAVEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_FOEUPLOADTRANSFER_SET_SLAVEID(ATEMRAS_PT_FOEUPLOADTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_FOEUPLOADTRANSFER_OFFS_SLAVEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_CHAR* ATEMRAS_FOEUPLOADTRANSFER_FILENAME(ATEMRAS_PT_FOEUPLOADTRANSFER p)
{
    return (EC_T_CHAR*)((((EC_T_PBYTE)p) + ATEMRAS_FOEUPLOADTRANSFER_OFFS_FILENAME));
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_FOEUPLOADTRANSFER_GET_FILENAMELENGH(ATEMRAS_PT_FOEUPLOADTRANSFER p, EC_T_DWORD dwVersion)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_FOEUPLOADTRANSFER_OFFS_FILENAMELENGTH(dwVersion)));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_FOEUPLOADTRANSFER_SET_FILENAMELENGH(ATEMRAS_PT_FOEUPLOADTRANSFER p, EC_T_DWORD dwVal, EC_T_DWORD dwVersion)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_FOEUPLOADTRANSFER_OFFS_FILENAMELENGTH(dwVersion)), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_FOEUPLOADTRANSFER_GET_PASSWD(ATEMRAS_PT_FOEUPLOADTRANSFER p, EC_T_DWORD dwVersion)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_FOEUPLOADTRANSFER_OFFS_PASSWD(dwVersion)));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_FOEUPLOADTRANSFER_SET_PASSWD(ATEMRAS_PT_FOEUPLOADTRANSFER p, EC_T_DWORD dwVal, EC_T_DWORD dwVersion)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_FOEUPLOADTRANSFER_OFFS_PASSWD(dwVersion)), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_FOEUPLOADTRANSFER_GET_TIMEOUT(ATEMRAS_PT_FOEUPLOADTRANSFER p, EC_T_DWORD dwVersion)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_FOEUPLOADTRANSFER_OFFS_TIMEOUT(dwVersion)));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_FOEUPLOADTRANSFER_SET_TIMEOUT(ATEMRAS_PT_FOEUPLOADTRANSFER p, EC_T_DWORD dwVal, EC_T_DWORD dwVersion)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_FOEUPLOADTRANSFER_OFFS_TIMEOUT(dwVersion)), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_FOEUPLOADTRANSFER_GET_SRVRESULT(ATEMRAS_PT_FOEUPLOADTRANSFER p, EC_T_DWORD dwVersion)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_FOEUPLOADTRANSFER_OFFS_SRVRESULT(dwVersion)));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_FOEUPLOADTRANSFER_SET_SRVRESULT(ATEMRAS_PT_FOEUPLOADTRANSFER p, EC_T_DWORD dwVal, EC_T_DWORD dwVersion)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_FOEUPLOADTRANSFER_OFFS_SRVRESULT(dwVersion)), dwVal);
} EC_INLINESTOP
static EC_INLINESTART ATEMRAS_PT_MBXTFER ATEMRAS_FOEUPLOADTRANSFER_TFEROBJ(ATEMRAS_PT_FOEUPLOADTRANSFER p, EC_T_DWORD dwVersion)
{
    return (ATEMRAS_PT_MBXTFER)((((EC_T_PBYTE)p) + ATEMRAS_FOEUPLOADTRANSFER_OFFS_TFEROBJ(dwVersion)));
} EC_INLINESTOP
static EC_INLINESTART EC_T_PBYTE ATEMRAS_FOEUPLOADTRANSFER_DATA(ATEMRAS_PT_FOEUPLOADTRANSFER p, EC_T_DWORD dwVersion)
{
    return (EC_T_PBYTE)((((EC_T_PBYTE)p) + ATEMRAS_FOEUPLOADTRANSFER_OFFS_DATA(dwVersion)));
} EC_INLINESTOP

typedef struct _ATEMRAS_T_FOEDOWNLOADCMPLTRANSFER
{
    EC_T_DWORD          dwCommandCode;      /* Command Code */              /* 0x00 */
    EC_T_DWORD          dwInstanceID;       /* Master Instance */           /* 0x04 */

    EC_T_DWORD          dwSlaveId;          /* Slave Id */                  /* 0x08 */

    
    EC_T_CHAR           szFileName[MAX_FILE_NAME_SIZE];       
                                            /* FoE File Name */             /* 0x0C */
    EC_T_DWORD          dwFileNameLength;   /* Length of FoE FileName */    /* MAX_FILE_NAME_SIZE + 0x0C */
    EC_T_DWORD          dwPasswd;           /* Slave Password */            /* MAX_FILE_NAME_SIZE + 0x10 */
    EC_T_DWORD          dwDataLen;          /* data length */               /* MAX_FILE_NAME_SIZE + 0x14 */
    EC_T_DWORD          dwTimeout;          /* Timeout */                   /* MAX_FILE_NAME_SIZE + 0x18 */
   
    EC_T_DWORD          dwSrvResult;        /* Result from server */        /* MAX_FILE_NAME_SIZE + 0x1C */

} EC_PACKED(1) ATEMRAS_T_FOEDOWNLOADCMPLTRANSFER, *ATEMRAS_PT_FOEDOWNLOADCMPLTRANSFER;

#define ATEMRAS_T_FOEDOWNLOADCMPLTRANSFER_SIZE(dwVersion) (((dwVersion)<0x0109010C)?64:sizeof(ATEMRAS_T_FOEDOWNLOADCMPLTRANSFER))

#define ATEMRAS_FOEDOWNLOADCMPLTRANSFER_OFFS_COMMANDCODE               ((EC_T_DWORD)0x00)
#define ATEMRAS_FOEDOWNLOADCMPLTRANSFER_OFFS_INSTANCEID                ((EC_T_DWORD)0x04)
#define ATEMRAS_FOEDOWNLOADCMPLTRANSFER_OFFS_SLAVEID                   ((EC_T_DWORD)0x08)
#define ATEMRAS_FOEDOWNLOADCMPLTRANSFER_OFFS_FILENAME                  ((EC_T_DWORD)0x0C)
#define ATEMRAS_FOEDOWNLOADCMPLTRANSFER_OFFS_FILENAMELENGTH(dwVersion) ((EC_T_DWORD)0x0C+ATEMRAS_FILE_NAME_SIZE((dwVersion)))
#define ATEMRAS_FOEDOWNLOADCMPLTRANSFER_OFFS_PASSWD(dwVersion)         ((EC_T_DWORD)0x10+ATEMRAS_FILE_NAME_SIZE((dwVersion)))
#define ATEMRAS_FOEDOWNLOADCMPLTRANSFER_OFFS_DATALEN(dwVersion)        ((EC_T_DWORD)0x14+ATEMRAS_FILE_NAME_SIZE((dwVersion)))
#define ATEMRAS_FOEDOWNLOADCMPLTRANSFER_OFFS_TIMEOUT(dwVersion)        ((EC_T_DWORD)0x18+ATEMRAS_FILE_NAME_SIZE((dwVersion)))
#define ATEMRAS_FOEDOWNLOADCMPLTRANSFER_OFFS_SRVRESULT(dwVersion)      ((EC_T_DWORD)0x1C+ATEMRAS_FILE_NAME_SIZE((dwVersion)))
#define ATEMRAS_FOEDOWNLOADCMPLTRANSFER_OFFS_DATA(dwVersion)           ((EC_T_DWORD)0x20+ATEMRAS_FILE_NAME_SIZE((dwVersion)))

static EC_INLINESTART EC_T_DWORD ATEMRAS_FOEDOWNLOADCMPLTRANSFER_GET_COMMANDCODE(ATEMRAS_PT_FOEDOWNLOADCMPLTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_FOEDOWNLOADCMPLTRANSFER_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_FOEDOWNLOADCMPLTRANSFER_SET_COMMANDCODE(ATEMRAS_PT_FOEDOWNLOADCMPLTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_FOEDOWNLOADCMPLTRANSFER_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_FOEDOWNLOADCMPLTRANSFER_GET_INSTANCEID(ATEMRAS_PT_FOEDOWNLOADCMPLTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_FOEDOWNLOADCMPLTRANSFER_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_FOEDOWNLOADCMPLTRANSFER_SET_INSTANCEID(ATEMRAS_PT_FOEDOWNLOADCMPLTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_FOEDOWNLOADCMPLTRANSFER_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_FOEDOWNLOADCMPLTRANSFER_GET_SLAVEID(ATEMRAS_PT_FOEDOWNLOADCMPLTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_FOEDOWNLOADCMPLTRANSFER_OFFS_SLAVEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_FOEDOWNLOADCMPLTRANSFER_SET_SLAVEID(ATEMRAS_PT_FOEDOWNLOADCMPLTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_FOEDOWNLOADCMPLTRANSFER_OFFS_SLAVEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_CHAR* ATEMRAS_FOEDOWNLOADCMPLTRANSFER_FILENAME(ATEMRAS_PT_FOEDOWNLOADCMPLTRANSFER p)
{
    return (EC_T_CHAR*)((((EC_T_PBYTE)p)+ATEMRAS_FOEDOWNLOADCMPLTRANSFER_OFFS_FILENAME));
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_FOEDOWNLOADCMPLTRANSFER_GET_FILENAMELENGH(ATEMRAS_PT_FOEDOWNLOADCMPLTRANSFER p, EC_T_DWORD dwVersion)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_FOEDOWNLOADCMPLTRANSFER_OFFS_FILENAMELENGTH(dwVersion)));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_FOEDOWNLOADCMPLTRANSFER_SET_FILENAMELENGH(ATEMRAS_PT_FOEDOWNLOADCMPLTRANSFER p, EC_T_DWORD dwVal, EC_T_DWORD dwVersion)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_FOEDOWNLOADCMPLTRANSFER_OFFS_FILENAMELENGTH(dwVersion)), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_FOEDOWNLOADCMPLTRANSFER_GET_PASSWD(ATEMRAS_PT_FOEDOWNLOADCMPLTRANSFER p, EC_T_DWORD dwVersion)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_FOEDOWNLOADCMPLTRANSFER_OFFS_PASSWD(dwVersion)));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_FOEDOWNLOADCMPLTRANSFER_SET_PASSWD(ATEMRAS_PT_FOEDOWNLOADCMPLTRANSFER p, EC_T_DWORD dwVal, EC_T_DWORD dwVersion)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_FOEDOWNLOADCMPLTRANSFER_OFFS_PASSWD(dwVersion)), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_FOEDOWNLOADCMPLTRANSFER_GET_DATALEN(ATEMRAS_PT_FOEDOWNLOADCMPLTRANSFER p, EC_T_DWORD dwVersion)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_FOEDOWNLOADCMPLTRANSFER_OFFS_DATALEN(dwVersion)));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_FOEDOWNLOADCMPLTRANSFER_SET_DATALEN(ATEMRAS_PT_FOEDOWNLOADCMPLTRANSFER p, EC_T_DWORD dwVal, EC_T_DWORD dwVersion)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_FOEDOWNLOADCMPLTRANSFER_OFFS_DATALEN(dwVersion)), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_FOEDOWNLOADCMPLTRANSFER_GET_TIMEOUT(ATEMRAS_PT_FOEDOWNLOADCMPLTRANSFER p, EC_T_DWORD dwVersion)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_FOEDOWNLOADCMPLTRANSFER_OFFS_TIMEOUT(dwVersion)));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_FOEDOWNLOADCMPLTRANSFER_SET_TIMEOUT(ATEMRAS_PT_FOEDOWNLOADCMPLTRANSFER p, EC_T_DWORD dwVal, EC_T_DWORD dwVersion)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_FOEDOWNLOADCMPLTRANSFER_OFFS_TIMEOUT(dwVersion)), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_FOEDOWNLOADCMPLTRANSFER_GET_SRVRESULT(ATEMRAS_PT_FOEDOWNLOADCMPLTRANSFER p, EC_T_DWORD dwVersion)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_FOEDOWNLOADCMPLTRANSFER_OFFS_SRVRESULT(dwVersion)));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_FOEDOWNLOADCMPLTRANSFER_SET_SRVRESULT(ATEMRAS_PT_FOEDOWNLOADCMPLTRANSFER p, EC_T_DWORD dwVal, EC_T_DWORD dwVersion)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_FOEDOWNLOADCMPLTRANSFER_OFFS_SRVRESULT(dwVersion)), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_PBYTE ATEMRAS_FOEDOWNLOADCMPLTRANSFER_DATA(ATEMRAS_PT_FOEDOWNLOADCMPLTRANSFER p, EC_T_DWORD dwVersion)
{
    return (EC_T_PBYTE)((((EC_T_PBYTE)p)+ATEMRAS_FOEDOWNLOADCMPLTRANSFER_OFFS_DATA(dwVersion)));
} EC_INLINESTOP

typedef struct _ATEMRAS_T_FOEDOWNLOADTRANSFER
{
    EC_T_DWORD          dwCommandCode;      /* Command Code */              /* 0x00 */
    EC_T_DWORD          dwInstanceID;       /* Master Instance */           /* 0x04 */

    EC_T_DWORD          dwMbxTferId;        /* Id of Mailbox Transfer Obj *//* 0x08 */
    EC_T_DWORD          dwSlaveId;          /* Slave Id */                  /* 0x0C */

    EC_T_CHAR           szFileName[MAX_FILE_NAME_SIZE];    /* FoE File Name */             /* 0x10 */
    EC_T_DWORD          dwFileNameLength;   /* Length of FoE FileName */    /* MAX_FILE_NAME_SIZE + 0x10 */
    EC_T_DWORD          dwPasswd;           /* Slave Password */            /* MAX_FILE_NAME_SIZE + 0x14 */
    EC_T_DWORD          dwTimeout;          /* Timeout */                   /* MAX_FILE_NAME_SIZE + 0x18 */

    EC_T_DWORD          dwSrvResult;        /* Result from server */        /* MAX_FILE_NAME_SIZE + 0x1C */
    ATEMRAS_T_MBXTFER   oTferObj;           /* Tfer Obj */                  /* MAX_FILE_NAME_SIZE + 0x20 */

} EC_PACKED(1) ATEMRAS_T_FOEDOWNLOADTRANSFER, *ATEMRAS_PT_FOEDOWNLOADTRANSFER;

#define ATEMRAS_T_FOEDOWNLOADTRANSFER_SIZE(dwVersion) (((dwVersion)<0x0109010C)?96:sizeof(ATEMRAS_T_FOEDOWNLOADTRANSFER))

#define ATEMRAS_FOEDOWNLOADTRANSFER_OFFS_COMMANDCODE               ((EC_T_DWORD)0x00)
#define ATEMRAS_FOEDOWNLOADTRANSFER_OFFS_INSTANCEID                ((EC_T_DWORD)0x04)
#define ATEMRAS_FOEDOWNLOADTRANSFER_OFFS_MBXOBJID                  ((EC_T_DWORD)0x08)
#define ATEMRAS_FOEDOWNLOADTRANSFER_OFFS_SLAVEID                   ((EC_T_DWORD)0x0C)
#define ATEMRAS_FOEDOWNLOADTRANSFER_OFFS_FILENAME                  ((EC_T_DWORD)0x10)
#define ATEMRAS_FOEDOWNLOADTRANSFER_OFFS_FILENAMELENGTH(dwVersion) ((EC_T_DWORD)0x10+ATEMRAS_FILE_NAME_SIZE((dwVersion)))
#define ATEMRAS_FOEDOWNLOADTRANSFER_OFFS_PASSWD(dwVersion)         ((EC_T_DWORD)0x14+ATEMRAS_FILE_NAME_SIZE((dwVersion)))
#define ATEMRAS_FOEDOWNLOADTRANSFER_OFFS_TIMEOUT(dwVersion)        ((EC_T_DWORD)0x18+ATEMRAS_FILE_NAME_SIZE((dwVersion)))
#define ATEMRAS_FOEDOWNLOADTRANSFER_OFFS_SRVRESULT(dwVersion)      ((EC_T_DWORD)0x1C+ATEMRAS_FILE_NAME_SIZE((dwVersion)))
#define ATEMRAS_FOEDOWNLOADTRANSFER_OFFS_TFEROBJ(dwVersion)        ((EC_T_DWORD)0x20+ATEMRAS_FILE_NAME_SIZE((dwVersion)))
#define ATEMRAS_FOEDOWNLOADTRANSFER_OFFS_DATA(dwVersion)           ((EC_T_DWORD)0x20+ATEMRAS_FILE_NAME_SIZE((dwVersion))+ATEMRAS_T_MBXTFER_SIZE)

static EC_INLINESTART EC_T_DWORD ATEMRAS_FOEDOWNLOADTRANSFER_GET_COMMANDCODE(ATEMRAS_PT_FOEDOWNLOADTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_FOEDOWNLOADTRANSFER_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_FOEDOWNLOADTRANSFER_SET_COMMANDCODE(ATEMRAS_PT_FOEDOWNLOADTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_FOEDOWNLOADTRANSFER_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_FOEDOWNLOADTRANSFER_GET_INSTANCEID(ATEMRAS_PT_FOEDOWNLOADTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_FOEDOWNLOADTRANSFER_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_FOEDOWNLOADTRANSFER_SET_INSTANCEID(ATEMRAS_PT_FOEDOWNLOADTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_FOEDOWNLOADTRANSFER_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_FOEDOWNLOADTRANSFER_GET_MBXOBJID(ATEMRAS_PT_FOEDOWNLOADTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_FOEDOWNLOADTRANSFER_OFFS_MBXOBJID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_FOEDOWNLOADTRANSFER_SET_MBXOBJID(ATEMRAS_PT_FOEDOWNLOADTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_FOEDOWNLOADTRANSFER_OFFS_MBXOBJID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_FOEDOWNLOADTRANSFER_GET_SLAVEID(ATEMRAS_PT_FOEDOWNLOADTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_FOEDOWNLOADTRANSFER_OFFS_SLAVEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_FOEDOWNLOADTRANSFER_SET_SLAVEID(ATEMRAS_PT_FOEDOWNLOADTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_FOEDOWNLOADTRANSFER_OFFS_SLAVEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_CHAR* ATEMRAS_FOEDOWNLOADTRANSFER_FILENAME(ATEMRAS_PT_FOEDOWNLOADTRANSFER p)
{
    return (EC_T_CHAR*)((((EC_T_PBYTE)p) + ATEMRAS_FOEDOWNLOADTRANSFER_OFFS_FILENAME));
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_FOEDOWNLOADTRANSFER_GET_FILENAMELENGH(ATEMRAS_PT_FOEDOWNLOADTRANSFER p, EC_T_DWORD dwVersion)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_FOEDOWNLOADTRANSFER_OFFS_FILENAMELENGTH(dwVersion)));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_FOEDOWNLOADTRANSFER_SET_FILENAMELENGH(ATEMRAS_PT_FOEDOWNLOADTRANSFER p, EC_T_DWORD dwVal, EC_T_DWORD dwVersion)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_FOEDOWNLOADTRANSFER_OFFS_FILENAMELENGTH(dwVersion)), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_FOEDOWNLOADTRANSFER_GET_PASSWD(ATEMRAS_PT_FOEDOWNLOADTRANSFER p, EC_T_DWORD dwVersion)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_FOEDOWNLOADTRANSFER_OFFS_PASSWD(dwVersion)));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_FOEDOWNLOADTRANSFER_SET_PASSWD(ATEMRAS_PT_FOEDOWNLOADTRANSFER p, EC_T_DWORD dwVal, EC_T_DWORD dwVersion)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_FOEDOWNLOADTRANSFER_OFFS_PASSWD(dwVersion)), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_FOEDOWNLOADTRANSFER_GET_TIMEOUT(ATEMRAS_PT_FOEDOWNLOADTRANSFER p, EC_T_DWORD dwVersion)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_FOEDOWNLOADTRANSFER_OFFS_TIMEOUT(dwVersion)));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_FOEDOWNLOADTRANSFER_SET_TIMEOUT(ATEMRAS_PT_FOEDOWNLOADTRANSFER p, EC_T_DWORD dwVal, EC_T_DWORD dwVersion)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_FOEDOWNLOADTRANSFER_OFFS_TIMEOUT(dwVersion)), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_FOEDOWNLOADTRANSFER_GET_SRVRESULT(ATEMRAS_PT_FOEDOWNLOADTRANSFER p, EC_T_DWORD dwVersion)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_FOEDOWNLOADTRANSFER_OFFS_SRVRESULT(dwVersion)));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_FOEDOWNLOADTRANSFER_SET_SRVRESULT(ATEMRAS_PT_FOEDOWNLOADTRANSFER p, EC_T_DWORD dwVal, EC_T_DWORD dwVersion)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_FOEDOWNLOADTRANSFER_OFFS_SRVRESULT(dwVersion)), dwVal);
} EC_INLINESTOP
static EC_INLINESTART ATEMRAS_PT_MBXTFER ATEMRAS_FOEDOWNLOADTRANSFER_TFEROBJ(ATEMRAS_PT_FOEDOWNLOADTRANSFER p, EC_T_DWORD dwVersion)
{
    return (ATEMRAS_PT_MBXTFER)((((EC_T_PBYTE)p) + ATEMRAS_FOEDOWNLOADTRANSFER_OFFS_TFEROBJ(dwVersion)));
} EC_INLINESTOP
static EC_INLINESTART EC_T_PBYTE ATEMRAS_FOEDOWNLOADTRANSFER_DATA(ATEMRAS_PT_FOEDOWNLOADTRANSFER p, EC_T_DWORD dwVersion)
{
    return (EC_T_PBYTE)((((EC_T_PBYTE)p) + ATEMRAS_FOEDOWNLOADTRANSFER_OFFS_DATA(dwVersion)));
} EC_INLINESTOP
typedef struct _ATEMRAS_T_EMGETNUMCONSLVTRANSFER
{
    EC_T_DWORD   dwCommandCode;     /* Command Code */              /* 0x00 */
    EC_T_DWORD   dwInstanceID;      /* Master Instance */           /* 0x04 */
    
    EC_T_DWORD   dwNumSlaves;       /* Amount of connected slaves*/ /* 0x08 */
} EC_PACKED(1) ATEMRAS_T_EMGETNUMCONSLVTRANSFER, *ATEMRAS_PT_EMGETNUMCONSLVTRANSFER;

#define ATEMRAS_T_EMGETNUMCONSLVTRANSFER_SIZE  sizeof(ATEMRAS_T_EMGETNUMCONSLVTRANSFER)

#define ATEMRAS_EMGETNUMCONSLVTRANSFER_OFFS_COMMANDCODE        ((EC_T_DWORD)0x00)
#define ATEMRAS_EMGETNUMCONSLVTRANSFER_OFFS_INSTANCEID         ((EC_T_DWORD)0x04)
#define ATEMRAS_EMGETNUMCONSLVTRANSFER_OFFS_NUMSLAVES          ((EC_T_DWORD)0x08)

static EC_INLINESTART EC_T_DWORD ATEMRAS_EMGETNUMCONSLVTRANSFER_GET_COMMANDCODE(ATEMRAS_PT_EMGETNUMCONSLVTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETNUMCONSLVTRANSFER_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMGETNUMCONSLVTRANSFER_SET_COMMANDCODE(ATEMRAS_PT_EMGETNUMCONSLVTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETNUMCONSLVTRANSFER_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_EMGETNUMCONSLVTRANSFER_GET_INSTANCEID(ATEMRAS_PT_EMGETNUMCONSLVTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETNUMCONSLVTRANSFER_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMGETNUMCONSLVTRANSFER_SET_INSTANCEID(ATEMRAS_PT_EMGETNUMCONSLVTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETNUMCONSLVTRANSFER_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_EMGETNUMCONSLVTRANSFER_GET_NUMSLV(ATEMRAS_PT_EMGETNUMCONSLVTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETNUMCONSLVTRANSFER_OFFS_NUMSLAVES));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMGETNUMCONSLVTRANSFER_SET_NUMSLV(ATEMRAS_PT_EMGETNUMCONSLVTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETNUMCONSLVTRANSFER_OFFS_NUMSLAVES), dwVal);
} EC_INLINESTOP

typedef struct _ATEMRAS_T_RESETSLAVECONTROLERTRANSFER
{
    EC_T_DWORD   dwCommandCode;     /* Command Code */              /* 0x00 */
    EC_T_DWORD   dwInstanceID;      /* Master Instance */           /* 0x04 */
    
    EC_T_BOOL    bFixedAddressing;  /* EC_TRUE: use fixed addressing, EC_FALSE: use auto increment addressing */       
                                                                    /* 0x08 */
    EC_T_WORD    wSlaveAddress;     /* Slave Address */             /* 0x0C */
    EC_T_WORD    wRsvd;             /* Reserved */
    EC_T_DWORD   dwTimeout;         /* Timeout */                   /* 0x010 */
    EC_T_DWORD   dwResult;          /* Result from Server */        /* 0x014 */
} EC_PACKED(1) ATEMRAS_T_RESETSLAVECONTROLERTRANSFER, *ATEMRAS_PT_RESETSLAVECONTROLERTRANSFER;

#define ATEMRAS_T_RESETSLAVECONTROLERTRANSFER_SIZE    sizeof(ATEMRAS_T_RESETSLAVECONTROLERTRANSFER)

#define ATEMRAS_RESETSLAVECONTROLERTRANSFER_OFFS_COMMANDCODE          ((EC_T_DWORD)0x00)
#define ATEMRAS_RESETSLAVECONTROLERTRANSFER_OFFS_INSTANCEID           ((EC_T_DWORD)0x04)
#define ATEMRAS_RESETSLAVECONTROLERTRANSFER_OFFS_FIXEDADDR            ((EC_T_DWORD)0x08)
#define ATEMRAS_RESETSLAVECONTROLERTRANSFER_OFFS_SLVADDR              ((EC_T_DWORD)0x0C)
#define ATEMRAS_RESETSLAVECONTROLERTRANSFER_OFFS_TIMEOUT              ((EC_T_DWORD)0x10)
#define ATEMRAS_RESETSLAVECONTROLERTRANSFER_OFFS_RESULT               ((EC_T_DWORD)0x14)

static EC_INLINESTART EC_T_DWORD ATEMRAS_RESETSLAVECONTROLERTRANSFER_GET_COMMANDCODE(ATEMRAS_PT_RESETSLAVECONTROLERTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_RESETSLAVECONTROLERTRANSFER_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_RESETSLAVECONTROLERTRANSFER_SET_COMMANDCODE(ATEMRAS_PT_RESETSLAVECONTROLERTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_RESETSLAVECONTROLERTRANSFER_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_RESETSLAVECONTROLERTRANSFER_GET_INSTANCEID(ATEMRAS_PT_RESETSLAVECONTROLERTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_RESETSLAVECONTROLERTRANSFER_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_RESETSLAVECONTROLERTRANSFER_SET_INSTANCEID(ATEMRAS_PT_RESETSLAVECONTROLERTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_RESETSLAVECONTROLERTRANSFER_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_BOOL ATEMRAS_RESETSLAVECONTROLERTRANSFER_GET_FIXEDADDR(ATEMRAS_PT_RESETSLAVECONTROLERTRANSFER p)
{
    return (EC_T_DWORD)(EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_RESETSLAVECONTROLERTRANSFER_OFFS_FIXEDADDR)));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_RESETSLAVECONTROLERTRANSFER_SET_FIXEDADDR(ATEMRAS_PT_RESETSLAVECONTROLERTRANSFER p, EC_T_BOOL bVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_RESETSLAVECONTROLERTRANSFER_OFFS_FIXEDADDR), bVal );
} EC_INLINESTOP
static EC_INLINESTART EC_T_WORD ATEMRAS_RESETSLAVECONTROLERTRANSFER_GET_SLVADDR(ATEMRAS_PT_RESETSLAVECONTROLERTRANSFER p)
{
    return EC_GET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_RESETSLAVECONTROLERTRANSFER_OFFS_SLVADDR));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_RESETSLAVECONTROLERTRANSFER_SET_SLVADDR(ATEMRAS_PT_RESETSLAVECONTROLERTRANSFER p, EC_T_WORD wVal)
{
    EC_SET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_RESETSLAVECONTROLERTRANSFER_OFFS_SLVADDR), wVal );
} EC_INLINESTOP
static EC_INLINESTART EC_T_BOOL ATEMRAS_RESETSLAVECONTROLERTRANSFER_GET_TIMEOUT(ATEMRAS_PT_RESETSLAVECONTROLERTRANSFER p)
{
    return (EC_T_DWORD)(EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_RESETSLAVECONTROLERTRANSFER_OFFS_TIMEOUT)));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_RESETSLAVECONTROLERTRANSFER_SET_TIMEOUT(ATEMRAS_PT_RESETSLAVECONTROLERTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_RESETSLAVECONTROLERTRANSFER_OFFS_TIMEOUT), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_BOOL ATEMRAS_RESETSLAVECONTROLERTRANSFER_GET_RESULT(ATEMRAS_PT_RESETSLAVECONTROLERTRANSFER p)
{
    return (EC_T_DWORD)(EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_RESETSLAVECONTROLERTRANSFER_OFFS_RESULT)));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_RESETSLAVECONTROLERTRANSFER_SET_RESULT(ATEMRAS_PT_RESETSLAVECONTROLERTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_RESETSLAVECONTROLERTRANSFER_OFFS_RESULT), dwVal);
} EC_INLINESTOP


typedef struct _ATEMRAS_T_EMGETSLAVEINFOTRANSFER
{
    EC_T_DWORD              dwCommandCode;     /* Command Code */              /* 0x00 */
    EC_T_DWORD              dwInstanceID;      /* Master Instance */           /* 0x04 */
    
    EC_T_BOOL               bFixedAddressing;  /* EC_TRUE: use fixed addressing, EC_FALSE: use auto increment addressing */       
                                               /* 0x08 */
    EC_T_WORD               wSlaveAddress;     /* Slave Address */             /* 0x0C */
    EC_T_WORD               wRsvd;             /* Reserved */
    EC_T_DWORD              dwResult;          /* Result from Server */        /* 0x10*/
    EC_T_GET_SLAVE_INFO     oGetSlaveInfo;     /* Slave information */         /* 0x14 */
} EC_PACKED(1) ATEMRAS_T_EMGETSLAVEINFOTRANSFER, *ATEMRAS_PT_EMGETSLAVEINFOTRANSFER;


#define ATEMRAS_T_EMGETSLAVEINFOTRANSFER_SIZE    sizeof(ATEMRAS_T_EMGETSLAVEINFOTRANSFER)

#define ATEMRAS_EMGETSLAVEINFOTRANSFER_OFFS_COMMANDCODE     ((EC_T_DWORD)0x00)
#define ATEMRAS_EMGETSLAVEINFOTRANSFER_OFFS_INSTANCEID      ((EC_T_DWORD)0x04)
#define ATEMRAS_EMGETSLAVEINFOTRANSFER_OFFS_FIXEDADDR       ((EC_T_DWORD)0x08)
#define ATEMRAS_EMGETSLAVEINFOTRANSFER_OFFS_SLVADDR         ((EC_T_DWORD)0x0C)
#define ATEMRAS_EMGETSLAVEINFOTRANSFER_OFFS_RESULT          ((EC_T_DWORD)0x10)
#define ATEMRAS_EMGETSLAVEINFOTRANSFER_OFFS_GETSLAVEINFO    ((EC_T_DWORD)0x14)


static EC_INLINESTART EC_T_DWORD ATEMRAS_EMGETSLAVEINFOTRANSFER_GET_COMMANDCODE(ATEMRAS_PT_EMGETSLAVEINFOTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETSLAVEINFOTRANSFER_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMGETSLAVEINFOTRANSFER_SET_COMMANDCODE(ATEMRAS_PT_EMGETSLAVEINFOTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETSLAVEINFOTRANSFER_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_EMGETSLAVEINFOTRANSFER_GET_INSTANCEID(ATEMRAS_PT_EMGETSLAVEINFOTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETSLAVEINFOTRANSFER_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMGETSLAVEINFOTRANSFER_SET_INSTANCEID(ATEMRAS_PT_EMGETSLAVEINFOTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETSLAVEINFOTRANSFER_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_BOOL ATEMRAS_EMGETSLAVEINFOTRANSFER_GET_FIXEDADDR(ATEMRAS_PT_EMGETSLAVEINFOTRANSFER p)
{
    return (EC_T_DWORD)(EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETSLAVEINFOTRANSFER_OFFS_FIXEDADDR)));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMGETSLAVEINFOTRANSFER_SET_FIXEDADDR(ATEMRAS_PT_EMGETSLAVEINFOTRANSFER p, EC_T_BOOL bVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETSLAVEINFOTRANSFER_OFFS_FIXEDADDR), bVal );
} EC_INLINESTOP
static EC_INLINESTART EC_T_WORD ATEMRAS_EMGETSLAVEINFOTRANSFER_GET_SLVADDR(ATEMRAS_PT_EMGETSLAVEINFOTRANSFER p)
{
    return EC_GET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETSLAVEINFOTRANSFER_OFFS_SLVADDR));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMGETSLAVEINFOTRANSFER_SET_SLVADDR(ATEMRAS_PT_EMGETSLAVEINFOTRANSFER p, EC_T_WORD dwVal)
{
    EC_SET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETSLAVEINFOTRANSFER_OFFS_SLVADDR), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_EMGETSLAVEINFOTRANSFER_GET_RESULT(ATEMRAS_PT_EMGETSLAVEINFOTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETSLAVEINFOTRANSFER_OFFS_RESULT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMGETSLAVEINFOTRANSFER_SET_RESULT(ATEMRAS_PT_EMGETSLAVEINFOTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETSLAVEINFOTRANSFER_OFFS_RESULT), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_GET_SLAVE_INFO* ATEMRAS_EMGETSLAVEINFOTRANSFER_GET_GETSLAVEINFO_POINTER(ATEMRAS_PT_EMGETSLAVEINFOTRANSFER p)
{
    return (EC_T_GET_SLAVE_INFO*)(((EC_T_PBYTE)p)+ATEMRAS_EMGETSLAVEINFOTRANSFER_OFFS_GETSLAVEINFO);
} EC_INLINESTOP


typedef struct _ATEMRAS_T_EMGETCFGSLAVEINFOTRANSFER
{
    EC_T_DWORD              dwCommandCode;     /* Command Code */              /* 0x00 */
    EC_T_DWORD              dwInstanceID;      /* Master Instance */           /* 0x04 */
    
    EC_T_BOOL               bStationAddress;   /* EC_TRUE: used station address, EC_FALSE: use auto increment address */
                                               /* 0x08 */
    EC_T_WORD               wSlaveAddress;     /* Address of slave (Station or auto increment depending on bStationAddress) */
                                               /* 0x0C */
    EC_T_WORD               wRsvd;             /* Reserved */
    EC_T_DWORD              dwResult;          /* Result from Server */        /* 0x10*/
    EC_T_CFG_SLAVE_INFO     oGETCFGSLAVEINFO;  /* Slave information */         /* 0x14 */
} EC_PACKED(1) ATEMRAS_T_EMGETCFGSLAVEINFOTRANSFER, *ATEMRAS_PT_EMGETCFGSLAVEINFOTRANSFER;


#define ATEMRAS_T_EMGETCFGSLAVEINFOTRANSFER_SIZE    sizeof(ATEMRAS_T_EMGETCFGSLAVEINFOTRANSFER)

#define ATEMRAS_EMGETCFGSLAVEINFOTRANSFER_OFFS_COMMANDCODE      ((EC_T_DWORD)0x00)
#define ATEMRAS_EMGETCFGSLAVEINFOTRANSFER_OFFS_INSTANCEID       ((EC_T_DWORD)0x04)
#define ATEMRAS_EMGETCFGSLAVEINFOTRANSFER_OFFS_STATIONADDRESS   ((EC_T_DWORD)0x08)
#define ATEMRAS_EMGETCFGSLAVEINFOTRANSFER_OFFS_SLVADDR          ((EC_T_DWORD)0x0C)
#define ATEMRAS_EMGETCFGSLAVEINFOTRANSFER_OFFS_RESULT           ((EC_T_DWORD)0x10)
#define ATEMRAS_EMGETCFGSLAVEINFOTRANSFER_OFFS_GETCFGSLAVEINFO  ((EC_T_DWORD)0x14)


static EC_INLINESTART EC_T_DWORD ATEMRAS_EMGETCFGSLAVEINFOTRANSFER_GET_COMMANDCODE(ATEMRAS_PT_EMGETCFGSLAVEINFOTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETCFGSLAVEINFOTRANSFER_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMGETCFGSLAVEINFOTRANSFER_SET_COMMANDCODE(ATEMRAS_PT_EMGETCFGSLAVEINFOTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETCFGSLAVEINFOTRANSFER_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_EMGETCFGSLAVEINFOTRANSFER_GET_INSTANCEID(ATEMRAS_PT_EMGETCFGSLAVEINFOTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETCFGSLAVEINFOTRANSFER_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMGETCFGSLAVEINFOTRANSFER_SET_INSTANCEID(ATEMRAS_PT_EMGETCFGSLAVEINFOTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETCFGSLAVEINFOTRANSFER_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_BOOL ATEMRAS_EMGETCFGSLAVEINFOTRANSFER_GET_STATIONADDRESS(ATEMRAS_PT_EMGETCFGSLAVEINFOTRANSFER p)
{
    return (EC_T_DWORD)(EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETCFGSLAVEINFOTRANSFER_OFFS_STATIONADDRESS)));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMGETCFGSLAVEINFOTRANSFER_SET_STATIONADDRESS(ATEMRAS_PT_EMGETCFGSLAVEINFOTRANSFER p, EC_T_BOOL bVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETCFGSLAVEINFOTRANSFER_OFFS_STATIONADDRESS), bVal );
} EC_INLINESTOP
static EC_INLINESTART EC_T_WORD ATEMRAS_EMGETCFGSLAVEINFOTRANSFER_GET_SLVADDR(ATEMRAS_PT_EMGETCFGSLAVEINFOTRANSFER p)
{
    return EC_GET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETCFGSLAVEINFOTRANSFER_OFFS_SLVADDR));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMGETCFGSLAVEINFOTRANSFER_SET_SLVADDR(ATEMRAS_PT_EMGETCFGSLAVEINFOTRANSFER p, EC_T_WORD dwVal)
{
    EC_SET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETCFGSLAVEINFOTRANSFER_OFFS_SLVADDR), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_EMGETCFGSLAVEINFOTRANSFER_GET_RESULT(ATEMRAS_PT_EMGETCFGSLAVEINFOTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETCFGSLAVEINFOTRANSFER_OFFS_RESULT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMGETCFGSLAVEINFOTRANSFER_SET_RESULT(ATEMRAS_PT_EMGETCFGSLAVEINFOTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETCFGSLAVEINFOTRANSFER_OFFS_RESULT), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_CFG_SLAVE_INFO* ATEMRAS_EMGETCFGSLAVEINFOTRANSFER_GET_GETCFGSLAVEINFO_POINTER(ATEMRAS_PT_EMGETCFGSLAVEINFOTRANSFER p)
{
    return (EC_T_CFG_SLAVE_INFO*)(((EC_T_PBYTE)p)+ATEMRAS_EMGETCFGSLAVEINFOTRANSFER_OFFS_GETCFGSLAVEINFO);
} EC_INLINESTOP


typedef struct _ATEMRAS_T_EMGETBUSSLAVEINFOTRANSFER
{
    EC_T_DWORD              dwCommandCode;     /* Command Code */              /* 0x00 */
    EC_T_DWORD              dwInstanceID;      /* Master Instance */           /* 0x04 */
    
    EC_T_BOOL               bStationAddress;   /* EC_TRUE: used station address, EC_FALSE: use auto increment address */
                                               /* 0x08 */
    EC_T_WORD               wSlaveAddress;     /* Address of slave (Station or auto increment depending on bStationAddress) */
                                               /* 0x0C */
    EC_T_WORD               wRsvd;             /* Reserved */
    EC_T_DWORD              dwResult;          /* Result from Server */        /* 0x10*/
    EC_T_BUS_SLAVE_INFO     oGETBUSSLAVEINFO;  /* Slave information */         /* 0x14 */
} EC_PACKED(1) ATEMRAS_T_EMGETBUSSLAVEINFOTRANSFER, *ATEMRAS_PT_EMGETBUSSLAVEINFOTRANSFER;


#define ATEMRAS_T_EMGETBUSSLAVEINFOTRANSFER_SIZE    sizeof(ATEMRAS_T_EMGETBUSSLAVEINFOTRANSFER)

#define ATEMRAS_EMGETBUSSLAVEINFOTRANSFER_OFFS_COMMANDCODE      ((EC_T_DWORD)0x00)
#define ATEMRAS_EMGETBUSSLAVEINFOTRANSFER_OFFS_INSTANCEID       ((EC_T_DWORD)0x04)
#define ATEMRAS_EMGETBUSSLAVEINFOTRANSFER_OFFS_STATIONADDRESS   ((EC_T_DWORD)0x08)
#define ATEMRAS_EMGETBUSSLAVEINFOTRANSFER_OFFS_SLVADDR          ((EC_T_DWORD)0x0C)
#define ATEMRAS_EMGETBUSSLAVEINFOTRANSFER_OFFS_RESULT           ((EC_T_DWORD)0x10)
#define ATEMRAS_EMGETBUSSLAVEINFOTRANSFER_OFFS_GETBUSSLAVEINFO  ((EC_T_DWORD)0x14)


static EC_INLINESTART EC_T_DWORD ATEMRAS_EMGETBUSSLAVEINFOTRANSFER_GET_COMMANDCODE(ATEMRAS_PT_EMGETBUSSLAVEINFOTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETBUSSLAVEINFOTRANSFER_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMGETBUSSLAVEINFOTRANSFER_SET_COMMANDCODE(ATEMRAS_PT_EMGETBUSSLAVEINFOTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETBUSSLAVEINFOTRANSFER_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_EMGETBUSSLAVEINFOTRANSFER_GET_INSTANCEID(ATEMRAS_PT_EMGETBUSSLAVEINFOTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETBUSSLAVEINFOTRANSFER_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMGETBUSSLAVEINFOTRANSFER_SET_INSTANCEID(ATEMRAS_PT_EMGETBUSSLAVEINFOTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETBUSSLAVEINFOTRANSFER_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_BOOL ATEMRAS_EMGETBUSSLAVEINFOTRANSFER_GET_STATIONADDRESS(ATEMRAS_PT_EMGETBUSSLAVEINFOTRANSFER p)
{
    return (EC_T_DWORD)(EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETBUSSLAVEINFOTRANSFER_OFFS_STATIONADDRESS)));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMGETBUSSLAVEINFOTRANSFER_SET_STATIONADDRESS(ATEMRAS_PT_EMGETBUSSLAVEINFOTRANSFER p, EC_T_BOOL bVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETBUSSLAVEINFOTRANSFER_OFFS_STATIONADDRESS), bVal );
} EC_INLINESTOP
static EC_INLINESTART EC_T_WORD ATEMRAS_EMGETBUSSLAVEINFOTRANSFER_GET_SLVADDR(ATEMRAS_PT_EMGETBUSSLAVEINFOTRANSFER p)
{
    return EC_GET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETBUSSLAVEINFOTRANSFER_OFFS_SLVADDR));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMGETBUSSLAVEINFOTRANSFER_SET_SLVADDR(ATEMRAS_PT_EMGETBUSSLAVEINFOTRANSFER p, EC_T_WORD dwVal)
{
    EC_SET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETBUSSLAVEINFOTRANSFER_OFFS_SLVADDR), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_EMGETBUSSLAVEINFOTRANSFER_GET_RESULT(ATEMRAS_PT_EMGETBUSSLAVEINFOTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETBUSSLAVEINFOTRANSFER_OFFS_RESULT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMGETBUSSLAVEINFOTRANSFER_SET_RESULT(ATEMRAS_PT_EMGETBUSSLAVEINFOTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETBUSSLAVEINFOTRANSFER_OFFS_RESULT), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_BUS_SLAVE_INFO* ATEMRAS_EMGETBUSSLAVEINFOTRANSFER_GET_GETBUSSLAVEINFO_POINTER(ATEMRAS_PT_EMGETBUSSLAVEINFOTRANSFER p)
{
    return (EC_T_BUS_SLAVE_INFO*)(((EC_T_PBYTE)p)+ATEMRAS_EMGETBUSSLAVEINFOTRANSFER_OFFS_GETBUSSLAVEINFO);
} EC_INLINESTOP


typedef struct _ATEMRAS_T_EMGETSLAVEVARINFONUMOF
{
    EC_T_DWORD              dwCommandCode;     /* Command Code */              /* 0x00 */
    EC_T_DWORD              dwInstanceID;      /* Master Instance */           /* 0x04 */
    
    EC_T_BOOL               bFixedAddressing;  /* EC_TRUE: use fixed addressing, EC_FALSE: use auto increment addressing */       
    /* 0x08 */
    EC_T_WORD               wSlaveAddress;     /* Slave Address */             /* 0x0C */
    EC_T_WORD               wRsvd;             /* Reserved */
    EC_T_DWORD              dwResult;          /* Result from Server */        /* 0x10*/
    EC_T_WORD               pwSlaveProcVarInfoNumOf;  /* Number of process variables */         /* 0x14 */
} EC_PACKED(1) ATEMRAS_T_EMGETSLAVEVARINFONUMOF, *ATEMRAS_PT_EMGETSLAVEVARINFONUMOF;


#define ATEMRAS_T_EMGETSLAVEVARINFONUMOF_SIZE    sizeof(ATEMRAS_T_EMGETSLAVEVARINFONUMOF)

#define ATEMRAS_EMGETSLAVEVARINFONUMOF_OFFS_COMMANDCODE     ((EC_T_DWORD)0x00)
#define ATEMRAS_EMGETSLAVEVARINFONUMOF_OFFS_INSTANCEID      ((EC_T_DWORD)0x04)
#define ATEMRAS_EMGETSLAVEVARINFONUMOF_OFFS_FIXEDADDR       ((EC_T_DWORD)0x08)
#define ATEMRAS_EMGETSLAVEVARINFONUMOF_OFFS_SLVADDR         ((EC_T_DWORD)0x0C)
#define ATEMRAS_EMGETSLAVEVARINFONUMOF_OFFS_RESULT          ((EC_T_DWORD)0x10)
#define ATEMRAS_EMGETSLAVEVARINFONUMOF_OFFS_PROCESSVARNUMOF ((EC_T_DWORD)0x14)


static EC_INLINESTART EC_T_DWORD ATEMRAS_EMGETSLAVEVARINFONUMOF_GET_COMMANDCODE(ATEMRAS_PT_EMGETSLAVEVARINFONUMOF p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETSLAVEVARINFONUMOF_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMGETSLAVEVARINFONUMOF_SET_COMMANDCODE(ATEMRAS_PT_EMGETSLAVEVARINFONUMOF p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETSLAVEVARINFONUMOF_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_EMGETSLAVEVARINFONUMOF_GET_INSTANCEID(ATEMRAS_PT_EMGETSLAVEVARINFONUMOF p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETSLAVEVARINFONUMOF_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMGETSLAVEVARINFONUMOF_SET_INSTANCEID(ATEMRAS_PT_EMGETSLAVEVARINFONUMOF p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETSLAVEVARINFONUMOF_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_BOOL ATEMRAS_EMGETSLAVEVARINFONUMOF_GET_FIXEDADDR(ATEMRAS_PT_EMGETSLAVEVARINFONUMOF p)
{
    return (EC_T_DWORD)(EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETSLAVEVARINFONUMOF_OFFS_FIXEDADDR)));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMGETSLAVEVARINFONUMOF_SET_FIXEDADDR(ATEMRAS_PT_EMGETSLAVEVARINFONUMOF p, EC_T_BOOL bVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETSLAVEVARINFONUMOF_OFFS_FIXEDADDR), bVal );
} EC_INLINESTOP
static EC_INLINESTART EC_T_WORD ATEMRAS_EMGETSLAVEVARINFONUMOF_GET_SLVADDR(ATEMRAS_PT_EMGETSLAVEVARINFONUMOF p)
{
    return EC_GET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETSLAVEVARINFONUMOF_OFFS_SLVADDR));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMGETSLAVEVARINFONUMOF_SET_SLVADDR(ATEMRAS_PT_EMGETSLAVEVARINFONUMOF p, EC_T_WORD dwVal)
{
    EC_SET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETSLAVEVARINFONUMOF_OFFS_SLVADDR), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_EMGETSLAVEVARINFONUMOF_GET_RESULT(ATEMRAS_PT_EMGETSLAVEVARINFONUMOF p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETSLAVEVARINFONUMOF_OFFS_RESULT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMGETSLAVEVARINFONUMOF_SET_RESULT(ATEMRAS_PT_EMGETSLAVEVARINFONUMOF p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETSLAVEVARINFONUMOF_OFFS_RESULT), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_WORD ATEMRAS_EMGETSLAVEVARINFONUMOF_GET_PROCESSVARSNUMOF(ATEMRAS_PT_EMGETSLAVEVARINFONUMOF p)
{
    return EC_GET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETSLAVEVARINFONUMOF_OFFS_PROCESSVARNUMOF));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMGETSLAVEVARINFONUMOF_SET_PROCESSVARSNUMOF(ATEMRAS_PT_EMGETSLAVEVARINFONUMOF p, EC_T_WORD wVal)
{
    EC_SET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETSLAVEVARINFONUMOF_OFFS_PROCESSVARNUMOF), wVal );
} EC_INLINESTOP

typedef struct _ATEMRAS_T_EMGETSLAVEPROCVARINFOTRANSFER
{
    EC_T_DWORD              dwCommandCode;     /* Command Code */                /* 0x00 */
    EC_T_DWORD              dwInstanceID;      /* Master Instance */             /* 0x04 */
    
    EC_T_BOOL               bFixedAddressing;  /* EC_TRUE: use fixed addressing, EC_FALSE: use auto increment addressing */ /* 0x08 */
    EC_T_WORD               wSlaveAddress;     /* Slave Address */               /* 0x0C */
    EC_T_WORD               wRsvd;             /* Reserved */
    EC_T_DWORD              dwResult;          /* Result from Server */          /* 0x10*/

    EC_T_WORD               wNumOfVarsToRead;  /* Number of process variable 
                                                  information entries to read */ /* 0x14 */
    EC_T_WORD               wRsvd3;            /* Reserved */

    EC_T_WORD               wReadEntries;      /* Number process variable 
                                                  entries that have been stored 
                                                  in oProcesscVarInfo */         /* 0x18 */
    EC_T_WORD               wRsvd2;            /* Reserved */
} EC_PACKED(1) ATEMRAS_T_EMGETSLAVEPROCVARINFOTRANSFER, *ATEMRAS_PT_EMGETSLAVEPROCVARINFOTRANSFER;


#define ATEMRAS_T_EMGETSLAVEPROCESSVARINFOTRANSFER_SIZE    sizeof(ATEMRAS_T_EMGETSLAVEPROCVARINFOTRANSFER)

#define ATEMRAS_EMGETSLAVEPROCVARINFOTRANSFER_OFFS_COMMANDCODE      ((EC_T_DWORD)0x00)
#define ATEMRAS_EMGETSLAVEPROCVARINFOTRANSFER_OFFS_INSTANCEID       ((EC_T_DWORD)0x04)
#define ATEMRAS_EMGETSLAVEPROCVARINFOTRANSFER_OFFS_FIXEDADDR        ((EC_T_DWORD)0x08)
#define ATEMRAS_EMGETSLAVEPROCVARINFOTRANSFER_OFFS_SLVADDR          ((EC_T_DWORD)0x0C)
#define ATEMRAS_EMGETSLAVEPROCVARINFOTRANSFER_OFFS_RESULT           ((EC_T_DWORD)0x10)
#define ATEMRAS_EMGETSLAVEPROCVARINFOTRANSFER_OFFS_NUMVARSTOREAD    ((EC_T_DWORD)0x14)
#define ATEMRAS_EMGETSLAVEPROCVARINFOTRANSFER_OFFS_READENTRIES      ((EC_T_DWORD)0x18)
#define ATEMRAS_EMGETSLAVEPROCVARINFOTRANSFER_OFFS_GETSPROCVARINFOS ((EC_T_DWORD)0x1C)


static EC_INLINESTART EC_T_DWORD ATEMRAS_EMGETSLAVEPROCESSVARINFOTRANSFER_GET_COMMANDCODE(ATEMRAS_PT_EMGETSLAVEPROCVARINFOTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETSLAVEPROCVARINFOTRANSFER_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMGETSLAVEPROCVARINFOTRANSFER_SET_COMMANDCODE(ATEMRAS_PT_EMGETSLAVEPROCVARINFOTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETSLAVEPROCVARINFOTRANSFER_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_EMGETSLAVEPROCVARINFOTRANSFER_GET_INSTANCEID(ATEMRAS_PT_EMGETSLAVEPROCVARINFOTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETSLAVEPROCVARINFOTRANSFER_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMGETSLAVEPROCVARINFOTRANSFER_SET_INSTANCEID(ATEMRAS_PT_EMGETSLAVEPROCVARINFOTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETSLAVEPROCVARINFOTRANSFER_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_BOOL ATEMRAS_EMGETSLAVEPROCVARINFOTRANSFER_GET_FIXEDADDR(ATEMRAS_PT_EMGETSLAVEPROCVARINFOTRANSFER p)
{
    return (EC_T_DWORD)(EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETSLAVEPROCVARINFOTRANSFER_OFFS_FIXEDADDR)));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMGETSLAVEPROCVARINFOTRANSFER_SET_FIXEDADDR(ATEMRAS_PT_EMGETSLAVEPROCVARINFOTRANSFER p, EC_T_BOOL bVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETSLAVEPROCVARINFOTRANSFER_OFFS_FIXEDADDR), bVal );
} EC_INLINESTOP
static EC_INLINESTART EC_T_WORD ATEMRAS_EMGETSLAVEPROCVARINFOTRANSFER_GET_SLVADDR(ATEMRAS_PT_EMGETSLAVEPROCVARINFOTRANSFER p)
{
    return EC_GET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETSLAVEPROCVARINFOTRANSFER_OFFS_SLVADDR));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMGETSLAVEPROCVARINFOTRANSFER_SET_SLVADDR(ATEMRAS_PT_EMGETSLAVEPROCVARINFOTRANSFER p, EC_T_WORD dwVal)
{
    EC_SET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETSLAVEPROCVARINFOTRANSFER_OFFS_SLVADDR), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_WORD ATEMRAS_EMGETSLAVEPROCVARINFOTRANSFER_GET_NUMVARSTOREAD(ATEMRAS_PT_EMGETSLAVEPROCVARINFOTRANSFER p)
{
    return EC_GET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETSLAVEPROCVARINFOTRANSFER_OFFS_NUMVARSTOREAD));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMGETSLAVEPROCVARINFOTRANSFER_SET_NUMVARSTOREAD(ATEMRAS_PT_EMGETSLAVEPROCVARINFOTRANSFER p, EC_T_WORD dwVal)
{
    EC_SET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETSLAVEPROCVARINFOTRANSFER_OFFS_NUMVARSTOREAD), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_WORD ATEMRAS_EMGETSLAVEPROCVARINFOTRANSFER_GET_READENTRIES(ATEMRAS_PT_EMGETSLAVEPROCVARINFOTRANSFER p)
{
    return EC_GET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETSLAVEPROCVARINFOTRANSFER_OFFS_READENTRIES));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMGETSLAVEPROCVARINFOTRANSFER_SET_READENTRIES(ATEMRAS_PT_EMGETSLAVEPROCVARINFOTRANSFER p, EC_T_WORD dwVal)
{
    EC_SET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETSLAVEPROCVARINFOTRANSFER_OFFS_READENTRIES), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_DWORD ATEMRAS_EMGETSLAVEPROCVARINFOTRANSFER_GET_RESULT(ATEMRAS_PT_EMGETSLAVEPROCVARINFOTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETSLAVEPROCVARINFOTRANSFER_OFFS_RESULT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMGETSLAVEPROCVARINFOTRANSFER_SET_RESULT(ATEMRAS_PT_EMGETSLAVEPROCVARINFOTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETSLAVEPROCVARINFOTRANSFER_OFFS_RESULT), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_PROCESS_VAR_INFO* ATEMRAS_EMGETSLAVEPROCVARINFOTRANSFER_GET_PROCVARINFO_POINTER_STD(ATEMRAS_PT_EMGETSLAVEPROCVARINFOTRANSFER p)
{
    return (EC_T_PROCESS_VAR_INFO*)(((EC_T_PBYTE)p)+ATEMRAS_EMGETSLAVEPROCVARINFOTRANSFER_OFFS_GETSPROCVARINFOS);
} EC_INLINESTOP
static EC_INLINESTART EC_T_PROCESS_VAR_INFO_EX* ATEMRAS_EMGETSLAVEPROCVARINFOTRANSFER_GET_PROCVARINFO_POINTER_EX(ATEMRAS_PT_EMGETSLAVEPROCVARINFOTRANSFER p)
{
    return (EC_T_PROCESS_VAR_INFO_EX*)(((EC_T_PBYTE)p)+ATEMRAS_EMGETSLAVEPROCVARINFOTRANSFER_OFFS_GETSPROCVARINFOS);
} EC_INLINESTOP



typedef struct _ATEMRAS_T_FINDPROCVARBYNAMETRANSFER_STD
{
    EC_T_DWORD   dwCommandCode;     /* Command Code */                /* 0x00 */
    EC_T_DWORD   dwInstanceID;      /* Master Instance */             /* 0x04 */    
    EC_T_DWORD   dwResult;          /* Result code */                 /* 0x08 */
    EC_T_BYTE    szVariableName[MAX_PROCESS_VAR_NAME_LEN];            /* 0x0C */
    EC_T_PROCESS_VAR_INFO oProcessVarInfo;                            /* 0x0C + MAX_PROCESS_VAR_NAME_LEN*/
} EC_PACKED(1) ATEMRAS_T_FINDPROCVARBYNAMETRANSFER_STD;

typedef struct _ATEMRAS_T_FINDPROCVARBYNAMETRANSFER_EX
{
    EC_T_DWORD   dwCommandCode;     /* Command Code */                /* 0x00 */
    EC_T_DWORD   dwInstanceID;      /* Master Instance */             /* 0x04 */    
    EC_T_DWORD   dwResult;          /* Result code */                 /* 0x08 */
    EC_T_BYTE    szVariableName[MAX_PROCESS_VAR_NAME_LEN_EX];         /* 0x0C */
    EC_T_PROCESS_VAR_INFO_EX oProcessVarInfo;                         /* 0x0C + MAX_PROCESS_VAR_NAME_LEN_EX */
} EC_PACKED(1) ATEMRAS_T_FINDPROCVARBYNAMETRANSFER_EX;

#define ATEMRAS_FINDPROCVARBYNAMETRANSFER_OFFS_COMMANDCODE              ((EC_T_DWORD)0x00)
#define ATEMRAS_FINDPROCVARBYNAMETRANSFER_OFFS_INSTANCEID               ((EC_T_DWORD)0x04)
#define ATEMRAS_FINDPROCVARBYNAMETRANSFER_OFFS_RESULT                   ((EC_T_DWORD)0x08)
#define ATEMRAS_FINDPROCVARBYNAMETRANSFER_OFFS_VARNAME_POINTER          ((EC_T_DWORD)0x0C)
#define ATEMRAS_FINDPROCVARBYNAMETRANSFER_OFFS_PROCVARINFO_POINTER_STD  ((EC_T_DWORD)0x0C + MAX_PROCESS_VAR_NAME_LEN)
#define ATEMRAS_FINDPROCVARBYNAMETRANSFER_OFFS_PROCVARINFO_POINTER_EX   ((EC_T_DWORD)0x0C + MAX_PROCESS_VAR_NAME_LEN_EX)

static EC_INLINESTART EC_T_DWORD ATEMRAS_EMGETSLAVEPROCESSVARINFOTRANSFER_GET_COMMANDCODE(ATEMRAS_T_FINDPROCVARBYNAMETRANSFER_STD* p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_FINDPROCVARBYNAMETRANSFER_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_FINDPROCVARBYNAMETRANSFER_SET_COMMANDCODE(ATEMRAS_T_FINDPROCVARBYNAMETRANSFER_STD* p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_FINDPROCVARBYNAMETRANSFER_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_FINDPROCVARBYNAMETRANSFER_GET_INSTANCEID(ATEMRAS_T_FINDPROCVARBYNAMETRANSFER_STD* p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_FINDPROCVARBYNAMETRANSFER_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_FINDPROCVARBYNAMETRANSFER_SET_INSTANCEID(ATEMRAS_T_FINDPROCVARBYNAMETRANSFER_STD* p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_FINDPROCVARBYNAMETRANSFER_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_DWORD ATEMRAS_FINDPROCVARBYNAMETRANSFER_GET_RESULT(ATEMRAS_T_FINDPROCVARBYNAMETRANSFER_STD* p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_FINDPROCVARBYNAMETRANSFER_OFFS_RESULT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_FINDPROCVARBYNAMETRANSFER_SET_RESULT(ATEMRAS_T_FINDPROCVARBYNAMETRANSFER_STD* p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_FINDPROCVARBYNAMETRANSFER_OFFS_RESULT), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_CHAR* ATEMRAS_FINDPROCVARBYNAMETRANSFER_GET_VARNAME_POINTER(ATEMRAS_T_FINDPROCVARBYNAMETRANSFER_STD* p)
{
    return (EC_T_CHAR*)(((EC_T_PBYTE)p)+ATEMRAS_FINDPROCVARBYNAMETRANSFER_OFFS_VARNAME_POINTER);
} EC_INLINESTOP

static EC_INLINESTART EC_T_PROCESS_VAR_INFO* ATEMRAS_FINDPROCVARBYNAMETRANSFER_GET_PROCVARINFO_POINTER_STD(ATEMRAS_T_FINDPROCVARBYNAMETRANSFER_STD* p)
{
    return (EC_T_PROCESS_VAR_INFO*)(((EC_T_PBYTE)p)+ATEMRAS_FINDPROCVARBYNAMETRANSFER_OFFS_PROCVARINFO_POINTER_STD);
} EC_INLINESTOP

static EC_INLINESTART EC_T_PROCESS_VAR_INFO_EX* ATEMRAS_FINDPROCVARBYNAMETRANSFER_GET_PROCVARINFO_POINTER_EX(ATEMRAS_T_FINDPROCVARBYNAMETRANSFER_STD* p)
{
    return (EC_T_PROCESS_VAR_INFO_EX*)(((EC_T_PBYTE)p)+ATEMRAS_FINDPROCVARBYNAMETRANSFER_OFFS_PROCVARINFO_POINTER_EX);
} EC_INLINESTOP


typedef struct _ATEMRAS_T_EMISSLAVEPRESENTTRANSFER
{
    EC_T_DWORD      dwCommandCode;      /* Command Code */                  /* 0x00 */
    EC_T_DWORD      dwInstanceID;       /* Master Instance */               /* 0x04 */
    
    EC_T_DWORD      dwSlaveID;          /* Slave ID */                      /* 0x08 */
    EC_T_BOOL       bIsPresent;         /* Is Slave Present (response)*/    /* 0x0C */
    EC_T_DWORD      dwResult;           /* Result from Server */            /* 0x10*/
} EC_PACKED(1) ATEMRAS_T_EMISSLAVEPRESENTTRANSFER, *ATEMRAS_PT_EMISSLAVEPRESENTTRANSFER;


#define ATEMRAS_T_EMISSLAVEPRESENTTRANSFER_SIZE    sizeof(ATEMRAS_T_EMISSLAVEPRESENTTRANSFER)

#define ATEMRAS_T_EMISSLAVEPRESENTTRANSFER_OFFS_COMMANDCODE     ((EC_T_DWORD)0x00)
#define ATEMRAS_T_EMISSLAVEPRESENTTRANSFER_OFFS_INSTANCEID      ((EC_T_DWORD)0x04)
#define ATEMRAS_T_EMISSLAVEPRESENTTRANSFER_OFFS_SLAVEID         ((EC_T_DWORD)0x08)
#define ATEMRAS_T_EMISSLAVEPRESENTTRANSFER_OFFS_SLAVEPRESENT    ((EC_T_DWORD)0x0C)
#define ATEMRAS_T_EMISSLAVEPRESENTTRANSFER_OFFS_RESULT          ((EC_T_DWORD)0x10)

static EC_INLINESTART EC_T_DWORD ATEMRAS_EMISSLAVEPRESENTTRANSFER_GET_COMMANDCODE(ATEMRAS_PT_EMISSLAVEPRESENTTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_T_EMISSLAVEPRESENTTRANSFER_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMISSLAVEPRESENTTRANSFER_SET_COMMANDCODE(ATEMRAS_PT_EMISSLAVEPRESENTTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_T_EMISSLAVEPRESENTTRANSFER_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_EMISSLAVEPRESENTTRANSFER_GET_INSTANCEID(ATEMRAS_PT_EMISSLAVEPRESENTTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_T_EMISSLAVEPRESENTTRANSFER_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMISSLAVEPRESENTTRANSFER_SET_INSTANCEID(ATEMRAS_PT_EMISSLAVEPRESENTTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_T_EMISSLAVEPRESENTTRANSFER_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_EMISSLAVEPRESENTTRANSFER_GET_SLAVEID(ATEMRAS_PT_EMISSLAVEPRESENTTRANSFER p)
{
    return (EC_T_DWORD)(EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_T_EMISSLAVEPRESENTTRANSFER_OFFS_SLAVEID)));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMISSLAVEPRESENTTRANSFER_SET_SLAVEID(ATEMRAS_PT_EMISSLAVEPRESENTTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_T_EMISSLAVEPRESENTTRANSFER_OFFS_SLAVEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_BOOL ATEMRAS_EMISSLAVEPRESENTTRANSFER_GET_PRESENT(ATEMRAS_PT_EMISSLAVEPRESENTTRANSFER p)
{
    return (EC_T_BOOL)(EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_T_EMISSLAVEPRESENTTRANSFER_OFFS_SLAVEPRESENT)));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMISSLAVEPRESENTTRANSFER_SET_PRESENT(ATEMRAS_PT_EMISSLAVEPRESENTTRANSFER p, EC_T_BOOL bVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_T_EMISSLAVEPRESENTTRANSFER_OFFS_SLAVEPRESENT), bVal );
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_EMISSLAVEPRESENTTRANSFER_GET_RESULT(ATEMRAS_PT_EMISSLAVEPRESENTTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_T_EMISSLAVEPRESENTTRANSFER_OFFS_RESULT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMISSLAVEPRESENTTRANSFER_SET_RESULT(ATEMRAS_PT_EMISSLAVEPRESENTTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_T_EMISSLAVEPRESENTTRANSFER_OFFS_RESULT), dwVal);
} EC_INLINESTOP



typedef struct _ATEMRAS_T_EMSETGETPROCESSDATABITSTRANSFER
{
    EC_T_DWORD      dwCommandCode;      /* Command Code */                  /* 0x00 */
    EC_T_DWORD      dwInstanceID;       /* Master Instance */               /* 0x04 */
    
    EC_T_BOOL       bOutputData;        
    EC_T_DWORD      dwBitOffsetPd;         
    EC_T_DWORD      dwBitLengthDst;           
    EC_T_DWORD      dwTimeout;
    EC_T_DWORD      dwResult;           /* Result from Server */
} EC_PACKED(1) ATEMRAS_T_EMSETGETPROCESSDATABITSTRANSFER, *ATEMRAS_PT_EMSETGETPROCESSDATABITSTRANSFER;

#define ATEMRAS_T_EMSETGETPROCESSDATABITSTRANSFER_SIZE    sizeof(ATEMRAS_T_EMSETGETPROCESSDATABITSTRANSFER)

#define ATEMRAS_T_EMSETGETPROCESSDATABITSTRANSFER_OFFS_COMMANDCODE     ((EC_T_DWORD)0x00)
#define ATEMRAS_T_EMSETGETPROCESSDATABITSTRANSFER_OFFS_INSTANCEID      ((EC_T_DWORD)0x04)
#define ATEMRAS_T_EMSETGETPROCESSDATABITSTRANSFER_OFFS_OUTPUTDATA      ((EC_T_DWORD)0x08)
#define ATEMRAS_T_EMSETGETPROCESSDATABITSTRANSFER_OFFS_BITOFFSETPD     ((EC_T_DWORD)0x0C)
#define ATEMRAS_T_EMSETGETPROCESSDATABITSTRANSFER_OFFS_TIMEOUT         ((EC_T_DWORD)0x10)
#define ATEMRAS_T_EMSETGETPROCESSDATABITSTRANSFER_OFFS_BITLENGTH       ((EC_T_DWORD)0x14)
#define ATEMRAS_T_EMSETGETPROCESSDATABITSTRANSFER_OFFS_RESULT          ((EC_T_DWORD)0x18)
#define ATEMRAS_T_EMSETGETPROCESSDATABITSTRANSFER_OFFS_DATA            ((EC_T_DWORD)0x1C)

static EC_INLINESTART EC_T_DWORD ATEMRAS_EMSETGETPROCESSDATABITSTRANSFER_GET_COMMANDCODE(ATEMRAS_PT_EMSETGETPROCESSDATABITSTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_T_EMSETGETPROCESSDATABITSTRANSFER_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMSETGETPROCESSDATABITSTRANSFER_SET_COMMANDCODE(ATEMRAS_PT_EMSETGETPROCESSDATABITSTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_T_EMSETGETPROCESSDATABITSTRANSFER_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_DWORD ATEMRAS_EMSETGETPROCESSDATABITSTRANSFER_GET_INSTANCEID(ATEMRAS_PT_EMSETGETPROCESSDATABITSTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_T_EMSETGETPROCESSDATABITSTRANSFER_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMSETGETPROCESSDATABITSTRANSFER_SET_INSTANCEID(ATEMRAS_PT_EMSETGETPROCESSDATABITSTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_T_EMSETGETPROCESSDATABITSTRANSFER_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP


static EC_INLINESTART EC_T_BOOL ATEMRAS_EMSETGETPROCESSDATABITSTRANSFER_GET_OUTPUTDATA(ATEMRAS_PT_EMSETGETPROCESSDATABITSTRANSFER p)
{
    return (EC_T_BOOL)(EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_T_EMSETGETPROCESSDATABITSTRANSFER_OFFS_OUTPUTDATA)));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMSETGETPROCESSDATABITSTRANSFER_SET_OUTPUTDATA(ATEMRAS_PT_EMSETGETPROCESSDATABITSTRANSFER p, EC_T_BOOL dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_T_EMSETGETPROCESSDATABITSTRANSFER_OFFS_OUTPUTDATA), (EC_T_DWORD)dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_DWORD ATEMRAS_EMSETGETPROCESSDATABITSTRANSFER_GET_BITOFFSETPD(ATEMRAS_PT_EMSETGETPROCESSDATABITSTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_T_EMSETGETPROCESSDATABITSTRANSFER_OFFS_BITOFFSETPD));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMSETGETPROCESSDATABITSTRANSFER_SET_BITOFFSETPD(ATEMRAS_PT_EMSETGETPROCESSDATABITSTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_T_EMSETGETPROCESSDATABITSTRANSFER_OFFS_BITOFFSETPD), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_DWORD ATEMRAS_EMSETGETPROCESSDATABITSTRANSFER_GET_TIMEOUT(ATEMRAS_PT_EMSETGETPROCESSDATABITSTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_T_EMSETGETPROCESSDATABITSTRANSFER_OFFS_TIMEOUT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMSETGETPROCESSDATABITSTRANSFER_SET_TIMEOUT(ATEMRAS_PT_EMSETGETPROCESSDATABITSTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_T_EMSETGETPROCESSDATABITSTRANSFER_OFFS_TIMEOUT), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_DWORD ATEMRAS_EMSETGETPROCESSDATABITSTRANSFER_GET_BITLENGTH(ATEMRAS_PT_EMSETGETPROCESSDATABITSTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_T_EMSETGETPROCESSDATABITSTRANSFER_OFFS_BITLENGTH));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMSETGETPROCESSDATABITSTRANSFER_SET_BITLENGTH(ATEMRAS_PT_EMSETGETPROCESSDATABITSTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_T_EMSETGETPROCESSDATABITSTRANSFER_OFFS_BITLENGTH), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_DWORD ATEMRAS_EMSETGETPROCESSDATABITSTRANSFER_GET_RESULT(ATEMRAS_PT_EMSETGETPROCESSDATABITSTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_T_EMSETGETPROCESSDATABITSTRANSFER_OFFS_RESULT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMSETGETPROCESSDATABITSTRANSFER_SET_RESULT(ATEMRAS_PT_EMSETGETPROCESSDATABITSTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_T_EMSETGETPROCESSDATABITSTRANSFER_OFFS_RESULT), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_PBYTE ATEMRAS_EMSETGETPROCESSDATABITSTRANSFER_GET_DATA(ATEMRAS_PT_EMSETGETPROCESSDATABITSTRANSFER p)
{
    return (((EC_T_PBYTE)p)+ATEMRAS_T_EMSETGETPROCESSDATABITSTRANSFER_OFFS_DATA);
} EC_INLINESTOP

typedef struct _ATEMRAS_T_EMGETVERSIONTRANSFER
{
    EC_T_DWORD   dwCommandCode;     /* Command Code */              /* 0x00 */
    EC_T_DWORD   dwInstanceID;      /* Master Instance */           /* 0x04 */
    
    EC_T_DWORD   dwVersion;         /* Master Version */            /* 0x08 */
} EC_PACKED(1) ATEMRAS_T_EMGETVERSIONTRANSFER, *ATEMRAS_PT_EMGETVERSIONTRANSFER;

#define ATEMRAS_T_EMGETVERSIONTRANSFER_SIZE    sizeof(ATEMRAS_T_EMGETVERSIONTRANSFER)

#define ATEMRAS_EMGETVERSIONTRANSFER_OFFS_COMMANDCODE        ((EC_T_DWORD)0x00)
#define ATEMRAS_EMGETVERSIONTRANSFER_OFFS_INSTANCEID         ((EC_T_DWORD)0x04)
#define ATEMRAS_EMGETVERSIONTRANSFER_OFFS_VERSION            ((EC_T_DWORD)0x08)

static EC_INLINESTART EC_T_DWORD ATEMRAS_EMGETVERSIONTRANSFER_GET_COMMANDCODE(ATEMRAS_PT_EMGETVERSIONTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETVERSIONTRANSFER_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMGETVERSIONTRANSFER_SET_COMMANDCODE(ATEMRAS_PT_EMGETVERSIONTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETVERSIONTRANSFER_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_EMGETVERSIONTRANSFER_GET_INSTANCEID(ATEMRAS_PT_EMGETVERSIONTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETVERSIONTRANSFER_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMGETVERSIONTRANSFER_SET_INSTANCEID(ATEMRAS_PT_EMGETVERSIONTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETVERSIONTRANSFER_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_EMGETVERSIONTRANSFER_GET_VERSION(ATEMRAS_PT_EMGETVERSIONTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETVERSIONTRANSFER_OFFS_VERSION));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMGETVERSIONTRANSFER_SET_VERSION(ATEMRAS_PT_EMGETVERSIONTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETVERSIONTRANSFER_OFFS_VERSION), dwVal);
} EC_INLINESTOP

/* emGetSrcMacAddress */
typedef struct _ATEMRAS_T_EMGETSRCMACADDRESS
{
    EC_T_DWORD   dwCommandCode;     /* Command Code */              /* 0x00 */
    EC_T_DWORD   dwInstanceID;      /* Master Instance */           /* 0x04 */
    
    ETHERNET_ADDRESS   aMacSrc;     /* MAC source address */            /* 0x08 */
} EC_PACKED(1) ATEMRAS_T_EMGETSRCMACADDRESS, *ATEMRAS_PT_EMGETSRCMACADDRESS;

#define ATEMRAS_T_EMGETSRCMACADDRESS_SIZE    sizeof(ATEMRAS_T_EMGETSRCMACADDRESS)

#define ATEMRAS_EMGETSRCMACADDRESS_OFFS_COMMANDCODE        ((EC_T_DWORD)0x00)
#define ATEMRAS_EMGETSRCMACADDRESS_OFFS_INSTANCEID         ((EC_T_DWORD)0x04)
#define ATEMRAS_EMGETSRCMACADDRESS_OFFS_ADDRESS            ((EC_T_DWORD)0x08)

static EC_INLINESTART EC_T_DWORD ATEMRAS_EMGETSRCMACADDRESS_GET_COMMANDCODE(ATEMRAS_PT_EMGETSRCMACADDRESS p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETSRCMACADDRESS_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMGETSRCMACADDRESS_SET_COMMANDCODE(ATEMRAS_PT_EMGETSRCMACADDRESS p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETSRCMACADDRESS_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_EMGETSRCMACADDRESS_GET_INSTANCEID(ATEMRAS_PT_EMGETSRCMACADDRESS p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETSRCMACADDRESS_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMGETSRCMACADDRESS_SET_INSTANCEID(ATEMRAS_PT_EMGETSRCMACADDRESS p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMGETSRCMACADDRESS_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP


/* eoe register ep */
typedef struct _ATEMRAS_T_EMEOEREGISTEREP
{
    /* Request */
    EC_T_DWORD   dwCommandCode;     /* Command Code */              /* 0x00 */
    EC_T_DWORD   dwInstanceID;      /* Master Instance */           /* 0x04 */
    EC_T_DWORD   dwValidationPattern;                               /* 0x08 */
    EC_T_DWORD   dwInterfaceVersion;                                /* 0x0C */
    EC_T_CHAR    szEoEDrvIdent[MAX_DRIVER_IDENT_LEN]; 
                                    /* Name of the driver/adapter we want to open (e.g. "eoeep"). */ 
                                                                    /* 0x10 */
    /* Reply */
    EC_T_DWORD   dwResult;          /* Result from Server */        /* 0x38*/
    EC_T_DWORD   dwServerHandle;    /* Server handle */             /* 0x3C*/

} EC_PACKED(1) ATEMRAS_T_EMEOEREGISTEREP, *ATEMRAS_PT_EMEOEREGISTEREP;

#define ATEMRAS_T_EMEOEREGISTEREP_SIZE    sizeof(ATEMRAS_T_EMEOEREGISTEREP)

#define ATEMRAS_EMEOEREGISTEREP_OFFS_COMMANDCODE        EC_OFFSETOF(ATEMRAS_T_EMEOEREGISTEREP, dwCommandCode)
#define ATEMRAS_EMEOEREGISTEREP_OFFS_INSTANCEID         EC_OFFSETOF(ATEMRAS_T_EMEOEREGISTEREP, dwInstanceID)
#define ATEMRAS_EMEOEREGISTEREP_OFFS_VALIDATIONPATTERN  EC_OFFSETOF(ATEMRAS_T_EMEOEREGISTEREP, dwValidationPattern)
#define ATEMRAS_EMEOEREGISTEREP_OFFS_INTERFACEVERSION   EC_OFFSETOF(ATEMRAS_T_EMEOEREGISTEREP, dwInterfaceVersion)
#define ATEMRAS_EMEOEREGISTEREP_OFFS_EOEDRVIDENT        EC_OFFSETOF(ATEMRAS_T_EMEOEREGISTEREP, szEoEDrvIdent)
#define ATEMRAS_EMEOEREGISTEREP_OFFS_RESULT             EC_OFFSETOF(ATEMRAS_T_EMEOEREGISTEREP, dwResult)
#define ATEMRAS_EMEOEREGISTEREP_OFFS_SERVERHANDLE       EC_OFFSETOF(ATEMRAS_T_EMEOEREGISTEREP, dwServerHandle)

static EC_INLINESTART EC_T_DWORD ATEMRAS_EMEOEREGISTEREP_GET_COMMANDCODE(ATEMRAS_PT_EMEOEREGISTEREP p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMEOEREGISTEREP_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMEOEREGISTEREP_SET_COMMANDCODE(ATEMRAS_PT_EMEOEREGISTEREP p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMEOEREGISTEREP_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_DWORD ATEMRAS_EMEOEREGISTEREP_GET_INSTANCEID(ATEMRAS_PT_EMEOEREGISTEREP p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMEOEREGISTEREP_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMEOEREGISTEREP_SET_INSTANCEID(ATEMRAS_PT_EMEOEREGISTEREP p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMEOEREGISTEREP_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_DWORD ATEMRAS_EMEOEREGISTEREP_GET_VALIDATIONPATTERN(ATEMRAS_PT_EMEOEREGISTEREP p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMEOEREGISTEREP_OFFS_VALIDATIONPATTERN));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMEOEREGISTEREP_SET_VALIDATIONPATTERN(ATEMRAS_PT_EMEOEREGISTEREP p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMEOEREGISTEREP_OFFS_VALIDATIONPATTERN), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_DWORD ATEMRAS_EMEOEREGISTEREP_GET_INTERFACEVERSION(ATEMRAS_PT_EMEOEREGISTEREP p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMEOEREGISTEREP_OFFS_INTERFACEVERSION));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMEOEREGISTEREP_SET_INTERFACEVERSION(ATEMRAS_PT_EMEOEREGISTEREP p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMEOEREGISTEREP_OFFS_INTERFACEVERSION), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_CHAR* ATEMRAS_EMEOEREGISTEREP_EOEDRVIDENT(ATEMRAS_PT_EMEOEREGISTEREP p)
{
    return ((EC_T_CHAR*)(((EC_T_PBYTE)p)+ATEMRAS_EMEOEREGISTEREP_OFFS_EOEDRVIDENT));
} EC_INLINESTOP

static EC_INLINESTART EC_T_DWORD ATEMRAS_EMEOEREGISTEREP_GET_RESULT(ATEMRAS_PT_EMEOEREGISTEREP p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMEOEREGISTEREP_OFFS_RESULT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMEOEREGISTEREP_SET_RESULT(ATEMRAS_PT_EMEOEREGISTEREP p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMEOEREGISTEREP_OFFS_RESULT), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_DWORD ATEMRAS_EMEOEREGISTEREP_GET_SERVERHANDLE(ATEMRAS_PT_EMEOEREGISTEREP p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMEOEREGISTEREP_OFFS_SERVERHANDLE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMEOEREGISTEREP_SET_SERVERHANDLE(ATEMRAS_PT_EMEOEREGISTEREP p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMEOEREGISTEREP_OFFS_SERVERHANDLE), dwVal);
} EC_INLINESTOP


/* Link Open */
typedef struct _ATEMRAS_T_EMLINKOPEN
{
    /* Request */

    EC_T_DWORD   dwCommandCode;     /* Command Code */
    EC_T_DWORD   dwInstanceID;      /* Master Instance */

    /* EC_T_LINK_PARMS */
    struct
    {
        EC_T_DWORD      dwSignature;                            /* see EC_LINK_PARMS_SIGNATURE_... */
        EC_T_DWORD      dwSize;
        EC_T_CHAR       szDriverIdent[MAX_DRIVER_IDENT_LEN];    /* driver identification string (zero terminated) */
        EC_T_DWORD      dwInstance;
        EC_T_LINKMODE   eLinkMode;                              /* operation mode: polling or interrupt */
        EC_T_DWORD      dwIstPriority;
        EC_T_DWORD      dwReserved[16];                         /* reserved for eventually new members in EC_T_LINK_PARMS */

    } EC_PACKED(1) LinkParms;

    union
    {
        /* EC_T_LINK_PARMS_EOE */
        struct
        {
            EC_T_DWORD      dwDriverHandle;    /* Handle to the underlying driver */

        } EC_PACKED(1) EoE;

        EC_T_BYTE   abyReserved[512];

    }  EC_PACKED(1) LinkSpecificParms;

    /* Reply */
    
    EC_T_DWORD   dwResult;          /* Result from Server */
    EC_T_DWORD   dwInstanceHandle;  /* Handle to opened instance of the underlying driver */

} EC_PACKED(1) ATEMRAS_T_EMLINKOPEN, *ATEMRAS_PT_EMLINKOPEN;


/* Link Frame Recv/Send/Close/... */
typedef struct _ATEMRAS_T_EMLINKFRAME
{
    /* Request */

    EC_T_DWORD   dwCommandCode;     /* Command Code */              /* 0x00 */
    EC_T_DWORD   dwInstanceID;      /* Master Instance */           /* 0x04 */
    EC_T_DWORD   dwDriverHandle;    /* Handle to the underlying driver */
                                                                    /* 0x08 */
    EC_T_DWORD   dwInstanceHandle;  /* Handle to opened instance of the underlying driver */
                                                                    /* 0x0C */
 
    /* Reply */
    
    EC_T_DWORD   dwResult;          /* Result from Server */        /* 0x10*/

    /* Request / Reply */
 
    EC_T_DWORD   dwFrameLength;     /* Frame length in bytes */     /* 0x14 */

                                    /* Frame (dwBuflen bytes) */    /* 0x18 */

} EC_PACKED(1) ATEMRAS_T_EMLINKFRAME, *ATEMRAS_PT_EMLINKFRAME;

#define ATEMRAS_T_EMLINKFRAME_SIZE    sizeof(ATEMRAS_T_EMLINKFRAME)

#define ATEMRAS_EMLINKFRAME_OFFS_COMMANDCODE        EC_OFFSETOF(ATEMRAS_T_EMLINKFRAME, dwCommandCode)
#define ATEMRAS_EMLINKFRAME_OFFS_INSTANCEID         EC_OFFSETOF(ATEMRAS_T_EMLINKFRAME, dwInstanceID)
#define ATEMRAS_EMLINKFRAME_OFFS_DRIVERHANDLE       EC_OFFSETOF(ATEMRAS_T_EMLINKFRAME, dwDriverHandle)
#define ATEMRAS_EMLINKFRAME_OFFS_INSTANCEHANDLE     EC_OFFSETOF(ATEMRAS_T_EMLINKFRAME, dwInstanceHandle)
#define ATEMRAS_EMLINKFRAME_OFFS_RESULT             EC_OFFSETOF(ATEMRAS_T_EMLINKFRAME, dwResult)
#define ATEMRAS_EMLINKFRAME_OFFS_FRAMELENGTH        EC_OFFSETOF(ATEMRAS_T_EMLINKFRAME, dwFrameLength)
#define ATEMRAS_EMLINKFRAME_OFFS_FRAMEBUFFER        sizeof(ATEMRAS_T_EMLINKFRAME)

static EC_INLINESTART EC_T_DWORD ATEMRAS_EMLINKFRAME_GET_COMMANDCODE(ATEMRAS_PT_EMLINKFRAME p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMLINKFRAME_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMLINKFRAME_SET_COMMANDCODE(ATEMRAS_PT_EMLINKFRAME p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMLINKFRAME_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_DWORD ATEMRAS_EMLINKFRAME_GET_INSTANCEID(ATEMRAS_PT_EMLINKFRAME p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMLINKFRAME_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMLINKFRAME_SET_INSTANCEID(ATEMRAS_PT_EMLINKFRAME p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMLINKFRAME_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_DWORD ATEMRAS_EMLINKFRAME_GET_DRIVERHANDLE(ATEMRAS_PT_EMLINKFRAME p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMLINKFRAME_OFFS_DRIVERHANDLE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMLINKFRAME_SET_DRIVERHANDLE(ATEMRAS_PT_EMLINKFRAME p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMLINKFRAME_OFFS_DRIVERHANDLE), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_DWORD ATEMRAS_EMLINKFRAME_GET_INSTANCEHANDLE(ATEMRAS_PT_EMLINKFRAME p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMLINKFRAME_OFFS_INSTANCEHANDLE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMLINKFRAME_SET_INSTANCEHANDLE(ATEMRAS_PT_EMLINKFRAME p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMLINKFRAME_OFFS_INSTANCEHANDLE), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_DWORD ATEMRAS_EMLINKFRAME_GET_RESULT(ATEMRAS_PT_EMLINKFRAME p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMLINKFRAME_OFFS_RESULT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMLINKFRAME_SET_RESULT(ATEMRAS_PT_EMLINKFRAME p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMLINKFRAME_OFFS_RESULT), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_DWORD ATEMRAS_EMLINKFRAME_GET_FRAMELENGTH(ATEMRAS_PT_EMLINKFRAME p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMLINKFRAME_OFFS_FRAMELENGTH));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMLINKFRAME_SET_FRAMELENGTH(ATEMRAS_PT_EMLINKFRAME p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_EMLINKFRAME_OFFS_FRAMELENGTH), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_PBYTE ATEMRAS_EMLINKFRAME_FRAMEBUFFER(ATEMRAS_PT_EMLINKFRAME p)
{
    return (EC_T_PBYTE)((((EC_T_PBYTE)p)+ATEMRAS_EMLINKFRAME_OFFS_FRAMEBUFFER));
} EC_INLINESTOP

typedef struct _ATEMRAS_T_EMFORCERELEASEPROCESSDATABITSTRANSFER
{
    EC_T_DWORD      dwCommandCode;      /* Command Code */                  /* 0x00 */
    EC_T_DWORD      dwInstanceID;		/* Master Instance */               /* 0x04 */
    EC_T_DWORD		dwClientId;
	EC_T_DWORD		dwResult;
    EC_T_BOOL       bOutput;
    EC_T_DWORD      dwBitOffset;         
    EC_T_WORD		wBitLength;
	EC_T_DWORD		dwTimeout;
    
              /* Result from Server */
} EC_PACKED(1) ATEMRAS_T_EMFORCERELEASEPROCESSDATABITSTRANSFER, *ATEMRAS_PT_EMFORCERELEASEPROCESSDATABITSTRANSFER;

#define ATEMRAS_T_EMFORCERELEASEPROCESSDATABITSTRANSFER_SIZE    sizeof(ATEMRAS_T_EMFORCERELEASEPROCESSDATABITSTRANSFER)

#define ATEMRAS_T_EMFORCERELEASEPROCESSDATABITSTRANSFER_OFFS_COMMANDCODE     ((EC_T_DWORD)0x00)
#define ATEMRAS_T_EMFORCERELEASEPROCESSDATABITSTRANSFER_OFFS_INSTANCEID      ((EC_T_DWORD)0x04)
#define ATEMRAS_T_EMFORCERELEASEPROCESSDATABITSTRANSFER_OFFS_CLIENTID	     ((EC_T_DWORD)0x08)
#define ATEMRAS_T_EMFORCERELEASEPROCESSDATABITSTRANSFER_OFFS_RESULT		     ((EC_T_DWORD)0x0C)
#define ATEMRAS_T_EMFORCERELEASEPROCESSDATABITSTRANSFER_OFFS_OUTPUT		     ((EC_T_BOOL)0x10)
#define ATEMRAS_T_EMFORCERELEASEPROCESSDATABITSTRANSFER_OFFS_BITOFFSET       ((EC_T_DWORD)0x14)
#define ATEMRAS_T_EMFORCERELEASEPROCESSDATABITSTRANSFER_OFFS_BITLENGTH       ((EC_T_WORD)0x18)
#define ATEMRAS_T_EMFORCERELEASEPROCESSDATABITSTRANSFER_OFFS_TIMEOUT	     ((EC_T_DWORD)0x1A)
#define ATEMRAS_T_EMFORCERELEASEPROCESSDATABITSTRANSFER_OFFS_PBYDATA	     ((EC_T_BYTE)0x1E)

static EC_INLINESTART EC_T_DWORD ATEMRAS_EMFORCERELEASEPROCESSDATABITSTRANSFER_GET_COMMANDCODE(ATEMRAS_PT_EMFORCERELEASEPROCESSDATABITSTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_T_EMFORCERELEASEPROCESSDATABITSTRANSFER_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMFORCERELEASEPROCESSDATABITSTRANSFER_SET_COMMANDCODE(ATEMRAS_PT_EMFORCERELEASEPROCESSDATABITSTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_T_EMFORCERELEASEPROCESSDATABITSTRANSFER_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_DWORD ATEMRAS_EMFORCERELEASEPROCESSDATABITSTRANSFER_GET_INSTANCEID(ATEMRAS_PT_EMFORCERELEASEPROCESSDATABITSTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_T_EMFORCERELEASEPROCESSDATABITSTRANSFER_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMFORCERELEASEPROCESSDATABITSTRANSFER_SET_INSTANCEID(ATEMRAS_PT_EMFORCERELEASEPROCESSDATABITSTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_T_EMFORCERELEASEPROCESSDATABITSTRANSFER_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP


static EC_INLINESTART EC_T_DWORD ATEMRAS_EMFORCERELEASEPROCESSDATABITSTRANSFER_GET_CLIENTID(ATEMRAS_PT_EMFORCERELEASEPROCESSDATABITSTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_T_EMFORCERELEASEPROCESSDATABITSTRANSFER_OFFS_CLIENTID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMFORCERELEASEPROCESSDATABITSTRANSFER_SET_CLIENTID(ATEMRAS_PT_EMFORCERELEASEPROCESSDATABITSTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_T_EMFORCERELEASEPROCESSDATABITSTRANSFER_OFFS_CLIENTID), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_DWORD ATEMRAS_EMFORCERELEASEPROCESSDATABITSTRANSFER_GET_RESULT(ATEMRAS_PT_EMFORCERELEASEPROCESSDATABITSTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_T_EMFORCERELEASEPROCESSDATABITSTRANSFER_OFFS_RESULT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMFORCERELEASEPROCESSDATABITSTRANSFER_SET_RESULT(ATEMRAS_PT_EMFORCERELEASEPROCESSDATABITSTRANSFER p, EC_T_BOOL dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_T_EMFORCERELEASEPROCESSDATABITSTRANSFER_OFFS_RESULT), (EC_T_DWORD)dwVal);
} EC_INLINESTOP


static EC_INLINESTART EC_T_BOOL ATEMRAS_EMFORCERELEASEPROCESSDATABITSTRANSFER_GET_OUTPUT(ATEMRAS_PT_EMFORCERELEASEPROCESSDATABITSTRANSFER p)
{
    return EC_GET_FRM_BOOL((((EC_T_PBYTE)p)+ATEMRAS_T_EMFORCERELEASEPROCESSDATABITSTRANSFER_OFFS_OUTPUT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMFORCERELEASEPROCESSDATABITSTRANSFER_SET_OUTPUT(ATEMRAS_PT_EMFORCERELEASEPROCESSDATABITSTRANSFER p, EC_T_BOOL bVal)
{
    EC_SET_FRM_BOOL((((EC_T_PBYTE)p)+ATEMRAS_T_EMFORCERELEASEPROCESSDATABITSTRANSFER_OFFS_OUTPUT), bVal);
} EC_INLINESTOP


static EC_INLINESTART EC_T_DWORD ATEMRAS_EMFORCERELEASEPROCESSDATABITSTRANSFER_GET_BITOFFSET(ATEMRAS_PT_EMFORCERELEASEPROCESSDATABITSTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_T_EMFORCERELEASEPROCESSDATABITSTRANSFER_OFFS_BITOFFSET));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMFORCERELEASEPROCESSDATABITSTRANSFER_SET_BITOFFSET(ATEMRAS_PT_EMFORCERELEASEPROCESSDATABITSTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_T_EMFORCERELEASEPROCESSDATABITSTRANSFER_OFFS_BITOFFSET), dwVal);
} EC_INLINESTOP


static EC_INLINESTART EC_T_WORD ATEMRAS_EMFORCERELEASEPROCESSDATABITSTRANSFER_GET_BITLENGTH(ATEMRAS_PT_EMFORCERELEASEPROCESSDATABITSTRANSFER p)
{
    return EC_GET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_T_EMFORCERELEASEPROCESSDATABITSTRANSFER_OFFS_BITLENGTH));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMFORCERELEASEPROCESSDATABITSTRANSFER_SET_BITLENGTH(ATEMRAS_PT_EMFORCERELEASEPROCESSDATABITSTRANSFER p, EC_T_WORD wVal)
{
    EC_SET_FRM_WORD((((EC_T_PBYTE)p)+ATEMRAS_T_EMFORCERELEASEPROCESSDATABITSTRANSFER_OFFS_BITLENGTH), wVal);
} EC_INLINESTOP


static EC_INLINESTART EC_T_DWORD ATEMRAS_EMFORCERELEASEPROCESSDATABITSTRANSFER_GET_TIMEOUT(ATEMRAS_PT_EMFORCERELEASEPROCESSDATABITSTRANSFER p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_T_EMFORCERELEASEPROCESSDATABITSTRANSFER_OFFS_TIMEOUT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_EMFORCERELEASEPROCESSDATABITSTRANSFER_SET_TIMEOUT(ATEMRAS_PT_EMFORCERELEASEPROCESSDATABITSTRANSFER p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p)+ATEMRAS_T_EMFORCERELEASEPROCESSDATABITSTRANSFER_OFFS_TIMEOUT), dwVal);
} EC_INLINESTOP



static EC_INLINESTART EC_T_PBYTE ATEMRAS_EMFORCERELEASEPROCESSDATABITSTRANSFER_GET_PBYDATA(ATEMRAS_PT_EMFORCERELEASEPROCESSDATABITSTRANSFER p)
{
    return (((EC_T_PBYTE)p)+ATEMRAS_T_EMFORCERELEASEPROCESSDATABITSTRANSFER_OFFS_PBYDATA);
} EC_INLINESTOP


/* Read slave identification value */
typedef struct _ATEMRAS_T_SLAVEIDENTIFICATION
{
    EC_T_DWORD          dwCommandCode;      /* Command Code */              /* 00 */
    EC_T_DWORD          dwInstanceID;       /* Master Instance */           /* 04 */

    EC_T_BOOL           bFixedAddressing;                                   /* 08 */
    EC_T_WORD           wSlaveAddress;                                      /* 12 */
    EC_T_WORD           wAdo;               /*Identification addr offs */   /* 14 */
    EC_T_WORD           wValue;             /*Identification value */       /* 16 */
    EC_T_WORD           wRsvd;                                                
    EC_T_DWORD          dwTimeout;                                          /* 20 */
    EC_T_DWORD          dwSrvResult;        /* Result code from server */   /* 24 */
} EC_PACKED(1) ATEMRAS_T_SLAVEIDENTIFICATION, *ATEMRAS_PT_SLAVEIDENTIFICATION;

#define ATEMRAS_T_SLAVEIDENTIFICATION_SIZE     sizeof(ATEMRAS_T_SLAVEIDENTIFICATION)

#define ATEMRAS_SLAVEIDENTIFICATION_OFFS_COMMANDCODE           ((EC_T_DWORD)0)
#define ATEMRAS_SLAVEIDENTIFICATION_OFFS_INSTANCEID            ((EC_T_DWORD)4)
#define ATEMRAS_SLAVEIDENTIFICATION_OFFS_FIXEDADDRESSING       ((EC_T_DWORD)8)
#define ATEMRAS_SLAVEIDENTIFICATION_OFFS_SLAVEADDRESS          ((EC_T_DWORD)12)
#define ATEMRAS_SLAVEIDENTIFICATION_OFFS_ADO                   ((EC_T_DWORD)14)
#define ATEMRAS_SLAVEIDENTIFICATION_OFFS_VALUE                 ((EC_T_DWORD)16)
#define ATEMRAS_SLAVEIDENTIFICATION_OFFS_TIMEOUT               ((EC_T_DWORD)20)
#define ATEMRAS_SLAVEIDENTIFICATION_OFFS_SRVRESULT             ((EC_T_DWORD)24)

static EC_INLINESTART EC_T_DWORD ATEMRAS_SLAVEIDENTIFICATION_GET_COMMANDCODE(ATEMRAS_PT_SLAVEIDENTIFICATION p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_SLAVEIDENTIFICATION_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SLAVEIDENTIFICATION_SET_COMMANDCODE(ATEMRAS_PT_SLAVEIDENTIFICATION p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_SLAVEIDENTIFICATION_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_DWORD ATEMRAS_SLAVEIDENTIFICATION_GET_INSTANCEID(ATEMRAS_PT_SLAVEIDENTIFICATION p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_SLAVEIDENTIFICATION_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SLAVEIDENTIFICATION_SET_INSTANCEID(ATEMRAS_PT_SLAVEIDENTIFICATION p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_SLAVEIDENTIFICATION_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_BOOL ATEMRAS_SLAVEIDENTIFICATION_GET_FIXEDADDRESSING(ATEMRAS_PT_SLAVEIDENTIFICATION p)
{
    return (EC_T_BOOL)EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_SLAVEIDENTIFICATION_OFFS_FIXEDADDRESSING));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SLAVEIDENTIFICATION_SET_FIXEDADDRESSING(ATEMRAS_PT_SLAVEIDENTIFICATION p, EC_T_BOOL bVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_SLAVEIDENTIFICATION_OFFS_FIXEDADDRESSING), (EC_T_DWORD)bVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_WORD ATEMRAS_SLAVEIDENTIFICATION_GET_SLAVEADDRESS(ATEMRAS_PT_SLAVEIDENTIFICATION p)
{
    return EC_GET_FRM_WORD((((EC_T_PBYTE)p) + ATEMRAS_SLAVEIDENTIFICATION_OFFS_SLAVEADDRESS));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SLAVEIDENTIFICATION_SET_SLAVEADDRESS(ATEMRAS_PT_SLAVEIDENTIFICATION p, EC_T_WORD wVal)
{
    EC_SET_FRM_WORD((((EC_T_PBYTE)p) + ATEMRAS_SLAVEIDENTIFICATION_OFFS_SLAVEADDRESS), wVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_WORD ATEMRAS_SLAVEIDENTIFICATION_GET_ADO(ATEMRAS_PT_SLAVEIDENTIFICATION p)
{
    return EC_GET_FRM_WORD((((EC_T_PBYTE)p) + ATEMRAS_SLAVEIDENTIFICATION_OFFS_ADO));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SLAVEIDENTIFICATION_SET_ADO(ATEMRAS_PT_SLAVEIDENTIFICATION p, EC_T_WORD wVal)
{
    EC_SET_FRM_WORD((((EC_T_PBYTE)p) + ATEMRAS_SLAVEIDENTIFICATION_OFFS_ADO), wVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_WORD ATEMRAS_SLAVEIDENTIFICATION_GET_VALUE(ATEMRAS_PT_SLAVEIDENTIFICATION p)
{
    return EC_GET_FRM_WORD((((EC_T_PBYTE)p) + ATEMRAS_SLAVEIDENTIFICATION_OFFS_VALUE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SLAVEIDENTIFICATION_SET_VALUE(ATEMRAS_PT_SLAVEIDENTIFICATION p, EC_T_WORD wVal)
{
    EC_SET_FRM_WORD((((EC_T_PBYTE)p) + ATEMRAS_SLAVEIDENTIFICATION_OFFS_VALUE), wVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_DWORD ATEMRAS_SLAVEIDENTIFICATION_GET_TIMEOUT(ATEMRAS_PT_SLAVEIDENTIFICATION p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_SLAVEIDENTIFICATION_OFFS_TIMEOUT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SLAVEIDENTIFICATION_SET_TIMEOUT(ATEMRAS_PT_SLAVEIDENTIFICATION p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_SLAVEIDENTIFICATION_OFFS_TIMEOUT), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_DWORD ATEMRAS_SLAVEIDENTIFICATION_GET_SRVRESULT(ATEMRAS_PT_SLAVEIDENTIFICATION p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_SLAVEIDENTIFICATION_OFFS_SRVRESULT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SLAVEIDENTIFICATION_SET_SRVRESULT(ATEMRAS_PT_SLAVEIDENTIFICATION p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_SLAVEIDENTIFICATION_OFFS_SRVRESULT), dwVal);
} EC_INLINESTOP

/* Set slave disabled */
typedef struct _ATEMRAS_T_SETSLAVEDISABLED
{
    EC_T_DWORD          dwCommandCode;      /* Command Code */              /* 00 */
    EC_T_DWORD          dwInstanceID;       /* Master Instance */           /* 04 */

    EC_T_BOOL           bFixedAddressing;                                   /* 08 */
    EC_T_WORD           wSlaveAddress;                                      /* 12 */
    EC_T_BOOL           bDisabled;          /* Slave disabled value */      /* 14 */

    EC_T_DWORD          dwSrvResult;        /* Result code from server */   /* 18 */
} EC_PACKED(1) ATEMRAS_T_SETSLAVEDISABLED, *ATEMRAS_PT_SETSLAVEDISABLED;

#define ATEMRAS_T_SETSLAVEDISABLED_SIZE     sizeof(ATEMRAS_T_SETSLAVEDISABLED)

#define ATEMRAS_SETSLAVEDISABLED_OFFS_COMMANDCODE           ((EC_T_DWORD)0)
#define ATEMRAS_SETSLAVEDISABLED_OFFS_INSTANCEID            ((EC_T_DWORD)4)
#define ATEMRAS_SETSLAVEDISABLED_OFFS_FIXEDADDRESSING       ((EC_T_DWORD)8)
#define ATEMRAS_SETSLAVEDISABLED_OFFS_SLAVEADDRESS          ((EC_T_DWORD)12)
#define ATEMRAS_SETSLAVEDISABLED_OFFS_DISABLED              ((EC_T_DWORD)14)
#define ATEMRAS_SETSLAVEDISABLED_OFFS_SRVRESULT             ((EC_T_DWORD)18)

static EC_INLINESTART EC_T_DWORD ATEMRAS_SETSLAVEDISABLED_GET_COMMANDCODE(ATEMRAS_PT_SETSLAVEDISABLED p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_SETSLAVEDISABLED_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SETSLAVEDISABLED_SET_COMMANDCODE(ATEMRAS_PT_SETSLAVEDISABLED p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_SETSLAVEDISABLED_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_DWORD ATEMRAS_SETSLAVEDISABLED_GET_INSTANCEID(ATEMRAS_PT_SETSLAVEDISABLED p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_SETSLAVEDISABLED_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SETSLAVEDISABLED_SET_INSTANCEID(ATEMRAS_PT_SETSLAVEDISABLED p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_SETSLAVEDISABLED_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_BOOL ATEMRAS_SETSLAVEDISABLED_GET_FIXEDADDRESSING(ATEMRAS_PT_SETSLAVEDISABLED p)
{
    return (EC_T_BOOL)EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_SETSLAVEDISABLED_OFFS_FIXEDADDRESSING));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SETSLAVEDISABLED_SET_FIXEDADDRESSING(ATEMRAS_PT_SETSLAVEDISABLED p, EC_T_BOOL bVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_SETSLAVEDISABLED_OFFS_FIXEDADDRESSING), (EC_T_DWORD)bVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_WORD ATEMRAS_SETSLAVEDISABLED_GET_SLAVEADDRESS(ATEMRAS_PT_SETSLAVEDISABLED p)
{
    return EC_GET_FRM_WORD((((EC_T_PBYTE)p) + ATEMRAS_SETSLAVEDISABLED_OFFS_SLAVEADDRESS));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SETSLAVEDISABLED_SET_SLAVEADDRESS(ATEMRAS_PT_SETSLAVEDISABLED p, EC_T_WORD wVal)
{
    EC_SET_FRM_WORD((((EC_T_PBYTE)p) + ATEMRAS_SETSLAVEDISABLED_OFFS_SLAVEADDRESS), wVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_BOOL ATEMRAS_SETSLAVEDISABLED_GET_DISABLED(ATEMRAS_PT_SETSLAVEDISABLED p)
{
    return EC_GET_FRM_BOOL((((EC_T_PBYTE)p) + ATEMRAS_SETSLAVEDISABLED_OFFS_DISABLED));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SETSLAVEDISABLED_SET_DISABLED(ATEMRAS_PT_SETSLAVEDISABLED p, EC_T_BOOL bVal)
{
    EC_SET_FRM_BOOL((((EC_T_PBYTE)p) + ATEMRAS_SETSLAVEDISABLED_OFFS_DISABLED), bVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_DWORD ATEMRAS_SETSLAVEDISABLED_GET_SRVRESULT(ATEMRAS_PT_SETSLAVEDISABLED p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_SETSLAVEDISABLED_OFFS_SRVRESULT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SETSLAVEDISABLED_SET_SRVRESULT(ATEMRAS_PT_SETSLAVEDISABLED p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_SETSLAVEDISABLED_OFFS_SRVRESULT), dwVal);
} EC_INLINESTOP

/* Set slave disconnected */
typedef struct _ATEMRAS_T_SETSLAVEDISCONNECTED
{
    EC_T_DWORD          dwCommandCode;      /* Command Code */              /* 00 */
    EC_T_DWORD          dwInstanceID;       /* Master Instance */           /* 04 */

    EC_T_BOOL           bFixedAddressing;                                   /* 08 */
    EC_T_WORD           wSlaveAddress;                                      /* 12 */
    EC_T_BOOL           bDisconnected;      /* Slave disconnected value */  /* 14 */

    EC_T_DWORD          dwSrvResult;        /* Result code from server */   /* 18 */
} EC_PACKED(1) ATEMRAS_T_SETSLAVEDISCONNECTED, *ATEMRAS_PT_SETSLAVEDISCONNECTED;

#define ATEMRAS_T_SETSLAVEDISCONNECTED_SIZE     sizeof(ATEMRAS_T_SETSLAVEDISCONNECTED)

#define ATEMRAS_SETSLAVEDISCONNECTED_OFFS_COMMANDCODE           ((EC_T_DWORD)0)
#define ATEMRAS_SETSLAVEDISCONNECTED_OFFS_INSTANCEID            ((EC_T_DWORD)4)
#define ATEMRAS_SETSLAVEDISCONNECTED_OFFS_FIXEDADDRESSING       ((EC_T_DWORD)8)
#define ATEMRAS_SETSLAVEDISCONNECTED_OFFS_SLAVEADDRESS          ((EC_T_DWORD)12)
#define ATEMRAS_SETSLAVEDISCONNECTED_OFFS_DISCONNECTED          ((EC_T_DWORD)14)
#define ATEMRAS_SETSLAVEDISCONNECTED_OFFS_SRVRESULT             ((EC_T_DWORD)18)

static EC_INLINESTART EC_T_DWORD ATEMRAS_SETSLAVEDISCONNECTED_GET_COMMANDCODE(ATEMRAS_PT_SETSLAVEDISCONNECTED p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_SETSLAVEDISCONNECTED_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SETSLAVEDISCONNECTED_SET_COMMANDCODE(ATEMRAS_PT_SETSLAVEDISCONNECTED p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_SETSLAVEDISCONNECTED_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_DWORD ATEMRAS_SETSLAVEDISCONNECTED_GET_INSTANCEID(ATEMRAS_PT_SETSLAVEDISCONNECTED p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_SETSLAVEDISCONNECTED_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SETSLAVEDISCONNECTED_SET_INSTANCEID(ATEMRAS_PT_SETSLAVEDISCONNECTED p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_SETSLAVEDISCONNECTED_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_BOOL ATEMRAS_SETSLAVEDISCONNECTED_GET_FIXEDADDRESSING(ATEMRAS_PT_SETSLAVEDISCONNECTED p)
{
    return (EC_T_BOOL)EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_SETSLAVEDISCONNECTED_OFFS_FIXEDADDRESSING));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SETSLAVEDISCONNECTED_SET_FIXEDADDRESSING(ATEMRAS_PT_SETSLAVEDISCONNECTED p, EC_T_BOOL bVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_SETSLAVEDISCONNECTED_OFFS_FIXEDADDRESSING), (EC_T_DWORD)bVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_WORD ATEMRAS_SETSLAVEDISCONNECTED_GET_SLAVEADDRESS(ATEMRAS_PT_SETSLAVEDISCONNECTED p)
{
    return EC_GET_FRM_WORD((((EC_T_PBYTE)p) + ATEMRAS_SETSLAVEDISCONNECTED_OFFS_SLAVEADDRESS));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SETSLAVEDISCONNECTED_SET_SLAVEADDRESS(ATEMRAS_PT_SETSLAVEDISCONNECTED p, EC_T_WORD wVal)
{
    EC_SET_FRM_WORD((((EC_T_PBYTE)p) + ATEMRAS_SETSLAVEDISCONNECTED_OFFS_SLAVEADDRESS), wVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_BOOL ATEMRAS_SETSLAVEDISCONNECTED_GET_DISCONNECTED(ATEMRAS_PT_SETSLAVEDISCONNECTED p)
{
    return EC_GET_FRM_BOOL((((EC_T_PBYTE)p) + ATEMRAS_SETSLAVEDISCONNECTED_OFFS_DISCONNECTED));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SETSLAVEDISCONNECTED_SET_DISCONNECTED(ATEMRAS_PT_SETSLAVEDISCONNECTED p, EC_T_BOOL bVal)
{
    EC_SET_FRM_BOOL((((EC_T_PBYTE)p) + ATEMRAS_SETSLAVEDISCONNECTED_OFFS_DISCONNECTED), bVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_DWORD ATEMRAS_SETSLAVEDISCONNECTED_GET_SRVRESULT(ATEMRAS_PT_SETSLAVEDISCONNECTED p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_SETSLAVEDISCONNECTED_OFFS_SRVRESULT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SETSLAVEDISCONNECTED_SET_SRVRESULT(ATEMRAS_PT_SETSLAVEDISCONNECTED p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_SETSLAVEDISCONNECTED_OFFS_SRVRESULT), dwVal);
} EC_INLINESTOP

/* Rescue scan */
typedef struct _ATEMRAS_T_RESCUESCAN
{
    EC_T_DWORD dwCommandCode; /* Command Code */            /* 00 */
    EC_T_DWORD dwInstanceID;  /* Master Instance */         /* 04 */

    EC_T_DWORD dwTimeout;                                   /* 8 */
    EC_T_DWORD dwSrvResult;   /* Result code from server */ /* 12 */
} EC_PACKED(1) ATEMRAS_T_RESCUESCAN;

#define ATEMRAS_T_RESCUESCAN_SIZE     sizeof(ATEMRAS_T_RESCUESCAN)

#define ATEMRAS_RESCUESCAN_OFFS_COMMANDCODE           ((EC_T_DWORD)0)
#define ATEMRAS_RESCUESCAN_OFFS_INSTANCEID            ((EC_T_DWORD)4)
#define ATEMRAS_RESCUESCAN_OFFS_TIMEOUT               ((EC_T_DWORD)8)
#define ATEMRAS_RESCUESCAN_OFFS_SRVRESULT             ((EC_T_DWORD)12)

static EC_INLINESTART EC_T_DWORD ATEMRAS_RESCUESCAN_GET_COMMANDCODE(ATEMRAS_T_RESCUESCAN* p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_RESCUESCAN_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_RESCUESCAN_SET_COMMANDCODE(ATEMRAS_T_RESCUESCAN* p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_RESCUESCAN_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_DWORD ATEMRAS_RESCUESCAN_GET_INSTANCEID(ATEMRAS_T_RESCUESCAN* p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_RESCUESCAN_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_RESCUESCAN_SET_INSTANCEID(ATEMRAS_T_RESCUESCAN* p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_RESCUESCAN_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_RESCUESCAN_GET_TIMEOUT(ATEMRAS_T_RESCUESCAN* p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_RESCUESCAN_OFFS_TIMEOUT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_RESCUESCAN_SET_TIMEOUT(ATEMRAS_T_RESCUESCAN* p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_RESCUESCAN_OFFS_TIMEOUT), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_DWORD ATEMRAS_RESCUESCAN_GET_SRVRESULT(ATEMRAS_T_RESCUESCAN* p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_RESCUESCAN_OFFS_SRVRESULT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_RESCUESCAN_SET_SRVRESULT(ATEMRAS_T_RESCUESCAN* p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_RESCUESCAN_OFFS_SRVRESULT), dwVal);
} EC_INLINESTOP

/* Get Master Info */
typedef struct _ATEMRAS_T_GETMASTERINFO
{
    EC_T_DWORD              dwCommandCode;     /* Command Code */              /* 0x00 */
    EC_T_DWORD              dwInstanceID;      /* Master Instance */           /* 0x04 */
    EC_T_DWORD              dwRes;             /* Reserved */                  /* 0x08 */
    EC_T_DWORD              dwResult;          /* Result from Server */        /* 0x0C */
    EC_T_MASTER_INFO        MasterInfo;        /* Master information */        /* 0x10 */
} EC_PACKED(1) ATEMRAS_T_GETMASTERINFO;


#define ATEMRAS_T_GETMASTERINFO_SIZE    sizeof(ATEMRAS_T_GETMASTERINFO)

#define ATEMRAS_GETMASTERINFO_OFFS_COMMANDCODE      ((EC_T_DWORD)0x00)
#define ATEMRAS_GETMASTERINFO_OFFS_INSTANCEID       ((EC_T_DWORD)0x04)
#define ATEMRAS_GETMASTERINFO_OFFS_RESULT           ((EC_T_DWORD)0x0C)
#define ATEMRAS_GETMASTERINFO_OFFS_MASTER_INFO      ((EC_T_DWORD)0x10)

static EC_INLINESTART EC_T_DWORD ATEMRAS_GETMASTERINFO_GET_COMMANDCODE(ATEMRAS_T_GETMASTERINFO* p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_GETMASTERINFO_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_GETMASTERINFO_SET_COMMANDCODE(ATEMRAS_T_GETMASTERINFO* p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_GETMASTERINFO_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_GETMASTERINFO_GET_INSTANCEID(ATEMRAS_T_GETMASTERINFO* p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_GETMASTERINFO_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_GETMASTERINFO_SET_INSTANCEID(ATEMRAS_T_GETMASTERINFO* p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_GETMASTERINFO_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_GETMASTERINFO_GET_RESULT(ATEMRAS_T_GETMASTERINFO* p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_GETMASTERINFO_OFFS_RESULT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_GETMASTERINFO_SET_RESULT(ATEMRAS_T_GETMASTERINFO* p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_GETMASTERINFO_OFFS_RESULT), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_MASTER_INFO* ATEMRAS_GETMASTERINFO_GET_MASTER_INFO_POINTER(ATEMRAS_T_GETMASTERINFO* p)
{
    return (EC_T_MASTER_INFO*)(((EC_T_PBYTE)p) + ATEMRAS_GETMASTERINFO_OFFS_MASTER_INFO);
} EC_INLINESTOP

/* Config Extend */
typedef struct _ATEMRAS_T_CONFIGEXTEND
{
    EC_T_DWORD          dwCommandCode;      /* Command Code */              /* 00 */
    EC_T_DWORD          dwInstanceID;       /* Master Instance */           /* 04 */

    EC_T_BOOL           bResetConfig;                                       /* 08 */
    EC_T_DWORD          dwTimeout;                                          /* 12 */
    EC_T_DWORD          dwSrvResult;        /* Result code from server */   /* 16 */
} EC_PACKED(1) ATEMRAS_T_CONFIGEXTEND;


#define ATEMRAS_T_CONFIGEXTEND_SIZE    sizeof(ATEMRAS_T_CONFIGEXTEND)

#define ATEMRAS_CONFIGEXTEND_OFFS_COMMANDCODE      ((EC_T_DWORD)0)
#define ATEMRAS_CONFIGEXTEND_OFFS_INSTANCEID       ((EC_T_DWORD)4)
#define ATEMRAS_CONFIGEXTEND_OFFS_RESETCONFIG      ((EC_T_DWORD)8)
#define ATEMRAS_CONFIGEXTEND_OFFS_TIMEOUT          ((EC_T_DWORD)12)
#define ATEMRAS_CONFIGEXTEND_OFFS_SRVRESULT        ((EC_T_DWORD)16)

static EC_INLINESTART EC_T_DWORD ATEMRAS_CONFIGEXTEND_GET_COMMANDCODE(ATEMRAS_T_CONFIGEXTEND* p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_CONFIGEXTEND_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_CONFIGEXTEND_SET_COMMANDCODE(ATEMRAS_T_CONFIGEXTEND* p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_CONFIGEXTEND_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_CONFIGEXTEND_GET_INSTANCEID(ATEMRAS_T_CONFIGEXTEND* p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_CONFIGEXTEND_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_CONFIGEXTEND_SET_INSTANCEID(ATEMRAS_T_CONFIGEXTEND* p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_CONFIGEXTEND_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_BOOL ATEMRAS_CONFIGEXTEND_GET_RESETCONFIG(ATEMRAS_T_CONFIGEXTEND* p)
{
    return EC_GET_FRM_BOOL((((EC_T_PBYTE)p) + ATEMRAS_CONFIGEXTEND_OFFS_RESETCONFIG));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_CONFIGEXTEND_SET_RESETCONFIG(ATEMRAS_T_CONFIGEXTEND* p, EC_T_BOOL bVal)
{
    EC_SET_FRM_BOOL((((EC_T_PBYTE)p) + ATEMRAS_CONFIGEXTEND_OFFS_RESETCONFIG), bVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_CONFIGEXTEND_GET_TIMEOUT(ATEMRAS_T_CONFIGEXTEND* p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_CONFIGEXTEND_OFFS_TIMEOUT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_CONFIGEXTEND_SET_TIMEOUT(ATEMRAS_T_CONFIGEXTEND* p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_CONFIGEXTEND_OFFS_TIMEOUT), dwVal);
} EC_INLINESTOP

static EC_INLINESTART EC_T_DWORD ATEMRAS_CONFIGEXTEND_GET_SRVRESULT(ATEMRAS_T_CONFIGEXTEND* p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_CONFIGEXTEND_OFFS_SRVRESULT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_CONFIGEXTEND_SET_SRVRESULT(ATEMRAS_T_CONFIGEXTEND* p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_CONFIGEXTEND_OFFS_SRVRESULT), dwVal);
} EC_INLINESTOP

/* SetMbxProtocolsSerialize */
typedef struct _ATEMRAS_T_SETMBXPROTOCOLSSERIALIZE
{
    EC_T_DWORD          dwCommandCode;      /* Command Code */              /* 00 */
    EC_T_DWORD          dwInstanceID;       /* Master Instance */           /* 04 */

    EC_T_DWORD          dwSlaveID;                                          /* 08 */
    EC_T_BOOL           bSerialize;                                         /* 12 */
    EC_T_DWORD          dwSrvResult;        /* Result code from server */   /* 16 */
} EC_PACKED(1) ATEMRAS_T_SETMBXPROTOCOLSSERIALIZE;


#define ATEMRAS_T_SETMBXPROTOCOLSSERIALIZE_SIZE                sizeof(ATEMRAS_T_SETMBXPROTOCOLSSERIALIZE)

#define ATEMRAS_SETMBXPROTOCOLSSERIALIZE_OFFS_COMMANDCODE      ((EC_T_DWORD)0)
#define ATEMRAS_SETMBXPROTOCOLSSERIALIZE_OFFS_INSTANCEID       ((EC_T_DWORD)4)
#define ATEMRAS_SETMBXPROTOCOLSSERIALIZE_OFFS_SLAVEID          ((EC_T_DWORD)8)
#define ATEMRAS_SETMBXPROTOCOLSSERIALIZE_OFFS_SERIALIZE        ((EC_T_DWORD)12)
#define ATEMRAS_SETMBXPROTOCOLSSERIALIZE_OFFS_SRVRESULT        ((EC_T_DWORD)16)

static EC_INLINESTART EC_T_DWORD ATEMRAS_SETMBXPROTOCOLSSERIALIZE_GET_COMMANDCODE(ATEMRAS_T_SETMBXPROTOCOLSSERIALIZE* p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_SETMBXPROTOCOLSSERIALIZE_OFFS_COMMANDCODE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SETMBXPROTOCOLSSERIALIZE_SET_COMMANDCODE(ATEMRAS_T_SETMBXPROTOCOLSSERIALIZE* p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_SETMBXPROTOCOLSSERIALIZE_OFFS_COMMANDCODE), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_SETMBXPROTOCOLSSERIALIZE_GET_INSTANCEID(ATEMRAS_T_SETMBXPROTOCOLSSERIALIZE* p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_SETMBXPROTOCOLSSERIALIZE_OFFS_INSTANCEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SETMBXPROTOCOLSSERIALIZE_SET_INSTANCEID(ATEMRAS_T_SETMBXPROTOCOLSSERIALIZE* p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_SETMBXPROTOCOLSSERIALIZE_OFFS_INSTANCEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_SETMBXPROTOCOLSSERIALIZE_GET_SLAVEID(ATEMRAS_T_SETMBXPROTOCOLSSERIALIZE* p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_SETMBXPROTOCOLSSERIALIZE_OFFS_SLAVEID));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SETMBXPROTOCOLSSERIALIZE_SET_SLAVEID(ATEMRAS_T_SETMBXPROTOCOLSSERIALIZE* p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_SETMBXPROTOCOLSSERIALIZE_OFFS_SLAVEID), dwVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_BOOL ATEMRAS_SETMBXPROTOCOLSSERIALIZE_GET_SERIALIZE(ATEMRAS_T_SETMBXPROTOCOLSSERIALIZE* p)
{
    return EC_GET_FRM_BOOL((((EC_T_PBYTE)p) + ATEMRAS_SETMBXPROTOCOLSSERIALIZE_OFFS_SERIALIZE));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SETMBXPROTOCOLSSERIALIZE_SET_SERIALIZE(ATEMRAS_T_SETMBXPROTOCOLSSERIALIZE* p, EC_T_BOOL bVal)
{
    EC_SET_FRM_BOOL((((EC_T_PBYTE)p) + ATEMRAS_SETMBXPROTOCOLSSERIALIZE_OFFS_SERIALIZE), bVal);
} EC_INLINESTOP
static EC_INLINESTART EC_T_DWORD ATEMRAS_SETMBXPROTOCOLSSERIALIZE_GET_SRVRESULT(ATEMRAS_T_SETMBXPROTOCOLSSERIALIZE* p)
{
    return EC_GET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_SETMBXPROTOCOLSSERIALIZE_OFFS_SRVRESULT));
} EC_INLINESTOP
static EC_INLINESTART EC_T_VOID ATEMRAS_SETMBXPROTOCOLSSERIALIZE_SET_SRVRESULT(ATEMRAS_T_SETMBXPROTOCOLSSERIALIZE* p, EC_T_DWORD dwVal)
{
    EC_SET_FRM_DWORD((((EC_T_PBYTE)p) + ATEMRAS_SETMBXPROTOCOLSSERIALIZE_OFFS_SRVRESULT), dwVal);
} EC_INLINESTOP

#include EC_PACKED_INCLUDESTOP

/*-HELPER-CLASS---------------------------------------------------------------------*/
class CAtemRasHelper
{
  struct _ATEMRAS_T_HELPER_ELEM {
    EC_T_BYTE* pBuffer;
    EC_T_DWORD dwBufferSize;
    struct _ATEMRAS_T_HELPER_ELEM* pNext;
  };

public:
  CAtemRasHelper();
  ~CAtemRasHelper();
  EC_T_VOID setCmd(EC_T_DWORD dwCmd) { m_dwCmd = dwCmd; }
  EC_T_VOID setTimeout(EC_T_DWORD dwTimeout) { m_dwTimeout = dwTimeout; }
  EC_T_VOID setInstanceID(EC_T_DWORD dwInstanceID) { m_dwInstanceID = dwInstanceID; }
  EC_T_DWORD getCmd() { return m_dwCmd; }
  EC_T_DWORD getTimeout() { return m_dwTimeout; }
  EC_T_DWORD getInstanceID() { return m_dwInstanceID; }
  EC_T_DWORD getInstanceIDforSrv() { return m_dwInstanceID & ((EC_T_DWORD)0x0000FFFF); }
  EC_T_VOID setSize(EC_T_DWORD dwSize) { m_dwSize = dwSize; }
  EC_T_DWORD getSize() { return m_dwSize; }

  EC_INLINESTART EC_T_VOID setAsData(EC_T_VOID* pData, EC_T_DWORD dwDataSize) 
  {
    addToList(pData, dwDataSize, EC_TRUE);
  } EC_INLINESTOP
  EC_T_VOID setAsDword(EC_T_DWORD pData) { setAsData(&pData, sizeof(EC_T_DWORD)); }
  EC_T_VOID setAsWord(EC_T_WORD pData) { setAsData(&pData, sizeof(EC_T_WORD)); }
  EC_T_VOID setAsByte(EC_T_BYTE pData) { setAsData(&pData, sizeof(EC_T_BYTE)); }

  EC_T_BYTE* getAsBytePtr(EC_T_DWORD dwIdx) { 
    if (!m_pTransferBuffer)
      return EC_NULL;
    EC_T_DWORD dwOffset = calcOffset(dwIdx);
    if (dwOffset == 0)
      return EC_NULL;
    return m_pTransferBuffer+dwOffset; 
  }
  EC_T_VOID getData(EC_T_DWORD dwIdx, EC_T_VOID* pData, EC_T_DWORD dwDataSize) {
    EC_T_BYTE* p = getAsBytePtr(dwIdx);
    if (p)
    {
      OsMemcpy(pData, p, dwDataSize);
    }
  }
  EC_T_WORD* getAsWordPtr(EC_T_DWORD dwIdx) { return (EC_T_WORD*)getAsBytePtr(dwIdx); }
  EC_T_DWORD* getAsDwordPtr(EC_T_DWORD dwIdx) { return (EC_T_DWORD*)getAsBytePtr(dwIdx); }
  EC_T_DWORD getAsDword(EC_T_DWORD dwIdx) { EC_T_DWORD* p = getAsDwordPtr(dwIdx); return (p ? *p : 0); }
  EC_T_WORD getAsWord(EC_T_DWORD dwIdx) { EC_T_WORD* p = getAsWordPtr(dwIdx); return (EC_T_WORD)(p ? *p : 0); }
  EC_T_BYTE getAsByte(EC_T_DWORD dwIdx) { EC_T_BYTE* p = getAsBytePtr(dwIdx); return (EC_T_BYTE)(p ? *p : 0); }

  EC_T_BOOL createTransferBuffer(EC_T_VOID** pData, EC_T_DWORD* dwDataSize) {
    // Calculate size
    EC_T_DWORD dwSize = 3*sizeof(EC_T_DWORD);
    struct _ATEMRAS_T_HELPER_ELEM* p = m_pList;
    while(p)
    {
      dwSize += p->dwBufferSize;
      p = p->pNext;
    }

    m_dwSize = dwSize;

    // Add internal stuff
    addToList(&dwSize, sizeof(EC_T_DWORD), EC_FALSE);
    addToList(&m_dwInstanceID, sizeof(EC_T_DWORD), EC_FALSE);
    addToList(&m_dwCmd, sizeof(EC_T_DWORD), EC_FALSE);

    EC_T_BYTE* pBuffer = (EC_T_BYTE*)OsMalloc(dwSize);
    EC_T_BYTE* pCur = pBuffer;

    p = m_pList;
    while(p)
    {
      memcpy(pCur, p->pBuffer, p->dwBufferSize);
      pCur += p->dwBufferSize;

      p = p->pNext;
    }

    m_pTransferBuffer = pBuffer;

    *pData = pBuffer;
    *dwDataSize = dwSize;
    return EC_TRUE;
  }
  EC_T_BOOL analyzeResultBuffer(EC_T_VOID* pData) {
    SafeOsFree(m_pTransferBuffer);
    m_pTransferBuffer = (EC_T_BYTE*)OsMalloc(m_dwSize);
    OsMemcpy(m_pTransferBuffer, pData, m_dwSize);
    return EC_TRUE;
  }
  EC_T_BOOL analyzeReceiveBuffer(EC_T_VOID* pData) {
    m_pTransferBuffer = (EC_T_BYTE*)pData;
    m_bSkipFree = EC_TRUE;

    EC_T_DWORD* p = (EC_T_DWORD*)m_pTransferBuffer;
    m_dwCmd = EC_GET_FRM_DWORD(p+0);
    m_dwInstanceID = EC_GET_FRM_DWORD(p+1);
    m_dwSize = *(p+2);

    // Add internal stuff
    addToList(&m_dwSize, sizeof(EC_T_DWORD), EC_FALSE);
    addToList(&m_dwInstanceID, sizeof(EC_T_DWORD), EC_FALSE);
    addToList(&m_dwCmd, sizeof(EC_T_DWORD), EC_FALSE);
    return EC_TRUE;
  }

protected:
  EC_T_DWORD calcOffset(EC_T_DWORD dwIdx);
  void addToList(EC_T_VOID* pData, EC_T_DWORD dwDataSize, EC_T_BOOL fBack);

private:
  EC_T_DWORD m_dwCmd;
  EC_T_DWORD m_dwTimeout;
  EC_T_DWORD m_dwInstanceID;
  EC_T_DWORD m_dwSize;

  struct _ATEMRAS_T_HELPER_ELEM* m_pList;
  struct _ATEMRAS_T_HELPER_ELEM* m_pLast;

  EC_T_BYTE* m_pTransferBuffer;
  EC_T_BOOL m_bSkipFree;
};

/*-FUNCTION DECLARATION------------------------------------------------------*/
EC_T_DWORD emrasProtoCreateNackNoAlloc(ATEMRAS_PT_PROTOHDR ptRxHdr, EC_T_DWORD dwCause, EC_T_BYTE*   pbyData, EC_T_DWORD* pdwLen);
EC_T_DWORD emrasProtoCreateNack(       ATEMRAS_PT_PROTOHDR ptRxHdr, EC_T_DWORD dwCause, EC_T_BYTE** ppbyData, EC_T_DWORD* pdwLen);
EC_T_DWORD emrasProtoCreateAckNoAlloc(ATEMRAS_PT_PROTOHDR ptRxHdr, EC_T_DWORD dwCause, EC_T_BYTE*   pbyData, EC_T_DWORD* pdwLen, EC_T_BOOL bWait=EC_FALSE);
EC_T_DWORD emrasProtoCreateAck(       ATEMRAS_PT_PROTOHDR ptRxHdr, EC_T_DWORD dwCause, EC_T_BYTE** ppbyData, EC_T_DWORD* pdwLen, EC_T_BOOL bWait=EC_FALSE);

EC_T_DWORD emrasProtoCreateDisconnectNoAlloc(EC_T_DWORD dwCookie, EC_T_DWORD dwCause, EC_T_BYTE*   pbyData, EC_T_DWORD* pdwLen);
EC_T_DWORD emrasProtoCreateDisconnect(       EC_T_DWORD dwCookie, EC_T_DWORD dwCause, EC_T_BYTE** ppbyData, EC_T_DWORD* pdwLen);

EC_T_DWORD emrasProtoCreateConnectNoAlloc(EC_T_DWORD dwCookie, EC_T_DWORD dwVersion, EC_T_BYTE*   pbyData, EC_T_DWORD* pdwLen);
EC_T_DWORD emrasProtoCreateConnect(       EC_T_DWORD dwCookie, EC_T_DWORD dwVersion, EC_T_BYTE** ppbyData, EC_T_DWORD* pdwLen);
EC_T_DWORD emrasProtoValidateConnect(ATEMRAS_PT_PROTOHDR pHdr, EC_T_DWORD dwVersion, EC_T_DWORD dwDataLen, EC_T_BYTE* pbyData);

EC_T_DWORD emrasProtoCreateConnectOemNoAlloc(EC_T_DWORD dwCookie, EC_T_DWORD dwVersion, EC_T_DWORD dwInstanceID, EC_T_UINT64 qwOemKey, EC_T_BYTE* pbyData, EC_T_DWORD* pdwLen);
EC_T_DWORD emrasProtoCreateConnectOem(       EC_T_DWORD dwCookie, EC_T_DWORD dwVersion, EC_T_DWORD dwInstanceID, EC_T_UINT64 qwOemKey, EC_T_BYTE** ppbyData, EC_T_DWORD* pdwLen);

EC_T_DWORD emrasProtoCreateIdle(EC_T_DWORD dwCookie, ATEMRAS_PT_PROTOHDR pConHdr);

EC_T_DWORD emrasProtoInsertCmdHeader(EC_T_DWORD dwCookie, EC_T_BYTE* pbyData, EC_T_DWORD dwLen);
EC_T_DWORD emrasProtoInsertNotificationHeader(EC_T_DWORD dwCookie, EC_T_BYTE* pbyData, EC_T_DWORD dwLen);
EC_T_DWORD emrasProtoCreateCmdResponseNoAlloc(ATEMRAS_PT_PROTOHDR pHdr, EC_T_DWORD dwLen);
EC_T_DWORD emrasProtoCreateCmdResponse(ATEMRAS_PT_PROTOHDR pHdr, EC_T_DWORD dwLen, EC_T_BYTE* pbyData, EC_T_BYTE** pbyDataNew, EC_T_DWORD* pdwLen);

#endif /* INC_ATEMRASREMOTEPROTOCOL */

/*-END OF SOURCE FILE--------------------------------------------------------*/
